{"expireTime":9007200810530858000,"key":"transformer-remark-markdown-ast-f18bc7768efdc36cdd4666ea5070f508-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"单例模式","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":7,"offset":6},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":7,"offset":6},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。","position":{"start":{"line":3,"column":3,"offset":10},"end":{"line":4,"column":80,"offset":165},"indent":[1]}}],"position":{"start":{"line":3,"column":3,"offset":10},"end":{"line":4,"column":80,"offset":165},"indent":[1]}}],"position":{"start":{"line":3,"column":1,"offset":8},"end":{"line":4,"column":80,"offset":165},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"注意：","position":{"start":{"line":6,"column":4,"offset":170},"end":{"line":6,"column":7,"offset":173},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":167},"end":{"line":6,"column":7,"offset":173},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"1、单例类只能有一个实例。","position":{"start":{"line":7,"column":3,"offset":176},"end":{"line":7,"column":16,"offset":189},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":176},"end":{"line":7,"column":16,"offset":189},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":174},"end":{"line":7,"column":16,"offset":189},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2、单例类必须自己创建自己的唯一实例。","position":{"start":{"line":8,"column":3,"offset":192},"end":{"line":8,"column":22,"offset":211},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":192},"end":{"line":8,"column":22,"offset":211},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":190},"end":{"line":8,"column":22,"offset":211},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"3、单例类必须给所有其他对象提供这一实例。","position":{"start":{"line":9,"column":3,"offset":214},"end":{"line":9,"column":24,"offset":235},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":214},"end":{"line":9,"column":24,"offset":235},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":212},"end":{"line":9,"column":24,"offset":235},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":174},"end":{"line":9,"column":24,"offset":235},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"介绍","position":{"start":{"line":11,"column":4,"offset":240},"end":{"line":11,"column":6,"offset":242},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":237},"end":{"line":11,"column":6,"offset":242},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n主要解决：一个全局使用的类频繁地创建与销毁。\n何时使用：当您想控制实例数目，节省系统资源的时候。\n如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。\n关键代码：构造函数是私有的。","position":{"start":{"line":12,"column":1,"offset":243},"end":{"line":16,"column":15,"offset":372},"indent":[1,1,1,1]}}],"position":{"start":{"line":12,"column":1,"offset":243},"end":{"line":16,"column":15,"offset":372},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"应用实例： ","position":{"start":{"line":18,"column":1,"offset":374},"end":{"line":18,"column":7,"offset":380},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":374},"end":{"line":18,"column":7,"offset":380},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"1、一个党只能有一个主席。 ","position":{"start":{"line":19,"column":3,"offset":383},"end":{"line":19,"column":17,"offset":397},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":383},"end":{"line":19,"column":17,"offset":397},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":381},"end":{"line":19,"column":17,"offset":397},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 ","position":{"start":{"line":20,"column":3,"offset":400},"end":{"line":20,"column":83,"offset":480},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":400},"end":{"line":20,"column":83,"offset":480},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":398},"end":{"line":20,"column":83,"offset":480},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。","position":{"start":{"line":21,"column":3,"offset":483},"end":{"line":21,"column":60,"offset":540},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":483},"end":{"line":21,"column":60,"offset":540},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":481},"end":{"line":21,"column":60,"offset":540},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":381},"end":{"line":21,"column":60,"offset":540},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"优点： ","position":{"start":{"line":23,"column":1,"offset":542},"end":{"line":23,"column":5,"offset":546},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":542},"end":{"line":23,"column":5,"offset":546},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 ","position":{"start":{"line":24,"column":3,"offset":549},"end":{"line":24,"column":54,"offset":600},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":549},"end":{"line":24,"column":54,"offset":600},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":547},"end":{"line":24,"column":54,"offset":600},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2、避免对资源的多重占用（比如写文件操作）。","position":{"start":{"line":25,"column":3,"offset":603},"end":{"line":25,"column":25,"offset":625},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":603},"end":{"line":25,"column":25,"offset":625},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":601},"end":{"line":25,"column":25,"offset":625},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":547},"end":{"line":25,"column":25,"offset":625},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。","position":{"start":{"line":27,"column":1,"offset":627},"end":{"line":27,"column":51,"offset":677},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":627},"end":{"line":27,"column":51,"offset":677},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"使用场景： ","position":{"start":{"line":29,"column":1,"offset":679},"end":{"line":29,"column":7,"offset":685},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":679},"end":{"line":29,"column":7,"offset":685},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"1、要求生产唯一序列号。 ","position":{"start":{"line":30,"column":3,"offset":688},"end":{"line":30,"column":16,"offset":701},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":688},"end":{"line":30,"column":16,"offset":701},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":686},"end":{"line":30,"column":16,"offset":701},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 ","position":{"start":{"line":31,"column":3,"offset":704},"end":{"line":31,"column":41,"offset":742},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":704},"end":{"line":31,"column":41,"offset":742},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":702},"end":{"line":31,"column":41,"offset":742},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。","position":{"start":{"line":32,"column":3,"offset":745},"end":{"line":32,"column":38,"offset":780},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":745},"end":{"line":32,"column":38,"offset":780},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":743},"end":{"line":32,"column":38,"offset":780},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":686},"end":{"line":32,"column":38,"offset":780},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。","position":{"start":{"line":34,"column":1,"offset":782},"end":{"line":34,"column":90,"offset":871},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":782},"end":{"line":34,"column":90,"offset":871},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"实现","position":{"start":{"line":36,"column":4,"offset":876},"end":{"line":36,"column":6,"offset":878},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":873},"end":{"line":36,"column":6,"offset":878},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们将创建一个 SingleObject 类。SingleObject 类有它的私有构造函数和本身的一个静态实例。","position":{"start":{"line":38,"column":1,"offset":880},"end":{"line":38,"column":58,"offset":937},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":880},"end":{"line":38,"column":58,"offset":937},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"SingleObject 类提供了一个静态方法，供外界获取它的静态实例。","position":{"start":{"line":40,"column":1,"offset":939},"end":{"line":40,"column":37,"offset":975},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":939},"end":{"line":40,"column":37,"offset":975},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"SingletonPatternDemo，我们的演示类使用 SingleObject 类来获取 SingleObject 对象。","position":{"start":{"line":42,"column":1,"offset":977},"end":{"line":42,"column":65,"offset":1041},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":977},"end":{"line":42,"column":65,"offset":1041},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://raw.githubusercontent.com/jasonyang86/nocoder/master/data/images/design-pattern/singleton_pattern_uml_diagram.jpg","alt":null,"position":{"start":{"line":44,"column":1,"offset":1043},"end":{"line":44,"column":127,"offset":1169},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1043},"end":{"line":44,"column":127,"offset":1169},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 1","position":{"start":{"line":46,"column":5,"offset":1175},"end":{"line":46,"column":9,"offset":1179},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1171},"end":{"line":46,"column":9,"offset":1179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"创建一个 Singleton 类。\nSingleObject.java","position":{"start":{"line":47,"column":1,"offset":1180},"end":{"line":48,"column":18,"offset":1215},"indent":[1]}}],"position":{"start":{"line":47,"column":1,"offset":1180},"end":{"line":48,"column":18,"offset":1215},"indent":[1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleObject</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token comment\">//创建 SingleObject 的一个对象</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingleObject</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">//让构造函数为 private，这样该类就不会被实例化</span>\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingleObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n   <span class=\"token comment\">//获取唯一可用的对象</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingleObject</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":1216},"end":{"line":67,"column":4,"offset":1575},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 2","position":{"start":{"line":68,"column":5,"offset":1580},"end":{"line":68,"column":9,"offset":1584},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1576},"end":{"line":68,"column":9,"offset":1584},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"从 singleton 类获取唯一的对象。\nSingletonPatternDemo.java","position":{"start":{"line":69,"column":1,"offset":1585},"end":{"line":70,"column":26,"offset":1632},"indent":[1]}}],"position":{"start":{"line":69,"column":1,"offset":1585},"end":{"line":70,"column":26,"offset":1632},"indent":[1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonPatternDemo</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\">//不合法的构造函数</span>\n      <span class=\"token comment\">//编译时错误：构造函数 SingleObject() 是不可见的</span>\n      <span class=\"token comment\">//SingleObject object = new SingleObject();</span>\n\n      <span class=\"token comment\">//获取唯一可用的对象</span>\n      <span class=\"token class-name\">SingleObject</span> object <span class=\"token operator\">=</span> <span class=\"token class-name\">SingleObject</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//显示消息</span>\n      object<span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":71,"column":1,"offset":1633},"end":{"line":86,"column":4,"offset":1956},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 3","position":{"start":{"line":87,"column":5,"offset":1961},"end":{"line":87,"column":9,"offset":1965},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":1957},"end":{"line":87,"column":9,"offset":1965},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"验证输出。","position":{"start":{"line":88,"column":1,"offset":1966},"end":{"line":88,"column":6,"offset":1971},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":1966},"end":{"line":88,"column":6,"offset":1971},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello World!</code></pre></div>","position":{"start":{"line":89,"column":1,"offset":1972},"end":{"line":91,"column":4,"offset":1992},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"单例模式的几种实现方式\n单例模式的实现有多种方式，如下所示：","position":{"start":{"line":93,"column":1,"offset":1994},"end":{"line":94,"column":19,"offset":2024},"indent":[1]}}],"position":{"start":{"line":93,"column":1,"offset":1994},"end":{"line":94,"column":19,"offset":2024},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"1、懒汉式，线程不安全","position":{"start":{"line":96,"column":5,"offset":2030},"end":{"line":96,"column":16,"offset":2041},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2026},"end":{"line":96,"column":16,"offset":2041},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"是否 Lazy 初始化：是\n是否多线程安全：否\n实现难度：易\n描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。\n这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。\n代码实例：","position":{"start":{"line":97,"column":1,"offset":2042},"end":{"line":102,"column":6,"offset":2192},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":97,"column":1,"offset":2042},"end":{"line":102,"column":6,"offset":2192},"indent":[1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  </code></pre></div>","position":{"start":{"line":103,"column":1,"offset":2193},"end":{"line":115,"column":4,"offset":2461},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。","position":{"start":{"line":117,"column":1,"offset":2463},"end":{"line":117,"column":31,"offset":2493},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2463},"end":{"line":117,"column":31,"offset":2493},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"2、懒汉式，线程安全","position":{"start":{"line":119,"column":5,"offset":2499},"end":{"line":119,"column":15,"offset":2509},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2495},"end":{"line":119,"column":15,"offset":2509},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"是否 Lazy 初始化：是\n是否多线程安全：是\n实现难度：易\n描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n优点：第一次调用才初始化，避免内存浪费。\n缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\ngetInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n代码实例：","position":{"start":{"line":120,"column":1,"offset":2510},"end":{"line":127,"column":6,"offset":2706},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":120,"column":1,"offset":2510},"end":{"line":127,"column":6,"offset":2706},"indent":[1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span> </code></pre></div>","position":{"start":{"line":128,"column":1,"offset":2707},"end":{"line":139,"column":4,"offset":2984},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"3、饿汉式","position":{"start":{"line":141,"column":5,"offset":2990},"end":{"line":141,"column":10,"offset":2995},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":2986},"end":{"line":141,"column":10,"offset":2995},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"是否 Lazy 初始化：否\n是否多线程安全：是\n实现难度：易\n描述：这种方式比较常用，但容易产生垃圾对象。\n优点：没有加锁，执行效率会提高。\n缺点：类加载时就初始化，浪费内存。\n它基于 classloder 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。\n代码实例：","position":{"start":{"line":142,"column":1,"offset":2996},"end":{"line":149,"column":6,"offset":3257},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":142,"column":1,"offset":2996},"end":{"line":149,"column":6,"offset":3257},"indent":[1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  </code></pre></div>","position":{"start":{"line":151,"column":1,"offset":3259},"end":{"line":159,"column":4,"offset":3466},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"4、双检锁/双重校验锁（DCL，即 double-checked locking）","position":{"start":{"line":161,"column":5,"offset":3472},"end":{"line":161,"column":46,"offset":3513},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":3468},"end":{"line":161,"column":46,"offset":3513},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"JDK 版本：JDK1.5 起\n是否 Lazy 初始化：是\n是否多线程安全：是\n实现难度：较复杂\n描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。\ngetInstance() 的性能对应用程序很关键。\n代码实例：","position":{"start":{"line":162,"column":1,"offset":3514},"end":{"line":168,"column":6,"offset":3627},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":162,"column":1,"offset":3514},"end":{"line":168,"column":6,"offset":3627},"indent":[1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> singleton<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  </code></pre></div>","position":{"start":{"line":169,"column":1,"offset":3628},"end":{"line":184,"column":4,"offset":4013},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"5、登记式/静态内部类","position":{"start":{"line":186,"column":5,"offset":4019},"end":{"line":186,"column":16,"offset":4030},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":4015},"end":{"line":186,"column":16,"offset":4030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"是否 Lazy 初始化：是\n是否多线程安全：是\n实现难度：一般\n描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n这种方式同样利用了 classloder 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有显示通过调用 getInstance 方法时，才会显示装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。\n代码实例：","position":{"start":{"line":187,"column":1,"offset":4031},"end":{"line":192,"column":6,"offset":4580},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":187,"column":1,"offset":4031},"end":{"line":192,"column":6,"offset":4580},"indent":[1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonHolder</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingletonHolder</span><span class=\"token punctuation\">.</span>INSTANCE<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>   </code></pre></div>","position":{"start":{"line":193,"column":1,"offset":4581},"end":{"line":203,"column":4,"offset":4870},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"6、枚举","position":{"start":{"line":205,"column":5,"offset":4876},"end":{"line":205,"column":9,"offset":4880},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":4872},"end":{"line":205,"column":9,"offset":4880},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"JDK 版本：JDK1.5 起\n是否 Lazy 初始化：否\n是否多线程安全：是\n实现难度：易\n描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。\n不能通过 reflection attack 来调用私有构造方法。\n代码实例：","position":{"start":{"line":206,"column":1,"offset":4881},"end":{"line":213,"column":6,"offset":5174},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":206,"column":1,"offset":4881},"end":{"line":213,"column":6,"offset":5174},"indent":[1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>  \n    INSTANCE<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whateverMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  </code></pre></div>","position":{"start":{"line":215,"column":1,"offset":5176},"end":{"line":221,"column":4,"offset":5278},"indent":[1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。","position":{"start":{"line":223,"column":3,"offset":5282},"end":{"line":223,"column":148,"offset":5427},"indent":[]}}],"position":{"start":{"line":223,"column":3,"offset":5282},"end":{"line":223,"column":148,"offset":5427},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":5280},"end":{"line":223,"column":148,"offset":5427},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":223,"column":148,"offset":5427}}}}