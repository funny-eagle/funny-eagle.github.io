{"expireTime":9007200810533171000,"key":"transformer-remark-markdown-html-c8d8ea599e96db9c804cdc18c3ef4354-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 876. Middle of the Linked List\n * &lt;p>\n * Given a non-empty, singly linked list with head node head, return a middle node of linked list.\n * &lt;p>\n * If there are two middle nodes, return the second middle node.\n * &lt;p>\n * Example 1:\n * &lt;p>\n * Input: [1,2,3,4,5]\n * Output: Node 3 from this list (Serialization: [3,4,5])\n * The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).\n * Note that we returned a ListNode object ans, such that:\n * ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\n * Example 2:\n * &lt;p>\n * Input: [1,2,3,4,5,6]\n * Output: Node 4 from this list (Serialization: [4,5,6])\n * Since the list has two middle nodes with values 3 and 4, we return the second one.\n * &lt;p>\n * &lt;p>\n * Note:\n * &lt;p>\n * The number of nodes in the given list will be between 1 and 100.\n *\n * @author jason\n * @date 2018/12/9.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MiddleOfTheLinkedList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> count <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        val <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<h3><a href=\"https://medium.com/@priya104/the-composite-pattern-2edec432dd58\"> The Composite Pattern</a></h3>\n<p>模式通常被一起使用，并被组合在同一个设计解决方案中，复合模式在一个解决方案中结合多个设计模式，以解决一般或者重复发生的问题。</p>\n<h2>Tip</h2>\n<p>Python3 configparser 读取cfg文件时， 如果value包含百分号(%)，则需要另加一个百分号(%)来转义。</p>\n<p>假设有如下配置文件:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>prod<span class=\"token operator\">-</span>server<span class=\"token punctuation\">]</span>\n\nip<span class=\"token operator\">=</span><span class=\"token number\">192.168</span><span class=\"token number\">.28</span><span class=\"token number\">.123</span>\n\nusername<span class=\"token operator\">=</span>root\n\npassword<span class=\"token operator\">=</span>7ice$<span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token number\">18</span></code></pre></div>\n<p>其中 <code class=\"language-text\">password</code> 真实值为 <code class=\"language-text\">7ice$%18</code>，包含百分号，就必须写成 <code class=\"language-text\">7ice$%%18</code>，否则会抛如下异常信息：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  File <span class=\"token string\">\"D:/usr/local/yuntu/clean-unused-docker-images/run.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n\n    main<span class=\"token punctuation\">(</span><span class=\"token string\">\"conf/server.cfg\"</span><span class=\"token punctuation\">)</span>\n\n  File <span class=\"token string\">\"D:/usr/local/yuntu/clean-unused-docker-images/run.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> main\n\n    password <span class=\"token operator\">=</span> conf<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>section<span class=\"token punctuation\">,</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span>\n\n  File <span class=\"token string\">\"C:\\Python37-32\\lib\\configparser.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">799</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> get\n\n    d<span class=\"token punctuation\">)</span>\n\n  File <span class=\"token string\">\"C:\\Python37-32\\lib\\configparser.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">394</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> before_get\n\n    self<span class=\"token punctuation\">.</span>_interpolate_some<span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> section<span class=\"token punctuation\">,</span> defaults<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  File <span class=\"token string\">\"C:\\Python37-32\\lib\\configparser.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">444</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> _interpolate_some\n\n    <span class=\"token string\">\"found: %r\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconfigparser<span class=\"token punctuation\">.</span>InterpolationSyntaxError<span class=\"token punctuation\">:</span> <span class=\"token string\">'%'</span> must be followed by <span class=\"token string\">'%'</span> <span class=\"token keyword\">or</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">,</span> found<span class=\"token punctuation\">:</span> <span class=\"token string\">'%hua'</span></code></pre></div>\n<h2>Share</h2>\n<h3>Spring Boot 设置跨域访问</h3>\n<blockquote>\n<p>现代浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。跨域HTTP请求是指A域上资源请求了B域上的资源，举例而言，部署在A机器上Nginx上的js代码通过ajax请求了部署在B机器Tomcat上的RESTful接口。</p>\n<p>IP（域名）不同、或者端口不同，都会造成跨域问题。为了解决跨域的问题，曾经出现过jsonp、代理文件等方案，应用场景受限，维护成本高，直到HTML5带来了CORS协议。</p>\n<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing），允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。它通过服务器增加一个特殊的Header[Access-Control-Allow-Origin]来告诉客户端跨域的限制，如果浏览器支持CORS、并且判断Origin通过的话，就会允许XMLHttpRequest发起跨域请求</p>\n<p>作者：郭寻抚</p>\n<p>链接：<a href=\"https://www.jianshu.com/p/55643abe7a18\">https://www.jianshu.com/p/55643abe7a18</a></p>\n<p>來源：简书</p>\n<p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n</blockquote>\n<p>作者在文中给出的demo在<code class=\"language-text\">spring-boot2</code>里已经过时了，在<code class=\"language-text\">spring-boot2</code>中的解决方案如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>blog<span class=\"token punctuation\">.</span>configuration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CorsRegistry</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WebMvcConfigurer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebMvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCorsMappings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CorsRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}