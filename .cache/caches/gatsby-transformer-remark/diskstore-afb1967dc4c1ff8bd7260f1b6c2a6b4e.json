{"expireTime":9007200810530856000,"key":"transformer-remark-markdown-ast-c53a17d121678c3f5393fff3f2018bf3-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"ARTS20-20181118","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":18,"offset":17},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":18,"offset":17},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Algorithm","position":{"start":{"line":3,"column":4,"offset":22},"end":{"line":3,"column":13,"offset":31},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":19},"end":{"line":3,"column":13,"offset":31},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 933. Number of Recent Calls\n *\n * Write a class RecentCounter to count recent requests.\n *\n * It has only one method: ping(int t), where t represents some time in milliseconds.\n *\n * Return the number of pings that have been made from 3000 milliseconds ago until now.\n *\n * Any ping with time in [t - 3000, t] will count, including the current ping.\n *\n * It is guaranteed that every call to ping uses a strictly larger value of t than before.\n *\n *\n *\n * Example 1:\n *\n * Input: inputs = [\"RecentCounter\",\"ping\",\"ping\",\"ping\",\"ping\"], inputs = [[],[1],[100],[3001],[3002]]\n * Output: [null,1,2,3,3]\n *\n *\n * Note:\n *\n * Each test case will have at most 10000 calls to ping.\n * Each test case will call ping with strictly increasing values of t.\n * Each call to ping will have 1 &lt;= t &lt;= 10^9.\n *\n * @author jason\n * @date 2018/11/18.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NumbersOfRecentCalls</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecentCounter</span> <span class=\"token punctuation\">{</span>\n\n    \t<span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> tm<span class=\"token punctuation\">;</span>\n    \t\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RecentCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \ttm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \ttm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> tm<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> tm<span class=\"token punctuation\">.</span><span class=\"token function\">tailMap</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Your RecentCounter object will be instantiated and called as such:\n * RecentCounter obj = new RecentCounter();\n * int param_1 = obj.ping(t);\n */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":5,"column":1,"offset":33},"end":{"line":64,"column":4,"offset":1426},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Review","position":{"start":{"line":66,"column":4,"offset":1431},"end":{"line":66,"column":10,"offset":1437},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1428},"end":{"line":66,"column":10,"offset":1437},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":null,"url":"https://www.javacodegeeks.com/2013/01/java-thread-pool-example-using-executors-and-threadpoolexecutor.html","children":[{"type":"text","value":"Java Thread Pool Example using Executors and ThreadPoolExecutor","position":{"start":{"line":68,"column":6,"offset":1444},"end":{"line":68,"column":69,"offset":1507},"indent":[]}}],"position":{"start":{"line":68,"column":5,"offset":1443},"end":{"line":68,"column":178,"offset":1616},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1439},"end":{"line":68,"column":178,"offset":1616},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"线程池包含一个队列，用于保持任务等待执行。线程池管理Runnable线程的集合，工作线程从队列中执行Runnable。java.util.concurrent.Executors提供java.util.concurrent.Executor接口的实现，以在java中创建线程池。","position":{"start":{"line":70,"column":1,"offset":1618},"end":{"line":70,"column":140,"offset":1757},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1618},"end":{"line":70,"column":140,"offset":1757},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tip","position":{"start":{"line":73,"column":4,"offset":1763},"end":{"line":73,"column":7,"offset":1766},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":1760},"end":{"line":73,"column":7,"offset":1766},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"线程池的饱和策略","position":{"start":{"line":75,"column":5,"offset":1772},"end":{"line":75,"column":13,"offset":1780},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1768},"end":{"line":75,"column":13,"offset":1780},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"ThreadPoolExecutor 构造方法中包含一个 BlockingQueue 参数，这个队列接收任务，并在线程中执行，如果这个队列满了，就会在创建一个新的线程，将任务放入新线程的Queue中，当线程数量达到线程池大小上限之后，线程池会reject 这个任务，此时 RejectedExceptionHandler 就派上用场了。","position":{"start":{"line":77,"column":3,"offset":1784},"end":{"line":77,"column":171,"offset":1952},"indent":[]}}],"position":{"start":{"line":77,"column":3,"offset":1784},"end":{"line":77,"column":171,"offset":1952},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":1782},"end":{"line":77,"column":171,"offset":1952},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"饱和策略","position":{"start":{"line":79,"column":3,"offset":1956},"end":{"line":79,"column":7,"offset":1960},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1954},"end":{"line":79,"column":9,"offset":1962},"indent":[]}},{"type":"text","value":"：当队列满了之后，饱和策略开始发挥作用，ThreadPoolExecutor 的饱和策略可以通过调用 RejectExceptionHandler 来修改。","position":{"start":{"line":79,"column":9,"offset":1962},"end":{"line":79,"column":87,"offset":2040},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1954},"end":{"line":79,"column":87,"offset":2040},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"JDK 提供了四种RejectExceptionHandler实现：AbortPolicy，CallerRunsPolicy，DiscardPolicy，DiscardOldestPolicy。","position":{"start":{"line":81,"column":1,"offset":2042},"end":{"line":81,"column":98,"offset":2139},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2042},"end":{"line":81,"column":98,"offset":2139},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Abort","position":{"start":{"line":83,"column":3,"offset":2143},"end":{"line":83,"column":8,"offset":2148},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2141},"end":{"line":83,"column":10,"offset":2150},"indent":[]}},{"type":"text","value":": 默认的饱和策略，该策略会抛出RuntimeException","position":{"start":{"line":83,"column":10,"offset":2150},"end":{"line":83,"column":42,"offset":2182},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2141},"end":{"line":83,"column":42,"offset":2182},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Discard","position":{"start":{"line":85,"column":3,"offset":2186},"end":{"line":85,"column":10,"offset":2193},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2184},"end":{"line":85,"column":12,"offset":2195},"indent":[]}},{"type":"text","value":"：抛弃该任务","position":{"start":{"line":85,"column":12,"offset":2195},"end":{"line":85,"column":18,"offset":2201},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2184},"end":{"line":85,"column":18,"offset":2201},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Discard-Oldest","position":{"start":{"line":87,"column":3,"offset":2205},"end":{"line":87,"column":17,"offset":2219},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2203},"end":{"line":87,"column":19,"offset":2221},"indent":[]}},{"type":"text","value":"：抛弃下一个奖杯执行的任务，然后尝试重新提交的新任务","position":{"start":{"line":87,"column":19,"offset":2221},"end":{"line":87,"column":45,"offset":2247},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2203},"end":{"line":87,"column":45,"offset":2247},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Caller-Runs","position":{"start":{"line":89,"column":3,"offset":2251},"end":{"line":89,"column":14,"offset":2262},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2249},"end":{"line":89,"column":16,"offset":2264},"indent":[]}},{"type":"text","value":"：实现了一种调节机制，不会抛弃任务，也不抛出异常，而是将任务退回到调用者，优调用者来执行，从而降低新任务的流量。","position":{"start":{"line":89,"column":16,"offset":2264},"end":{"line":89,"column":72,"offset":2320},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2249},"end":{"line":89,"column":72,"offset":2320},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ThreadPoolExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>\n\tN_THREADS<span class=\"token punctuation\">,</span> N_THREADS<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>CAPACITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setRejectExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CallRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":92,"column":1,"offset":2323},"end":{"line":98,"column":4,"offset":2563},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Share","position":{"start":{"line":101,"column":4,"offset":2569},"end":{"line":101,"column":9,"offset":2574},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2566},"end":{"line":101,"column":9,"offset":2574},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"正确设置线程池的大小","position":{"start":{"line":103,"column":5,"offset":2580},"end":{"line":103,"column":15,"offset":2590},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":2576},"end":{"line":103,"column":15,"offset":2590},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"最佳的线程池的大小，取决于被执行的任务和系统硬件。如果线程池过大，大量的线程将在相对很少的CPU和内存资源上发生竞争，这样会导致更多的内存消耗；如果线程池过小，许多空闲的处理器没有得到利用，降低了吞吐量。","position":{"start":{"line":105,"column":1,"offset":2592},"end":{"line":105,"column":103,"offset":2694},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":2592},"end":{"line":105,"column":103,"offset":2694},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"正确的设置线程池的大小，必须分析系统环境，资源和任务的特性，有多少个CPU，多大的内存，任务是计算密集型还是IO密集型，还是二者皆可。","position":{"start":{"line":107,"column":1,"offset":2696},"end":{"line":107,"column":68,"offset":2763},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":2696},"end":{"line":107,"column":68,"offset":2763},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果需要执行不同的任务，并且它们之间的行为相差很大，那么应该考虑使用多个线程池，从而使每个线程池可以根据各自的工作负载来调整。","position":{"start":{"line":109,"column":1,"offset":2765},"end":{"line":109,"column":64,"offset":2828},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2765},"end":{"line":109,"column":64,"offset":2828},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对于计算密集型的任务","position":{"start":{"line":111,"column":3,"offset":2832},"end":{"line":111,"column":13,"offset":2842},"indent":[]}}],"position":{"start":{"line":111,"column":3,"offset":2832},"end":{"line":111,"column":13,"offset":2842},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"N个CPU，线程池的大小为N+1时，通常能实现最优的利用率。","position":{"start":{"line":112,"column":4,"offset":2846},"end":{"line":112,"column":34,"offset":2876},"indent":[]}}],"position":{"start":{"line":112,"column":4,"offset":2846},"end":{"line":112,"column":34,"offset":2876},"indent":[]}}],"position":{"start":{"line":112,"column":2,"offset":2844},"end":{"line":112,"column":34,"offset":2876},"indent":[]}}],"position":{"start":{"line":112,"column":2,"offset":2844},"end":{"line":112,"column":34,"offset":2876},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2830},"end":{"line":112,"column":34,"offset":2876},"indent":[1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对于包含IO操作或者其他阻塞操作的任务，由于线程并不会一直执行，因此线程池的规模应该更大","position":{"start":{"line":113,"column":3,"offset":2879},"end":{"line":113,"column":47,"offset":2923},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":2879},"end":{"line":113,"column":47,"offset":2923},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"估算出任务的等待时间于计算时间的比值\t","position":{"start":{"line":114,"column":4,"offset":2927},"end":{"line":114,"column":23,"offset":2946},"indent":[]}}],"position":{"start":{"line":114,"column":4,"offset":2927},"end":{"line":114,"column":23,"offset":2946},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在某个基准负载下，分别设置不同大小的线程池来运行程序，观察CPU利用率","position":{"start":{"line":115,"column":5,"offset":2951},"end":{"line":115,"column":40,"offset":2986},"indent":[]}}],"position":{"start":{"line":115,"column":5,"offset":2951},"end":{"line":115,"column":40,"offset":2986},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":2949},"end":{"line":115,"column":40,"offset":2986},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"N = CPU的数量(可以通过","position":{"start":{"line":116,"column":5,"offset":2991},"end":{"line":116,"column":20,"offset":3006},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Runtime.getRuntime().availableProcessors()</code>","position":{"start":{"line":116,"column":20,"offset":3006},"end":{"line":116,"column":64,"offset":3050},"indent":[]}},{"type":"text","value":"获取CPU数量)","position":{"start":{"line":116,"column":64,"offset":3050},"end":{"line":116,"column":72,"offset":3058},"indent":[]}}],"position":{"start":{"line":116,"column":5,"offset":2991},"end":{"line":116,"column":72,"offset":3058},"indent":[]}}],"position":{"start":{"line":116,"column":3,"offset":2989},"end":{"line":116,"column":72,"offset":3058},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"U = CPU的使用率(0 <= U <= 1）","position":{"start":{"line":117,"column":5,"offset":3063},"end":{"line":117,"column":29,"offset":3087},"indent":[]}}],"position":{"start":{"line":117,"column":5,"offset":3063},"end":{"line":117,"column":29,"offset":3087},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":3061},"end":{"line":117,"column":29,"offset":3087},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"W/C = 计算等待时间 / 计算时间","position":{"start":{"line":118,"column":5,"offset":3092},"end":{"line":118,"column":24,"offset":3111},"indent":[]}}],"position":{"start":{"line":118,"column":5,"offset":3092},"end":{"line":118,"column":24,"offset":3111},"indent":[]}}],"position":{"start":{"line":118,"column":3,"offset":3090},"end":{"line":118,"column":24,"offset":3111},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"线程池的最优大小 = N * U * (1 + W/C)","position":{"start":{"line":119,"column":5,"offset":3116},"end":{"line":119,"column":33,"offset":3144},"indent":[]}}],"position":{"start":{"line":119,"column":5,"offset":3116},"end":{"line":119,"column":33,"offset":3144},"indent":[]}}],"position":{"start":{"line":119,"column":3,"offset":3114},"end":{"line":119,"column":33,"offset":3144},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":2949},"end":{"line":119,"column":33,"offset":3144},"indent":[3,3,3,3]}}],"position":{"start":{"line":114,"column":2,"offset":2925},"end":{"line":120,"column":3,"offset":3147},"indent":[2,2,2,2,2,2]}}],"position":{"start":{"line":114,"column":2,"offset":2925},"end":{"line":120,"column":3,"offset":3147},"indent":[2,2,2,2,2,2]}}],"position":{"start":{"line":113,"column":1,"offset":2877},"end":{"line":120,"column":3,"offset":3147},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":111,"column":1,"offset":2830},"end":{"line":120,"column":3,"offset":3147},"indent":[1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":121,"column":1,"offset":3148}}}}