{"expireTime":9007200811184863000,"key":"transformer-remark-markdown-html-4b9a1e22919049b939882bb4f767727a-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2>What is ARTS ?</h2>\n<blockquote>\n<p><strong>Algorithm</strong> 每周至少做一个leetcode算法题\n<strong>Review</strong> 阅读并点评至少一篇英文技术文章\n<strong>Tip</strong> 学习至少一个技术技巧\n<strong>Share</strong> 分享一篇有观点和思考的技术文章</p>\n</blockquote>\n<h2>Algorithm</h2>\n<p>Longest Substring Without Repeating Characters</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 3. Longest Substring Without Repeating Characters\n * Given a string, find the length of the longest substring without repeating characters.\n * Examples:\n * Given \"abcabcbb\", the answer is \"abc\", which the length is 3.\n * Given \"bbbbb\", the answer is \"b\", with the length of 1.\n * Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n *\n * @author jason\n * @date 18/7/23.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LongestSubstringWithoutRepeatingCharacters</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                t<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abcabcbb\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// expect: 3, actual: 3</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"pwwkew\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// expect: 3, actual: 3</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<h3>Top 10 Best Practices for Jenkins Pipeline Plugin</h3>\n<p><a href=\"https://www.cloudbees.com/blog/top-10-best-practices-jenkins-pipeline-plugin\">https://www.cloudbees.com/blog/top-10-best-practices-jenkins-pipeline-plugin</a></p>\n<ul>\n<li>Use the real Jenkins Pipeline</li>\n<li>Develop your pipeline as code</li>\n<li>All work within a stage</li>\n<li>All material work within a node</li>\n<li>Work you can within a parallel step</li>\n<li>Acquire nodes within parallel steps</li>\n<li>Use input within a node block</li>\n<li>Wrap your inputs in a timeout</li>\n<li>Don’t set environment variables with env global variable</li>\n<li>Prefer stashing files to archiving</li>\n</ul>\n<h2>Tip</h2>\n<h3>CI &#x26; CD with Jenkins pipline</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">node <span class=\"token punctuation\">{</span>\n   stage<span class=\"token punctuation\">(</span><span class=\"token string\">'Preparation'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">git</span> credentialsId: <span class=\"token string\">'gitlab'</span>, url: <span class=\"token string\">'https://gitlab.com/yangjinlong86/springboot-docker.git'</span>\n   <span class=\"token punctuation\">}</span>\n\n   stage<span class=\"token punctuation\">(</span><span class=\"token string\">'Maven Package'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       def mvnHome <span class=\"token operator\">=</span> tool name: <span class=\"token string\">'maven3'</span>, type: <span class=\"token string\">'maven'</span>\n       def mvnCMD <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${mvnHome}</span>/bin/mvn\"</span>\n       sh <span class=\"token string\">\"<span class=\"token variable\">${mvnCMD}</span> clean package\"</span>\n   <span class=\"token punctuation\">}</span>\n\n   stage<span class=\"token punctuation\">(</span><span class=\"token string\">'Docker Build Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       sh <span class=\"token string\">\"docker build -t yangjinlong/springboot-docker:1.0.0 .\"</span>\n   <span class=\"token punctuation\">}</span>\n\n   stage<span class=\"token punctuation\">(</span><span class=\"token string\">'Docker Push Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       withCredentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">(</span>credentialsId: <span class=\"token string\">'docker-hub-password'</span>, variable: <span class=\"token string\">'dockerHubPassword'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           sh <span class=\"token string\">\"docker login -u yangjinlong -p <span class=\"token variable\">${dockerHubPassword}</span>\"</span>\n       <span class=\"token punctuation\">}</span>\n       sh <span class=\"token string\">\"docker push yangjinlong/springboot-docker:1.0.0\"</span>\n   <span class=\"token punctuation\">}</span>\n\n   stage<span class=\"token punctuation\">(</span><span class=\"token string\">'Docker Run Container on Test Server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       def dockerRun <span class=\"token operator\">=</span> <span class=\"token string\">'docker run -p 9901:9901 --name dockerapp -d yangjinlong/springboot-docker:1.0.0'</span>\n       sshagent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'test-server'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sh <span class=\"token string\">\"ssh -o StrictHostKeyChecking=no jason@192.168.0.111 <span class=\"token variable\">${dockerRun}</span>\"</span>\n        <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>在jenkins的系统设置增加JAVA_HOME变量</li>\n<li>pipline语法，带变量的命令必须使用双引号 <code class=\"language-text\">sh &quot;${mvnCMD} clean package&quot;</code></li>\n<li>docker build没有权限问题，将jenkins用户加入docker用户组</li>\n<li>绑定加密变量 <code class=\"language-text\">withCredentials: Bind credentials to variables</code></li>\n<li>使用 ssh agent plugin</li>\n</ul>\n<h2>Share</h2>\n<p>这周基本上一直在搞自动化，折腾了gitlab，docker，nexus3，jenkins，最后选用了pipline来做CI 和CD，\n完工之后基本和下图一致，大概说明一下步骤：</p>\n<p>1.Developer 将代码 push 到Gitlab；</p>\n<p>2.Jenkins 从Gitlab pull 最新的代码，通过checkstyle，findbugs，pmd进行代码质量检查，生成检查报告；</p>\n<p>3.Jenkins 使用 Maven 命令进行构建；</p>\n<p>4.Jenkins 使用 Docker 命令进行镜像构建，并推送到 nexus3 docker 私有仓库；</p>\n<p>5.Jenkins 使用ssh命令登录到服务器，并使用Docker命令拉取镜像并启动。</p>\n<p><img src=\"https://raw.githubusercontent.com/yangjinlong86/nocoder/master/data/images/201807/jenkins-pipline.jpeg\"></p>"}