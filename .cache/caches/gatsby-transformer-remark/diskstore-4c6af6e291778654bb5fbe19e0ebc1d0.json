{"expireTime":9007200811184964000,"key":"transformer-remark-markdown-ast-efb60b8ee58c6474f7c6001e34fbb12a-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"What is ARTS ?","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":18,"offset":18},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":18,"offset":18},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Algorithm","position":{"start":{"line":4,"column":5,"offset":24},"end":{"line":4,"column":14,"offset":33},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":4,"column":16,"offset":35},"indent":[]}},{"type":"text","value":" 每周至少做一个leetcode算法题\n","position":{"start":{"line":4,"column":16,"offset":35},"end":{"line":5,"column":1,"offset":55},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"Review","position":{"start":{"line":5,"column":3,"offset":57},"end":{"line":5,"column":9,"offset":63},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":55},"end":{"line":5,"column":11,"offset":65},"indent":[]}},{"type":"text","value":" 阅读并点评至少一篇英文技术文章\n","position":{"start":{"line":5,"column":11,"offset":65},"end":{"line":6,"column":1,"offset":82},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"Tip","position":{"start":{"line":6,"column":3,"offset":84},"end":{"line":6,"column":6,"offset":87},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":82},"end":{"line":6,"column":8,"offset":89},"indent":[]}},{"type":"text","value":" 学习至少一个技术技巧\n","position":{"start":{"line":6,"column":8,"offset":89},"end":{"line":7,"column":1,"offset":101},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"Share","position":{"start":{"line":7,"column":3,"offset":103},"end":{"line":7,"column":8,"offset":108},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":101},"end":{"line":7,"column":10,"offset":110},"indent":[]}},{"type":"text","value":" 分享一篇有观点和思考的技术文章","position":{"start":{"line":7,"column":10,"offset":110},"end":{"line":7,"column":26,"offset":126},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":7,"column":26,"offset":126},"indent":[1,1,1]}}],"position":{"start":{"line":4,"column":1,"offset":20},"end":{"line":7,"column":26,"offset":126},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Algorithm","position":{"start":{"line":9,"column":4,"offset":131},"end":{"line":9,"column":13,"offset":140},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":128},"end":{"line":9,"column":13,"offset":140},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Add Two Numbers","position":{"start":{"line":11,"column":5,"offset":146},"end":{"line":11,"column":20,"offset":161},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":142},"end":{"line":11,"column":20,"offset":161},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 1.Add Two Numbers\n * \n * You are given two non-empty linked lists representing two non-negative integers.\n * \n * The digits are stored in reverse order and each of their nodes contain a single digit.\n * \n * Add the two numbers and return it as a linked list.\n * \n * You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n * \n * Example\n * Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n * Output: 7 -> 0 -> 8\n * Explanation: 342 + 465 = 807.\n *\n * @author jason\n * @date 18/7/13.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddTwoNumbers</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> listNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> listNode<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> carry <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> val1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> l1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> val2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> val1 <span class=\"token operator\">+</span> val2 <span class=\"token operator\">+</span> carry<span class=\"token punctuation\">;</span>\n            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            carry <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> listNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">ListNode</span> l1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ListNode</span> l2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AddTwoNumbers</span><span class=\"token punctuation\">.</span><span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        val <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> listNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>listNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>listNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            listNode <span class=\"token operator\">=</span> listNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":13,"column":1,"offset":163},"end":{"line":97,"column":4,"offset":2289},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Review","position":{"start":{"line":98,"column":4,"offset":2293},"end":{"line":98,"column":10,"offset":2299},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2290},"end":{"line":98,"column":10,"offset":2299},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Code Review Best Practices \n","position":{"start":{"line":100,"column":3,"offset":2303},"end":{"line":101,"column":1,"offset":2331},"indent":[1]}},{"type":"link","title":null,"url":"https://medium.com/palantir/code-review-best-practices-19e02780015f","children":[{"type":"text","value":"https://medium.com/palantir/code-review-best-practices-19e02780015f","position":{"start":{"line":101,"column":1,"offset":2331},"end":{"line":101,"column":68,"offset":2398},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2331},"end":{"line":101,"column":68,"offset":2398},"indent":[]}}],"position":{"start":{"line":100,"column":3,"offset":2303},"end":{"line":101,"column":68,"offset":2398},"indent":[1]}}],"position":{"start":{"line":100,"column":1,"offset":2301},"end":{"line":101,"column":68,"offset":2398},"indent":[1]}},{"type":"list","ordered":false,"start":null,"loose":true,"children":[{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Why, what, and when to do code reviews\nWhy:\n1.个人编程能力提升；\n2.知识共享帮助团队提升；\n3.代码的一致性；\n4.代码的可读性；\n5.低级错误和代码结构错误\n6.安全\nWhat:\n1.团队就自己的方法达成一致；\n2.团队中的所有人的代码都需要复查；\nWhen：\n在自动化检查之后，代码合并到master分支之前进行code review","position":{"start":{"line":103,"column":3,"offset":2402},"end":{"line":115,"column":38,"offset":2595},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":103,"column":3,"offset":2402},"end":{"line":115,"column":38,"offset":2595},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":103,"column":1,"offset":2400},"end":{"line":116,"column":1,"offset":2596},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Preparing code for review\n1.明确复查范围；\n2.提交代码的完整性，确保代码是通过测试和自动化检查的；\n3.重构的代码不应该改变其原有的行为意图；\n4.人工代码复查重心应该在程序逻辑上，而不是样式、语法或格式，这些问题用自动化工具来检测。","position":{"start":{"line":117,"column":3,"offset":2599},"end":{"line":121,"column":46,"offset":2731},"indent":[1,1,1,1]}}],"position":{"start":{"line":117,"column":3,"offset":2599},"end":{"line":121,"column":46,"offset":2731},"indent":[1,1,1,1]}}],"position":{"start":{"line":117,"column":1,"offset":2597},"end":{"line":122,"column":1,"offset":2732},"indent":[1,1,1,1,1]}},{"type":"listItem","loose":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Performing code reviews\ncode review的目的、执行、可读性和风格、可维护性、安全、评论以及认真回复review评论。","position":{"start":{"line":123,"column":3,"offset":2735},"end":{"line":124,"column":51,"offset":2809},"indent":[1]}}],"position":{"start":{"line":123,"column":3,"offset":2735},"end":{"line":124,"column":51,"offset":2809},"indent":[1]}}],"position":{"start":{"line":123,"column":1,"offset":2733},"end":{"line":125,"column":1,"offset":2810},"indent":[1,1]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Code review examples","position":{"start":{"line":126,"column":3,"offset":2813},"end":{"line":126,"column":23,"offset":2833},"indent":[]}}],"position":{"start":{"line":126,"column":3,"offset":2813},"end":{"line":126,"column":23,"offset":2833},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":2811},"end":{"line":126,"column":23,"offset":2833},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":2400},"end":{"line":126,"column":23,"offset":2833},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Inconsistent naming\n命名风格不一致","position":{"start":{"line":128,"column":1,"offset":2835},"end":{"line":129,"column":8,"offset":2862},"indent":[1]}}],"position":{"start":{"line":128,"column":1,"offset":2835},"end":{"line":129,"column":8,"offset":2862},"indent":[1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> countTotalPageVisits<span class=\"token punctuation\">;</span> <span class=\"token comment\">//R: name variables consistently</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> uniqueUsersCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":130,"column":1,"offset":2863},"end":{"line":135,"column":4,"offset":2993},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Inconsistent method signatures\n方法签名不一致","position":{"start":{"line":137,"column":1,"offset":2995},"end":{"line":138,"column":8,"offset":3033},"indent":[1]}}],"position":{"start":{"line":137,"column":1,"offset":2995},"end":{"line":138,"column":8,"offset":3033},"indent":[1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** Returns {@link Optional#empty} if s cannot be extracted. */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">extractString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** Returns null if {@code s} cannot be rewritten. */</span>\n  <span class=\"token comment\">//R: should harmonize return values: use Optional&lt;> here, too</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">rewriteString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":139,"column":1,"offset":3034},"end":{"line":147,"column":4,"offset":3349},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Library use\n使用工具类","position":{"start":{"line":149,"column":1,"offset":3351},"end":{"line":150,"column":6,"offset":3368},"indent":[1]}}],"position":{"start":{"line":149,"column":1,"offset":3351},"end":{"line":150,"column":6,"offset":3368},"indent":[1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//R: remove and replace by Guava's MapJoiner</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">joinAndConcatenate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> keyValueSeparator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> keySeparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":151,"column":1,"offset":3369},"end":{"line":154,"column":4,"offset":3524},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Personal taste","position":{"start":{"line":156,"column":1,"offset":3526},"end":{"line":156,"column":15,"offset":3540},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":3526},"end":{"line":156,"column":15,"offset":3540},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> dayCount<span class=\"token punctuation\">;</span> <span class=\"token comment\">//R: nit: I usually prefer numFoo over fooCount; up to you, but we should keep it consistent in this project</span></code></pre></div>","position":{"start":{"line":157,"column":1,"offset":3541},"end":{"line":159,"column":4,"offset":3675},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Bugs","position":{"start":{"line":161,"column":1,"offset":3677},"end":{"line":161,"column":5,"offset":3681},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":3677},"end":{"line":161,"column":5,"offset":3681},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//R: This performs numIterations+1 iterations, is that intentional?</span>\n<span class=\"token comment\">//   If it is, consider changing the numIterations semantics?</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> numIterations<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":162,"column":1,"offset":3682},"end":{"line":168,"column":4,"offset":3874},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Architectural concerns\n架构问题","position":{"start":{"line":170,"column":1,"offset":3876},"end":{"line":171,"column":5,"offset":3903},"indent":[1]}}],"position":{"start":{"line":170,"column":1,"offset":3876},"end":{"line":171,"column":5,"offset":3903},"indent":[1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">otherService<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//R: I think we should avoid the dependency on OtherService. Can we discuss this in person?</span></code></pre></div>","position":{"start":{"line":172,"column":1,"offset":3904},"end":{"line":174,"column":4,"offset":4028},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tip","position":{"start":{"line":175,"column":4,"offset":4032},"end":{"line":175,"column":7,"offset":4035},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":4029},"end":{"line":175,"column":7,"offset":4035},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"上周在写一个定时删除无用资源的定时任务，用到了列举所有oss对象的方法，阿里的FAQ回复有勘误（已向他们反馈，现已修复）","position":{"start":{"line":177,"column":1,"offset":4037},"end":{"line":177,"column":61,"offset":4097},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4037},"end":{"line":177,"column":61,"offset":4097},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"获取阿里云OSS上指定bucket下所有的对象信息列表","position":{"start":{"line":179,"column":1,"offset":4099},"end":{"line":179,"column":28,"offset":4126},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4099},"end":{"line":179,"column":28,"offset":4126},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> endpoint <span class=\"token operator\">=</span> <span class=\"token string\">\"http://oss-cn-hangzhou.aliyuncs.com\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> accessKeyId <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;yourAccessKeyId>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> accessKeySecret <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;yourAccessKeySecret>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> bucketName <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;yourBucketName>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建OSSClient实例。</span>\n<span class=\"token class-name\">OSSClient</span> ossClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OSSClient</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">,</span> accessKeyId<span class=\"token punctuation\">,</span> accessKeySecret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> maxKeys <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> nextMarker <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ObjectListing</span> objectListing<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    objectListing <span class=\"token operator\">=</span> ossClient<span class=\"token punctuation\">.</span><span class=\"token function\">listObjects</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListObjectsRequest</span><span class=\"token punctuation\">(</span>bucketName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMarker</span><span class=\"token punctuation\">(</span>nextMarker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMaxKeys</span><span class=\"token punctuation\">(</span>maxKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OSSObjectSummary</span><span class=\"token punctuation\">></span></span> sums <span class=\"token operator\">=</span> objectListing<span class=\"token punctuation\">.</span><span class=\"token function\">getObjectSummaries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OSSObjectSummary</span> s <span class=\"token operator\">:</span> sums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    nextMarker <span class=\"token operator\">=</span> objectListing<span class=\"token punctuation\">.</span><span class=\"token function\">getNextMarker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>objectListing<span class=\"token punctuation\">.</span><span class=\"token function\">isTruncated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 关闭OSSClient。</span>\nossClient<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":180,"column":1,"offset":4127},"end":{"line":200,"column":4,"offset":4916},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Share","position":{"start":{"line":202,"column":4,"offset":4921},"end":{"line":202,"column":9,"offset":4926},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":4918},"end":{"line":202,"column":9,"offset":4926},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"20条数据库设计最佳实践","position":{"start":{"line":203,"column":1,"offset":4927},"end":{"line":203,"column":13,"offset":4939},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":4927},"end":{"line":203,"column":13,"offset":4939},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://dzone.com/articles/20-database-design-best","children":[{"type":"text","value":"https://dzone.com/articles/20-database-design-best","position":{"start":{"line":204,"column":3,"offset":4942},"end":{"line":204,"column":53,"offset":4992},"indent":[]}}],"position":{"start":{"line":204,"column":3,"offset":4942},"end":{"line":204,"column":53,"offset":4992},"indent":[]}}],"position":{"start":{"line":204,"column":3,"offset":4942},"end":{"line":204,"column":53,"offset":4992},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":4940},"end":{"line":204,"column":53,"offset":4992},"indent":[]}},{"type":"list","ordered":true,"start":1,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对","position":{"start":{"line":206,"column":4,"offset":4997},"end":{"line":206,"column":5,"offset":4998},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">table</code>","position":{"start":{"line":206,"column":5,"offset":4998},"end":{"line":206,"column":12,"offset":5005},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":206,"column":12,"offset":5005},"end":{"line":206,"column":13,"offset":5006},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">column</code>","position":{"start":{"line":206,"column":13,"offset":5006},"end":{"line":206,"column":21,"offset":5014},"indent":[]}},{"type":"text","value":"使用明确定义的单词并且风格一致的命名。","position":{"start":{"line":206,"column":21,"offset":5014},"end":{"line":206,"column":40,"offset":5033},"indent":[]}}],"position":{"start":{"line":206,"column":4,"offset":4997},"end":{"line":206,"column":40,"offset":5033},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":4994},"end":{"line":206,"column":40,"offset":5033},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"表名使用单数（例如：使用","position":{"start":{"line":207,"column":4,"offset":5037},"end":{"line":207,"column":16,"offset":5049},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">StudentCourse</code>","position":{"start":{"line":207,"column":16,"offset":5049},"end":{"line":207,"column":31,"offset":5064},"indent":[]}},{"type":"text","value":" 而不是","position":{"start":{"line":207,"column":31,"offset":5064},"end":{"line":207,"column":35,"offset":5068},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">StudentCourses</code>","position":{"start":{"line":207,"column":35,"offset":5068},"end":{"line":207,"column":51,"offset":5084},"indent":[]}},{"type":"text","value":"），","position":{"start":{"line":207,"column":51,"offset":5084},"end":{"line":207,"column":53,"offset":5086},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">table</code>","position":{"start":{"line":207,"column":53,"offset":5086},"end":{"line":207,"column":60,"offset":5093},"indent":[]}},{"type":"text","value":"代表着一个实体的集合，不需要用复数命名。","position":{"start":{"line":207,"column":60,"offset":5093},"end":{"line":207,"column":80,"offset":5113},"indent":[]}}],"position":{"start":{"line":207,"column":4,"offset":5037},"end":{"line":207,"column":80,"offset":5113},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":5034},"end":{"line":207,"column":80,"offset":5113},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"表名不要用空格，否则，您将不得不使用","position":{"start":{"line":208,"column":4,"offset":5117},"end":{"line":208,"column":22,"offset":5135},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&#39;{&#39;，&#39;[&#39;，&#39;&#39;&#39;</code>","position":{"start":{"line":208,"column":22,"offset":5135},"end":{"line":208,"column":35,"offset":5148},"indent":[]}},{"type":"text","value":"等字符来定义表，访问时还需要用引号","position":{"start":{"line":208,"column":35,"offset":5148},"end":{"line":208,"column":52,"offset":5165},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">“Student Course”</code>","position":{"start":{"line":208,"column":52,"offset":5165},"end":{"line":208,"column":70,"offset":5183},"indent":[]}},{"type":"text","value":"， 直接用","position":{"start":{"line":208,"column":70,"offset":5183},"end":{"line":208,"column":75,"offset":5188},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">StudentCourse</code>","position":{"start":{"line":208,"column":75,"offset":5188},"end":{"line":208,"column":90,"offset":5203},"indent":[]}},{"type":"text","value":"会更好。","position":{"start":{"line":208,"column":90,"offset":5203},"end":{"line":208,"column":94,"offset":5207},"indent":[]}}],"position":{"start":{"line":208,"column":4,"offset":5117},"end":{"line":208,"column":94,"offset":5207},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":5114},"end":{"line":208,"column":94,"offset":5207},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"表名不要使用不必要的前缀或者后缀，例如使用","position":{"start":{"line":209,"column":4,"offset":5211},"end":{"line":209,"column":25,"offset":5232},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">School</code>","position":{"start":{"line":209,"column":25,"offset":5232},"end":{"line":209,"column":33,"offset":5240},"indent":[]}},{"type":"text","value":"而不是","position":{"start":{"line":209,"column":33,"offset":5240},"end":{"line":209,"column":36,"offset":5243},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">TblSchool, SchoolTable</code>","position":{"start":{"line":209,"column":36,"offset":5243},"end":{"line":209,"column":60,"offset":5267},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":209,"column":60,"offset":5267},"end":{"line":209,"column":61,"offset":5268},"indent":[]}}],"position":{"start":{"line":209,"column":4,"offset":5211},"end":{"line":209,"column":61,"offset":5268},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":5208},"end":{"line":209,"column":61,"offset":5268},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"保持密码的安全性，需要用的时候在程序里解密","position":{"start":{"line":210,"column":4,"offset":5272},"end":{"line":210,"column":25,"offset":5293},"indent":[]}}],"position":{"start":{"line":210,"column":4,"offset":5272},"end":{"line":210,"column":25,"offset":5293},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":5269},"end":{"line":210,"column":25,"offset":5293},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"所有表使用","position":{"start":{"line":211,"column":4,"offset":5297},"end":{"line":211,"column":9,"offset":5302},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">integer</code>","position":{"start":{"line":211,"column":9,"offset":5302},"end":{"line":211,"column":18,"offset":5311},"indent":[]}},{"type":"text","value":"类型ID字段。 即使暂时不需要ID，将来也可能会需要，例如关联表，索引等。","position":{"start":{"line":211,"column":18,"offset":5311},"end":{"line":211,"column":55,"offset":5348},"indent":[]}}],"position":{"start":{"line":211,"column":4,"offset":5297},"end":{"line":211,"column":55,"offset":5348},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":5294},"end":{"line":211,"column":55,"offset":5348},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"索引选择","position":{"start":{"line":212,"column":4,"offset":5352},"end":{"line":212,"column":8,"offset":5356},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">integer</code>","position":{"start":{"line":212,"column":8,"offset":5356},"end":{"line":212,"column":17,"offset":5365},"indent":[]}},{"type":"text","value":"类型的列，","position":{"start":{"line":212,"column":17,"offset":5365},"end":{"line":212,"column":22,"offset":5370},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">varchar</code>","position":{"start":{"line":212,"column":22,"offset":5370},"end":{"line":212,"column":31,"offset":5379},"indent":[]}},{"type":"text","value":"列索引会引起性能问题。","position":{"start":{"line":212,"column":31,"offset":5379},"end":{"line":212,"column":42,"offset":5390},"indent":[]}}],"position":{"start":{"line":212,"column":4,"offset":5352},"end":{"line":212,"column":42,"offset":5390},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":5349},"end":{"line":212,"column":42,"offset":5390},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"使用位字段存储布尔值，使用","position":{"start":{"line":213,"column":4,"offset":5394},"end":{"line":213,"column":17,"offset":5407},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">integer</code>","position":{"start":{"line":213,"column":17,"offset":5407},"end":{"line":213,"column":26,"offset":5416},"indent":[]}},{"type":"text","value":"或","position":{"start":{"line":213,"column":26,"offset":5416},"end":{"line":213,"column":27,"offset":5417},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">varchar</code>","position":{"start":{"line":213,"column":27,"offset":5417},"end":{"line":213,"column":36,"offset":5426},"indent":[]}},{"type":"text","value":"是不必要的存储消耗。布尔值的字段列命名使用","position":{"start":{"line":213,"column":36,"offset":5426},"end":{"line":213,"column":57,"offset":5447},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">is</code>","position":{"start":{"line":213,"column":57,"offset":5447},"end":{"line":213,"column":61,"offset":5451},"indent":[]}},{"type":"text","value":"作为前缀。","position":{"start":{"line":213,"column":61,"offset":5451},"end":{"line":213,"column":66,"offset":5456},"indent":[]}}],"position":{"start":{"line":213,"column":4,"offset":5394},"end":{"line":213,"column":66,"offset":5456},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":5391},"end":{"line":213,"column":66,"offset":5456},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"提供数据库访问权限，不要把管理员权限分配给所有人。","position":{"start":{"line":214,"column":4,"offset":5460},"end":{"line":214,"column":29,"offset":5485},"indent":[]}}],"position":{"start":{"line":214,"column":4,"offset":5460},"end":{"line":214,"column":29,"offset":5485},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":5457},"end":{"line":214,"column":29,"offset":5485},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"尽量避免出现select * 查询除非必须需要，使用select ","position":{"start":{"line":215,"column":5,"offset":5490},"end":{"line":215,"column":38,"offset":5523},"indent":[]}},{"type":"linkReference","identifier":"需要的列","referenceType":"shortcut","children":[{"type":"text","value":"需要的列","position":{"start":{"line":215,"column":39,"offset":5524},"end":{"line":215,"column":43,"offset":5528},"indent":[]}}],"position":{"start":{"line":215,"column":38,"offset":5523},"end":{"line":215,"column":44,"offset":5529},"indent":[]}},{"type":"text","value":"可以提高查询效率。","position":{"start":{"line":215,"column":44,"offset":5529},"end":{"line":215,"column":53,"offset":5538},"indent":[]}}],"position":{"start":{"line":215,"column":5,"offset":5490},"end":{"line":215,"column":53,"offset":5538},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":5486},"end":{"line":215,"column":53,"offset":5538},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如果应用程序代码足够大，则使用","position":{"start":{"line":216,"column":5,"offset":5543},"end":{"line":216,"column":20,"offset":5558},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ORM（object relational mapping）</code>","position":{"start":{"line":216,"column":20,"offset":5558},"end":{"line":216,"column":52,"offset":5590},"indent":[]}},{"type":"text","value":"框架（例如","position":{"start":{"line":216,"column":52,"offset":5590},"end":{"line":216,"column":57,"offset":5595},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">hibernate</code>","position":{"start":{"line":216,"column":57,"offset":5595},"end":{"line":216,"column":69,"offset":5607},"indent":[]}},{"type":"text","value":"，","position":{"start":{"line":216,"column":69,"offset":5607},"end":{"line":216,"column":70,"offset":5608},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MyBatis</code>","position":{"start":{"line":216,"column":70,"offset":5608},"end":{"line":216,"column":79,"offset":5617},"indent":[]}},{"type":"text","value":" …）。ORM框架的性能问题可以通过详细的配置参数来处理。","position":{"start":{"line":216,"column":79,"offset":5617},"end":{"line":216,"column":110,"offset":5648},"indent":[]}}],"position":{"start":{"line":216,"column":5,"offset":5543},"end":{"line":216,"column":110,"offset":5648},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":5539},"end":{"line":216,"column":110,"offset":5648},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"将大表、不用的表或很少使用的表，部分划分到不同的物理存储区以提高查询性能。","position":{"start":{"line":217,"column":5,"offset":5653},"end":{"line":217,"column":42,"offset":5690},"indent":[]}}],"position":{"start":{"line":217,"column":5,"offset":5653},"end":{"line":217,"column":42,"offset":5690},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":5649},"end":{"line":217,"column":42,"offset":5690},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对于大型，敏感和任务评论者数据库系统，使用灾难恢复和安全服务，如故障转移群集，自动备份，复制等。","position":{"start":{"line":218,"column":5,"offset":5695},"end":{"line":218,"column":53,"offset":5743},"indent":[]}}],"position":{"start":{"line":218,"column":5,"offset":5695},"end":{"line":218,"column":53,"offset":5743},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":5691},"end":{"line":218,"column":53,"offset":5743},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"使用约束（外键，检查，非空…）来保证数据的完整性。 不要把所有的控制权都交给程序代码处理。","position":{"start":{"line":219,"column":6,"offset":5749},"end":{"line":219,"column":53,"offset":5796},"indent":[]}}],"position":{"start":{"line":219,"column":6,"offset":5749},"end":{"line":219,"column":53,"offset":5796},"indent":[]}}],"position":{"start":{"line":219,"column":1,"offset":5744},"end":{"line":219,"column":53,"offset":5796},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"缺乏数据库文档是非常可恶的。 用ER图和说明文档来记录数据库设计。 也为触发器，存储过程和其他脚本编写注释行。","position":{"start":{"line":220,"column":5,"offset":5801},"end":{"line":220,"column":60,"offset":5856},"indent":[]}}],"position":{"start":{"line":220,"column":5,"offset":5801},"end":{"line":220,"column":60,"offset":5856},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":5797},"end":{"line":220,"column":60,"offset":5856},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在大表上经常使用的查询创建索引。 分析工具可以用来确定需要定义哪些索引。 对于多行数据的查询，聚簇索引通常更好。 对于点查询，非聚集索引通常更好。","position":{"start":{"line":221,"column":5,"offset":5861},"end":{"line":221,"column":78,"offset":5934},"indent":[]}}],"position":{"start":{"line":221,"column":5,"offset":5861},"end":{"line":221,"column":78,"offset":5934},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":5857},"end":{"line":221,"column":78,"offset":5934},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"数据库服务器和Web服务器必须放置在不同的机器上。 这将提供更高的安全性（攻击者无法直接访问数据），并且由于请求数量和进程使用率降低，服务器CPU和内存性能会更好。","position":{"start":{"line":222,"column":5,"offset":5939},"end":{"line":222,"column":87,"offset":6021},"indent":[]}}],"position":{"start":{"line":222,"column":5,"offset":5939},"end":{"line":222,"column":87,"offset":6021},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":5935},"end":{"line":222,"column":87,"offset":6021},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"由于性能问题，不得在频繁查询的表中定义图像和","position":{"start":{"line":223,"column":5,"offset":6026},"end":{"line":223,"column":27,"offset":6048},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Blob</code>","position":{"start":{"line":223,"column":27,"offset":6048},"end":{"line":223,"column":33,"offset":6054},"indent":[]}},{"type":"text","value":"数据列。 这些数据必须放在单独的表中，并且它们的指针可以在查询的表中使用。","position":{"start":{"line":223,"column":33,"offset":6054},"end":{"line":223,"column":70,"offset":6091},"indent":[]}}],"position":{"start":{"line":223,"column":5,"offset":6026},"end":{"line":223,"column":70,"offset":6091},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":6022},"end":{"line":223,"column":70,"offset":6091},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"标准化必须根据需要使用，以优化性能。 欠规范化会导致数据的过度重复，过度规范化会导致太多表中的过多连接。两者都会影响性能。","position":{"start":{"line":224,"column":5,"offset":6096},"end":{"line":224,"column":66,"offset":6157},"indent":[]}}],"position":{"start":{"line":224,"column":5,"offset":6096},"end":{"line":224,"column":66,"offset":6157},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":6092},"end":{"line":224,"column":66,"offset":6157},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"一定要为数据库设计留足够的时间，否则可能会花费比设计多成百上千倍的时间来维护设计不佳的数据库甚至需要重新设计。","position":{"start":{"line":225,"column":5,"offset":6162},"end":{"line":225,"column":60,"offset":6217},"indent":[]}}],"position":{"start":{"line":225,"column":5,"offset":6162},"end":{"line":225,"column":60,"offset":6217},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":6158},"end":{"line":225,"column":60,"offset":6217},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":4994},"end":{"line":225,"column":60,"offset":6217},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":228,"column":1,"offset":6220}}}}