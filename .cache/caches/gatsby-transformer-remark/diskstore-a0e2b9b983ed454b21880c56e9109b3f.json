{"expireTime":9007200811184863000,"key":"transformer-remark-markdown-html-ast-2c28d0bf325a5d3b5a3722dc57dc85cd-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Algorithm","position":{"start":{"line":3,"column":4,"offset":5},"end":{"line":3,"column":13,"offset":14}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":13,"offset":14}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 933. Number of Recent Calls\n *\n * Write a class RecentCounter to count recent requests.\n *\n * It has only one method: ping(int t), where t represents some time in milliseconds.\n *\n * Return the number of pings that have been made from 3000 milliseconds ago until now.\n *\n * Any ping with time in [t - 3000, t] will count, including the current ping.\n *\n * It is guaranteed that every call to ping uses a strictly larger value of t than before.\n *\n *\n *\n * Example 1:\n *\n * Input: inputs = [\"RecentCounter\",\"ping\",\"ping\",\"ping\",\"ping\"], inputs = [[],[1],[100],[3001],[3002]]\n * Output: [null,1,2,3,3]\n *\n *\n * Note:\n *\n * Each test case will have at most 10000 calls to ping.\n * Each test case will call ping with strictly increasing values of t.\n * Each call to ping will have 1 &lt;= t &lt;= 10^9.\n *\n * @author jason\n * @date 2018/11/18.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NumbersOfRecentCalls</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecentCounter</span> <span class=\"token punctuation\">{</span>\n\n    \t<span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> tm<span class=\"token punctuation\">;</span>\n    \t\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RecentCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \ttm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \ttm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> tm<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> tm<span class=\"token punctuation\">.</span><span class=\"token function\">tailMap</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">-</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Your RecentCounter object will be instantiated and called as such:\n * RecentCounter obj = new RecentCounter();\n * int param_1 = obj.ping(t);\n */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":5,"column":1,"offset":16},"end":{"line":64,"column":4,"offset":1409}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Review","position":{"start":{"line":66,"column":4,"offset":1414},"end":{"line":66,"column":10,"offset":1420}}}],"position":{"start":{"line":66,"column":1,"offset":1411},"end":{"line":66,"column":10,"offset":1420}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.javacodegeeks.com/2013/01/java-thread-pool-example-using-executors-and-threadpoolexecutor.html"},"children":[{"type":"text","value":"Java Thread Pool Example using Executors and ThreadPoolExecutor","position":{"start":{"line":68,"column":6,"offset":1427},"end":{"line":68,"column":69,"offset":1490}}}],"position":{"start":{"line":68,"column":5,"offset":1426},"end":{"line":68,"column":178,"offset":1599}}}],"position":{"start":{"line":68,"column":1,"offset":1422},"end":{"line":68,"column":178,"offset":1599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"线程池包含一个队列，用于保持任务等待执行。线程池管理Runnable线程的集合，工作线程从队列中执行Runnable。java.util.concurrent.Executors提供java.util.concurrent.Executor接口的实现，以在java中创建线程池。","position":{"start":{"line":70,"column":1,"offset":1601},"end":{"line":70,"column":140,"offset":1740}}}],"position":{"start":{"line":70,"column":1,"offset":1601},"end":{"line":70,"column":140,"offset":1740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Tip","position":{"start":{"line":73,"column":4,"offset":1746},"end":{"line":73,"column":7,"offset":1749}}}],"position":{"start":{"line":73,"column":1,"offset":1743},"end":{"line":73,"column":7,"offset":1749}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"线程池的饱和策略","position":{"start":{"line":75,"column":5,"offset":1755},"end":{"line":75,"column":13,"offset":1763}}}],"position":{"start":{"line":75,"column":1,"offset":1751},"end":{"line":75,"column":13,"offset":1763}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ThreadPoolExecutor 构造方法中包含一个 BlockingQueue 参数，这个队列接收任务，并在线程中执行，如果这个队列满了，就会在创建一个新的线程，将任务放入新线程的Queue中，当线程数量达到线程池大小上限之后，线程池会reject 这个任务，此时 RejectedExceptionHandler 就派上用场了。","position":{"start":{"line":77,"column":3,"offset":1767},"end":{"line":77,"column":171,"offset":1935}}}],"position":{"start":{"line":77,"column":3,"offset":1767},"end":{"line":77,"column":171,"offset":1935}}},{"type":"text","value":"\n"}],"position":{"start":{"line":77,"column":1,"offset":1765},"end":{"line":77,"column":171,"offset":1935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"饱和策略","position":{"start":{"line":79,"column":3,"offset":1939},"end":{"line":79,"column":7,"offset":1943}}}],"position":{"start":{"line":79,"column":1,"offset":1937},"end":{"line":79,"column":9,"offset":1945}}},{"type":"text","value":"：当队列满了之后，饱和策略开始发挥作用，ThreadPoolExecutor 的饱和策略可以通过调用 RejectExceptionHandler 来修改。","position":{"start":{"line":79,"column":9,"offset":1945},"end":{"line":79,"column":87,"offset":2023}}}],"position":{"start":{"line":79,"column":1,"offset":1937},"end":{"line":79,"column":87,"offset":2023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JDK 提供了四种RejectExceptionHandler实现：AbortPolicy，CallerRunsPolicy，DiscardPolicy，DiscardOldestPolicy。","position":{"start":{"line":81,"column":1,"offset":2025},"end":{"line":81,"column":98,"offset":2122}}}],"position":{"start":{"line":81,"column":1,"offset":2025},"end":{"line":81,"column":98,"offset":2122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Abort","position":{"start":{"line":83,"column":3,"offset":2126},"end":{"line":83,"column":8,"offset":2131}}}],"position":{"start":{"line":83,"column":1,"offset":2124},"end":{"line":83,"column":10,"offset":2133}}},{"type":"text","value":": 默认的饱和策略，该策略会抛出RuntimeException","position":{"start":{"line":83,"column":10,"offset":2133},"end":{"line":83,"column":42,"offset":2165}}}],"position":{"start":{"line":83,"column":1,"offset":2124},"end":{"line":83,"column":42,"offset":2165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Discard","position":{"start":{"line":85,"column":3,"offset":2169},"end":{"line":85,"column":10,"offset":2176}}}],"position":{"start":{"line":85,"column":1,"offset":2167},"end":{"line":85,"column":12,"offset":2178}}},{"type":"text","value":"：抛弃该任务","position":{"start":{"line":85,"column":12,"offset":2178},"end":{"line":85,"column":18,"offset":2184}}}],"position":{"start":{"line":85,"column":1,"offset":2167},"end":{"line":85,"column":18,"offset":2184}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Discard-Oldest","position":{"start":{"line":87,"column":3,"offset":2188},"end":{"line":87,"column":17,"offset":2202}}}],"position":{"start":{"line":87,"column":1,"offset":2186},"end":{"line":87,"column":19,"offset":2204}}},{"type":"text","value":"：抛弃下一个奖杯执行的任务，然后尝试重新提交的新任务","position":{"start":{"line":87,"column":19,"offset":2204},"end":{"line":87,"column":45,"offset":2230}}}],"position":{"start":{"line":87,"column":1,"offset":2186},"end":{"line":87,"column":45,"offset":2230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Caller-Runs","position":{"start":{"line":89,"column":3,"offset":2234},"end":{"line":89,"column":14,"offset":2245}}}],"position":{"start":{"line":89,"column":1,"offset":2232},"end":{"line":89,"column":16,"offset":2247}}},{"type":"text","value":"：实现了一种调节机制，不会抛弃任务，也不抛出异常，而是将任务退回到调用者，优调用者来执行，从而降低新任务的流量。","position":{"start":{"line":89,"column":16,"offset":2247},"end":{"line":89,"column":72,"offset":2303}}}],"position":{"start":{"line":89,"column":1,"offset":2232},"end":{"line":89,"column":72,"offset":2303}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ThreadPoolExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>\n\tN_THREADS<span class=\"token punctuation\">,</span> N_THREADS<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>CAPACITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setRejectExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CallRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":92,"column":1,"offset":2306},"end":{"line":98,"column":4,"offset":2546}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Share","position":{"start":{"line":101,"column":4,"offset":2552},"end":{"line":101,"column":9,"offset":2557}}}],"position":{"start":{"line":101,"column":1,"offset":2549},"end":{"line":101,"column":9,"offset":2557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"正确设置线程池的大小","position":{"start":{"line":103,"column":5,"offset":2563},"end":{"line":103,"column":15,"offset":2573}}}],"position":{"start":{"line":103,"column":1,"offset":2559},"end":{"line":103,"column":15,"offset":2573}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"最佳的线程池的大小，取决于被执行的任务和系统硬件。如果线程池过大，大量的线程将在相对很少的CPU和内存资源上发生竞争，这样会导致更多的内存消耗；如果线程池过小，许多空闲的处理器没有得到利用，降低了吞吐量。","position":{"start":{"line":105,"column":1,"offset":2575},"end":{"line":105,"column":103,"offset":2677}}}],"position":{"start":{"line":105,"column":1,"offset":2575},"end":{"line":105,"column":103,"offset":2677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正确的设置线程池的大小，必须分析系统环境，资源和任务的特性，有多少个CPU，多大的内存，任务是计算密集型还是IO密集型，还是二者皆可。","position":{"start":{"line":107,"column":1,"offset":2679},"end":{"line":107,"column":68,"offset":2746}}}],"position":{"start":{"line":107,"column":1,"offset":2679},"end":{"line":107,"column":68,"offset":2746}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果需要执行不同的任务，并且它们之间的行为相差很大，那么应该考虑使用多个线程池，从而使每个线程池可以根据各自的工作负载来调整。","position":{"start":{"line":109,"column":1,"offset":2748},"end":{"line":109,"column":64,"offset":2811}}}],"position":{"start":{"line":109,"column":1,"offset":2748},"end":{"line":109,"column":64,"offset":2811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于计算密集型的任务","position":{"start":{"line":111,"column":3,"offset":2815},"end":{"line":111,"column":13,"offset":2825}}}],"position":{"start":{"line":111,"column":3,"offset":2815},"end":{"line":111,"column":13,"offset":2825}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"N个CPU，线程池的大小为N+1时，通常能实现最优的利用率。","position":{"start":{"line":112,"column":4,"offset":2829},"end":{"line":112,"column":34,"offset":2859}}}],"position":{"start":{"line":112,"column":2,"offset":2827},"end":{"line":112,"column":34,"offset":2859}}},{"type":"text","value":"\n"}],"position":{"start":{"line":112,"column":2,"offset":2827},"end":{"line":112,"column":34,"offset":2859}}},{"type":"text","value":"\n"}],"position":{"start":{"line":111,"column":1,"offset":2813},"end":{"line":112,"column":34,"offset":2859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于包含IO操作或者其他阻塞操作的任务，由于线程并不会一直执行，因此线程池的规模应该更大","position":{"start":{"line":113,"column":3,"offset":2862},"end":{"line":113,"column":47,"offset":2906}}}],"position":{"start":{"line":113,"column":3,"offset":2862},"end":{"line":113,"column":47,"offset":2906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"估算出任务的等待时间于计算时间的比值\t","position":{"start":{"line":114,"column":4,"offset":2910},"end":{"line":114,"column":23,"offset":2929}}}],"position":{"start":{"line":114,"column":4,"offset":2910},"end":{"line":114,"column":23,"offset":2929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在某个基准负载下，分别设置不同大小的线程池来运行程序，观察CPU利用率","position":{"start":{"line":115,"column":5,"offset":2934},"end":{"line":115,"column":40,"offset":2969}}}],"position":{"start":{"line":115,"column":3,"offset":2932},"end":{"line":115,"column":40,"offset":2969}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"N = CPU的数量(可以通过","position":{"start":{"line":116,"column":5,"offset":2974},"end":{"line":116,"column":20,"offset":2989}}},{"type":"raw","value":"<code class=\"language-text\">Runtime.getRuntime().availableProcessors()</code>","position":{"start":{"line":116,"column":20,"offset":2989},"end":{"line":116,"column":64,"offset":3033}}},{"type":"text","value":"获取CPU数量)","position":{"start":{"line":116,"column":64,"offset":3033},"end":{"line":116,"column":72,"offset":3041}}}],"position":{"start":{"line":116,"column":3,"offset":2972},"end":{"line":116,"column":72,"offset":3041}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"U = CPU的使用率(0 <= U <= 1）","position":{"start":{"line":117,"column":5,"offset":3046},"end":{"line":117,"column":29,"offset":3070}}}],"position":{"start":{"line":117,"column":3,"offset":3044},"end":{"line":117,"column":29,"offset":3070}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"W/C = 计算等待时间 / 计算时间","position":{"start":{"line":118,"column":5,"offset":3075},"end":{"line":118,"column":24,"offset":3094}}}],"position":{"start":{"line":118,"column":3,"offset":3073},"end":{"line":118,"column":24,"offset":3094}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"线程池的最优大小 = N * U * (1 + W/C)","position":{"start":{"line":119,"column":5,"offset":3099},"end":{"line":119,"column":33,"offset":3127}}}],"position":{"start":{"line":119,"column":3,"offset":3097},"end":{"line":119,"column":33,"offset":3127}}},{"type":"text","value":"\n"}],"position":{"start":{"line":115,"column":3,"offset":2932},"end":{"line":119,"column":33,"offset":3127}}},{"type":"text","value":"\n"}],"position":{"start":{"line":114,"column":2,"offset":2908},"end":{"line":120,"column":3,"offset":3130}}},{"type":"text","value":"\n"}],"position":{"start":{"line":114,"column":2,"offset":2908},"end":{"line":120,"column":3,"offset":3130}}},{"type":"text","value":"\n"}],"position":{"start":{"line":113,"column":1,"offset":2860},"end":{"line":120,"column":3,"offset":3130}}},{"type":"text","value":"\n"}],"position":{"start":{"line":111,"column":1,"offset":2813},"end":{"line":120,"column":3,"offset":3130}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":121,"column":1,"offset":3131}}}}