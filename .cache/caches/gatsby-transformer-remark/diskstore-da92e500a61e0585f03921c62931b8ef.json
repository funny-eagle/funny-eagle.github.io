{"expireTime":9007200810533170000,"key":"transformer-remark-markdown-ast-b2b22521a7507d2b13a58bc0ba8973b0-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Algorithm","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":13,"offset":13},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":13,"offset":13},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 976. Largest Perimeter Triangle\n * &lt;p>\n * Given an array A of positive lengths, return the largest perimeter of a triangle with non-zero area, formed from 3 of these lengths.\n * &lt;p>\n * If it is impossible to form any triangle of non-zero area, return 0.\n * &lt;p>\n * Example 1:\n * &lt;p>\n * Input: [2,1,2]\n * Output: 5\n * Example 2:\n * &lt;p>\n * Input: [1,2,1]\n * Output: 0\n * Example 3:\n * &lt;p>\n * Input: [3,2,3,4]\n * Output: 10\n * Example 4:\n * &lt;p>\n * Input: [3,6,2,3]\n * Output: 8\n * &lt;p>\n * &lt;p>\n * Note:\n * &lt;p>\n * 3 &lt;= A.length &lt;= 10000\n * 1 &lt;= A[i] &lt;= 10^6\n *\n * @author jason\n * @date 2019/1/19.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LargestPerimeterTriangle</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">largestPerimeter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">LargestPerimeterTriangle</span> lpt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LargestPerimeterTriangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lpt<span class=\"token punctuation\">.</span><span class=\"token function\">largestPerimeter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":4,"column":1,"offset":15},"end":{"line":59,"column":4,"offset":1213},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Review","position":{"start":{"line":63,"column":4,"offset":1220},"end":{"line":63,"column":10,"offset":1226},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1217},"end":{"line":63,"column":10,"offset":1226},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://mailinator.blogspot.com/2009/06/beautiful-race-condition.html","children":[{"type":"text","value":"A Beautiful Race Condition","position":{"start":{"line":65,"column":2,"offset":1229},"end":{"line":65,"column":28,"offset":1255},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1228},"end":{"line":65,"column":99,"offset":1326},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1228},"end":{"line":65,"column":99,"offset":1326},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tip","position":{"start":{"line":67,"column":4,"offset":1331},"end":{"line":67,"column":7,"offset":1334},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1328},"end":{"line":67,"column":7,"offset":1334},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://dev.mysql.com/doc/refman/8.0/en/mysqlslap.html","children":[{"type":"strong","children":[{"type":"text","value":"mysqlslap","position":{"start":{"line":69,"column":4,"offset":1339},"end":{"line":69,"column":13,"offset":1348},"indent":[]}}],"position":{"start":{"line":69,"column":2,"offset":1337},"end":{"line":69,"column":15,"offset":1350},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1336},"end":{"line":69,"column":72,"offset":1407},"indent":[]}},{"type":"text","value":" is a diagnostic program designed to emulate client load for a MySQL server and to report the timing of each stage. It works as if multiple clients are accessing the server.","position":{"start":{"line":69,"column":72,"offset":1407},"end":{"line":69,"column":245,"offset":1580},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1336},"end":{"line":69,"column":245,"offset":1580},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"mysqlslap是mysql自带的性能测试工具，可以模拟多个mysql客户端连接进行并发测试，输出测试结果。","position":{"start":{"line":71,"column":1,"offset":1582},"end":{"line":71,"column":56,"offset":1637},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1582},"end":{"line":71,"column":56,"offset":1637},"indent":[]}},{"type":"html","lang":"shell","value":"<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">测试100个并发线程，测试次数1次，自动生成SQL测试脚本，读、写、更新混合测试，自增长字段，测试引擎为innodb，共运行5000次查询\n<span class=\"token comment\">#mysqlslap -h127.0.0.1 -uroot -p --concurrency=100 --iterations=1 --auto-generate-sql --auto-generate-sql-load-type=mixed --auto-generate-sql-add-autoincrement --engine=innodb --number-of-queries=5000</span>\nBenchmark\nRunning <span class=\"token keyword\">for</span> engine innodb\nAverage number of seconds to run all queries: 0.351 seconds\nMinimum number of seconds to run all queries: 0.351 seconds\nMaximum number of seconds to run all queries: 0.351 seconds\nNumber of clients running queries: 100\nAverage number of queries per client:50</code></pre></div>","position":{"start":{"line":73,"column":1,"offset":1639},"end":{"line":83,"column":4,"offset":2217},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Share","position":{"start":{"line":87,"column":4,"offset":2224},"end":{"line":87,"column":9,"offset":2229},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2221},"end":{"line":87,"column":9,"offset":2229},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"理解Map","position":{"start":{"line":89,"column":5,"offset":2235},"end":{"line":89,"column":10,"offset":2240},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2231},"end":{"line":89,"column":10,"offset":2240},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Map的基本思想是它维护的是键值对，可以使用键来查找值。Java标准库中包含了Map和几种实现，包括","position":{"start":{"line":91,"column":1,"offset":2242},"end":{"line":91,"column":51,"offset":2292},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">HashMap</code>","position":{"start":{"line":91,"column":51,"offset":2292},"end":{"line":91,"column":60,"offset":2301},"indent":[]}},{"type":"text","value":",","position":{"start":{"line":91,"column":60,"offset":2301},"end":{"line":91,"column":61,"offset":2302},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">TreeMap</code>","position":{"start":{"line":91,"column":61,"offset":2302},"end":{"line":91,"column":70,"offset":2311},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":91,"column":70,"offset":2311},"end":{"line":91,"column":72,"offset":2313},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">LinkedHashMap</code>","position":{"start":{"line":91,"column":72,"offset":2313},"end":{"line":91,"column":87,"offset":2328},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":91,"column":87,"offset":2328},"end":{"line":91,"column":89,"offset":2330},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">WeakHashMap</code>","position":{"start":{"line":91,"column":89,"offset":2330},"end":{"line":91,"column":102,"offset":2343},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":91,"column":102,"offset":2343},"end":{"line":91,"column":104,"offset":2345},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ConcurrentHashMap</code>","position":{"start":{"line":91,"column":104,"offset":2345},"end":{"line":91,"column":123,"offset":2364},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":91,"column":123,"offset":2364},"end":{"line":91,"column":125,"offset":2366},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">IdentityHashMap</code>","position":{"start":{"line":91,"column":125,"offset":2366},"end":{"line":91,"column":142,"offset":2383},"indent":[]}},{"type":"text","value":"。它们都实现了Map接口，但是行为特性各不相同，表现在效率，键值对的保存及呈现次序、对象的保存周期、如何在多线程程序中工作和判定","position":{"start":{"line":91,"column":142,"offset":2383},"end":{"line":91,"column":206,"offset":2447},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">key</code>","position":{"start":{"line":91,"column":206,"offset":2447},"end":{"line":91,"column":211,"offset":2452},"indent":[]}},{"type":"text","value":"等价的策略等方面。","position":{"start":{"line":91,"column":211,"offset":2452},"end":{"line":91,"column":220,"offset":2461},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2242},"end":{"line":91,"column":220,"offset":2461},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"以下是一个极简的map实现:","position":{"start":{"line":93,"column":1,"offset":2463},"end":{"line":93,"column":15,"offset":2477},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2463},"end":{"line":93,"column":15,"offset":2477},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Simple map, associates keys with values\n * low efficiency, fixed size\n * @author yangjinlong\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AssociativeArray</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pairs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AssociativeArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pairs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> pairs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many values\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        pairs<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>pairs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">)</span> pairs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pairs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pairs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AssociativeArray</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssociativeArray</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Freda\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutOfBoundsException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":95,"column":1,"offset":2479},"end":{"line":159,"column":4,"offset":4146},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"最常用的Map的实现应该就是 HashMap 了，HashMap的数据结构是由数组和链表构成，Java8以后还加入了红黑树。HashMap中的几个术语需要了解：","position":{"start":{"line":161,"column":1,"offset":4148},"end":{"line":161,"column":81,"offset":4228},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":4148},"end":{"line":161,"column":81,"offset":4228},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"容量：表中的桶位数","position":{"start":{"line":163,"column":3,"offset":4232},"end":{"line":163,"column":12,"offset":4241},"indent":[]}}],"position":{"start":{"line":163,"column":3,"offset":4232},"end":{"line":163,"column":12,"offset":4241},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":4230},"end":{"line":163,"column":12,"offset":4241},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"初始容量：在创建时所拥有的桶位数","position":{"start":{"line":164,"column":3,"offset":4244},"end":{"line":164,"column":19,"offset":4260},"indent":[]}}],"position":{"start":{"line":164,"column":3,"offset":4244},"end":{"line":164,"column":19,"offset":4260},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":4242},"end":{"line":164,"column":19,"offset":4260},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"尺寸：表中当前存储的项数","position":{"start":{"line":165,"column":3,"offset":4263},"end":{"line":165,"column":15,"offset":4275},"indent":[]}}],"position":{"start":{"line":165,"column":3,"offset":4263},"end":{"line":165,"column":15,"offset":4275},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":4261},"end":{"line":165,"column":15,"offset":4275},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"负载因子：尺寸/容量。空表的负载因子是0，半满表的负载因子是0.5，以此类推，HashMap 使用的默认负载因子是0.75，当表达到3/4满时，再进行rehash。","position":{"start":{"line":166,"column":3,"offset":4278},"end":{"line":166,"column":85,"offset":4360},"indent":[]}}],"position":{"start":{"line":166,"column":3,"offset":4278},"end":{"line":166,"column":85,"offset":4360},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":4276},"end":{"line":166,"column":85,"offset":4360},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":4230},"end":{"line":166,"column":85,"offset":4360},"indent":[1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"HashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value>插到table","position":{"start":{"line":168,"column":3,"offset":4364},"end":{"line":168,"column":104,"offset":4465},"indent":[]}},{"type":"linkReference","identifier":"i","referenceType":"shortcut","children":[{"type":"text","value":"i","position":{"start":{"line":168,"column":105,"offset":4466},"end":{"line":168,"column":106,"offset":4467},"indent":[]}}],"position":{"start":{"line":168,"column":104,"offset":4465},"end":{"line":168,"column":107,"offset":4468},"indent":[]}},{"type":"text","value":"中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table","position":{"start":{"line":168,"column":107,"offset":4468},"end":{"line":168,"column":150,"offset":4511},"indent":[]}},{"type":"linkReference","identifier":"i","referenceType":"shortcut","children":[{"type":"text","value":"i","position":{"start":{"line":168,"column":151,"offset":4512},"end":{"line":168,"column":152,"offset":4513},"indent":[]}}],"position":{"start":{"line":168,"column":150,"offset":4511},"end":{"line":168,"column":153,"offset":4514},"indent":[]}},{"type":"text","value":"上形成一个链表。","position":{"start":{"line":168,"column":153,"offset":4514},"end":{"line":168,"column":161,"offset":4522},"indent":[]}}],"position":{"start":{"line":168,"column":3,"offset":4364},"end":{"line":168,"column":161,"offset":4522},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":4362},"end":{"line":168,"column":161,"offset":4522},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"HashMap是非线程安全的，所以在并发情况下，HashMap可能会出现死循环导致CPU占用100%，查看耗叔的","position":{"start":{"line":170,"column":1,"offset":4524},"end":{"line":170,"column":57,"offset":4580},"indent":[]}},{"type":"link","title":null,"url":"https://coolshell.cn/articles/9606.html","children":[{"type":"text","value":"疫苗：JAVA HASHMAP的死循环 - CoolShell","position":{"start":{"line":170,"column":58,"offset":4581},"end":{"line":170,"column":89,"offset":4612},"indent":[]}}],"position":{"start":{"line":170,"column":57,"offset":4580},"end":{"line":170,"column":131,"offset":4654},"indent":[]}},{"type":"text","value":"文章可以了解导致死循环的细节。","position":{"start":{"line":170,"column":131,"offset":4654},"end":{"line":170,"column":146,"offset":4669},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":4524},"end":{"line":170,"column":146,"offset":4669},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":170,"column":146,"offset":4669}}}}