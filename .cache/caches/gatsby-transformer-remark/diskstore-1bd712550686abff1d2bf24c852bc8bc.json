{"expireTime":9007200810533170000,"key":"transformer-remark-markdown-html-ast-b9a9586d46cc32ef1699df4b6382551b-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":4,"offset":4}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"title: ARTS-27\ndate: “2019-01-05 19:41:22.844+01”","position":{"start":{"line":3,"column":1,"offset":5},"end":{"line":4,"column":35,"offset":54}}}],"position":{"start":{"line":3,"column":1,"offset":5},"end":{"line":4,"column":35,"offset":54}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":5,"column":1,"offset":55},"end":{"line":5,"column":4,"offset":58}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Algorithm","position":{"start":{"line":7,"column":4,"offset":63},"end":{"line":7,"column":13,"offset":72}}}],"position":{"start":{"line":7,"column":1,"offset":60},"end":{"line":7,"column":13,"offset":72}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 709. To Lower Case\n * &lt;p>\n * Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.\n * &lt;p>\n * Example 1:\n * &lt;p>\n * Input: \"Hello\"\n * Output: \"hello\"\n * Example 2:\n * &lt;p>\n * Input: \"here\"\n * Output: \"here\"\n * Example 3:\n * &lt;p>\n * Input: \"LOVELY\"\n * Output: \"lovely\"\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToLowerCase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> lowerCase <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> chars<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> chars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                n <span class=\"token operator\">+=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n                lowerCase<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                lowerCase<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> lowerCase<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":9,"column":1,"offset":74},"end":{"line":50,"column":4,"offset":1051}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Review","position":{"start":{"line":54,"column":4,"offset":1058},"end":{"line":54,"column":10,"offset":1064}}}],"position":{"start":{"line":54,"column":1,"offset":1055},"end":{"line":54,"column":10,"offset":1064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://netty.io/wiki/user-guide-for-4.x.html#wiki-h2-0"},"children":[{"type":"text","value":"User guide for 4.x","position":{"start":{"line":56,"column":2,"offset":1067},"end":{"line":56,"column":20,"offset":1085}}}],"position":{"start":{"line":56,"column":1,"offset":1066},"end":{"line":56,"column":78,"offset":1143}}}],"position":{"start":{"line":56,"column":1,"offset":1066},"end":{"line":56,"column":78,"offset":1143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Tip","position":{"start":{"line":58,"column":4,"offset":1148},"end":{"line":58,"column":7,"offset":1151}}}],"position":{"start":{"line":58,"column":1,"offset":1145},"end":{"line":58,"column":7,"offset":1151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"寻找相似图片","position":{"start":{"line":60,"column":5,"offset":1157},"end":{"line":60,"column":11,"offset":1163}}}],"position":{"start":{"line":60,"column":1,"offset":1153},"end":{"line":60,"column":11,"offset":1163}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"接上周的图书图片爬虫引发的问题，图片爬下来以后，有不少“暂无图片”的图片，而且部分这些图片的命名还没有规律可循，所以没办法在爬取的时候就过滤掉。我使用了中间表来保存图书的信息及图片在本地的路径，所以可以找到对应关系，从而对类似“暂无图片”的图片进行删除。","position":{"start":{"line":62,"column":1,"offset":1165},"end":{"line":62,"column":128,"offset":1292}}}],"position":{"start":{"line":62,"column":1,"offset":1165},"end":{"line":62,"column":128,"offset":1292}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"问题就在于如何快速的找到这些“暂无图片”图片，我的想法是通过找相似图片的方式，以一个图片找到其他类似的图片，在网上搜索了一下，找到了阮一峰老师的这篇文章。","position":{"start":{"line":64,"column":1,"offset":1294},"end":{"line":64,"column":78,"offset":1371}}}],"position":{"start":{"line":64,"column":1,"offset":1294},"end":{"line":64,"column":78,"offset":1371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html"},"children":[{"type":"text","value":"相似图片搜索的原理-阮一峰","position":{"start":{"line":66,"column":4,"offset":1376},"end":{"line":66,"column":17,"offset":1389}}}],"position":{"start":{"line":66,"column":3,"offset":1375},"end":{"line":66,"column":97,"offset":1469}}}],"position":{"start":{"line":66,"column":3,"offset":1375},"end":{"line":66,"column":97,"offset":1469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这里的关键技术叫做”感知哈希算法”（Perceptual hash algorithm），它的作用是对每张图片生成一个”指纹”（fingerprint）字符串，然后比较不同图片的指纹。结果越接近，就说明图片越相似。","position":{"start":{"line":68,"column":3,"offset":1474},"end":{"line":68,"column":110,"offset":1581}}}],"position":{"start":{"line":68,"column":3,"offset":1474},"end":{"line":68,"column":110,"offset":1581}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面是一个最简单的实现：","position":{"start":{"line":70,"column":3,"offset":1586},"end":{"line":70,"column":15,"offset":1598}}}],"position":{"start":{"line":70,"column":3,"offset":1586},"end":{"line":70,"column":15,"offset":1598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"第一步，缩小尺寸。","position":{"start":{"line":72,"column":5,"offset":1605},"end":{"line":72,"column":14,"offset":1614}}}],"position":{"start":{"line":72,"column":3,"offset":1603},"end":{"line":72,"column":16,"offset":1616}}}],"position":{"start":{"line":72,"column":3,"offset":1603},"end":{"line":72,"column":16,"offset":1616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"将图片缩小到8x8的尺寸，总共64个像素。这一步的作用是去除图片的细节，只保留结构、明暗等基本信息，摒弃不同尺寸、比例带来的图片差异。","position":{"start":{"line":74,"column":3,"offset":1621},"end":{"line":74,"column":70,"offset":1688}}}],"position":{"start":{"line":74,"column":3,"offset":1621},"end":{"line":74,"column":70,"offset":1688}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"第二步，简化色彩。","position":{"start":{"line":76,"column":5,"offset":1695},"end":{"line":76,"column":14,"offset":1704}}}],"position":{"start":{"line":76,"column":3,"offset":1693},"end":{"line":76,"column":16,"offset":1706}}}],"position":{"start":{"line":76,"column":3,"offset":1693},"end":{"line":76,"column":16,"offset":1706}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"将缩小后的图片，转为64级灰度。也就是说，所有像素点总共只有64种颜色。","position":{"start":{"line":78,"column":3,"offset":1711},"end":{"line":78,"column":39,"offset":1747}}}],"position":{"start":{"line":78,"column":3,"offset":1711},"end":{"line":78,"column":39,"offset":1747}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"第三步，计算平均值。","position":{"start":{"line":80,"column":5,"offset":1754},"end":{"line":80,"column":15,"offset":1764}}}],"position":{"start":{"line":80,"column":3,"offset":1752},"end":{"line":80,"column":17,"offset":1766}}}],"position":{"start":{"line":80,"column":3,"offset":1752},"end":{"line":80,"column":17,"offset":1766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"计算所有64个像素的灰度平均值。","position":{"start":{"line":82,"column":3,"offset":1771},"end":{"line":82,"column":19,"offset":1787}}}],"position":{"start":{"line":82,"column":3,"offset":1771},"end":{"line":82,"column":19,"offset":1787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"第四步，比较像素的灰度。","position":{"start":{"line":84,"column":5,"offset":1794},"end":{"line":84,"column":17,"offset":1806}}}],"position":{"start":{"line":84,"column":3,"offset":1792},"end":{"line":84,"column":19,"offset":1808}}}],"position":{"start":{"line":84,"column":3,"offset":1792},"end":{"line":84,"column":19,"offset":1808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"将每个像素的灰度，与平均值进行比较。大于或等于平均值，记为1；小于平均值，记为0。","position":{"start":{"line":86,"column":3,"offset":1813},"end":{"line":86,"column":44,"offset":1854}}}],"position":{"start":{"line":86,"column":3,"offset":1813},"end":{"line":86,"column":44,"offset":1854}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"第五步，计算哈希值。","position":{"start":{"line":88,"column":5,"offset":1861},"end":{"line":88,"column":15,"offset":1871}}}],"position":{"start":{"line":88,"column":3,"offset":1859},"end":{"line":88,"column":17,"offset":1873}}}],"position":{"start":{"line":88,"column":3,"offset":1859},"end":{"line":88,"column":17,"offset":1873}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"将上一步的比较结果，组合在一起，就构成了一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片都采用同样次序就行了。","position":{"start":{"line":90,"column":3,"offset":1878},"end":{"line":90,"column":72,"offset":1947}}}],"position":{"start":{"line":90,"column":3,"offset":1878},"end":{"line":90,"column":72,"offset":1947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"得到指纹以后，就可以对比不同的图片，看看64位中有多少位是不一样的。在理论上，这等同于计算","position":{"start":{"line":92,"column":3,"offset":1952},"end":{"line":92,"column":48,"offset":1997}}},{"type":"element","tagName":"a","properties":{"href":"http://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB"},"children":[{"type":"text","value":"“汉明距离”","position":{"start":{"line":92,"column":49,"offset":1998},"end":{"line":92,"column":55,"offset":2004}}}],"position":{"start":{"line":92,"column":48,"offset":1997},"end":{"line":92,"column":123,"offset":2072}}},{"type":"text","value":"（Hamming distance）。如果不相同的数据位不超过5，就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。","position":{"start":{"line":92,"column":123,"offset":2072},"end":{"line":92,"column":187,"offset":2136}}}],"position":{"start":{"line":92,"column":3,"offset":1952},"end":{"line":92,"column":187,"offset":2136}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"具体的代码实现，可以参见","position":{"start":{"line":94,"column":3,"offset":2141},"end":{"line":94,"column":15,"offset":2153}}},{"type":"element","tagName":"a","properties":{"href":"http://www.reddit.com/r/programming/comments/hql8b/looks_like_it_for_the_last_few_months_i_have_had/c1xkcdd"},"children":[{"type":"text","value":"Wote","position":{"start":{"line":94,"column":16,"offset":2154},"end":{"line":94,"column":20,"offset":2158}}}],"position":{"start":{"line":94,"column":15,"offset":2153},"end":{"line":94,"column":130,"offset":2268}}},{"type":"text","value":"用python语言写的","position":{"start":{"line":94,"column":130,"offset":2268},"end":{"line":94,"column":141,"offset":2279}}},{"type":"element","tagName":"a","properties":{"href":"http://www.ruanyifeng.com/blog/2011/07/imgHash.txt"},"children":[{"type":"text","value":"imgHash.py","position":{"start":{"line":94,"column":142,"offset":2280},"end":{"line":94,"column":152,"offset":2290}}}],"position":{"start":{"line":94,"column":141,"offset":2279},"end":{"line":94,"column":205,"offset":2343}}},{"type":"text","value":"。代码很短，只有53行。使用的时候，第一个参数是基准图片，第二个参数是用来比较的其他图片所在的目录，返回结果是两张图片之间不相同的数据位数量（汉明距离）。","position":{"start":{"line":94,"column":205,"offset":2343},"end":{"line":94,"column":282,"offset":2420}}}],"position":{"start":{"line":94,"column":3,"offset":2141},"end":{"line":94,"column":282,"offset":2420}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这种算法的优点是简单快速，不受图片大小缩放的影响，缺点是图片的内容不能变更。如果在图片上加几个文字，它就认不出来了。所以，它的最佳用途是根据缩略图，找出原图。","position":{"start":{"line":96,"column":3,"offset":2425},"end":{"line":96,"column":82,"offset":2504}}}],"position":{"start":{"line":96,"column":3,"offset":2425},"end":{"line":96,"column":82,"offset":2504}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"实际应用中，往往采用更强大的","position":{"start":{"line":98,"column":3,"offset":2509},"end":{"line":98,"column":17,"offset":2523}}},{"type":"element","tagName":"a","properties":{"href":"http://www.phash.org/"},"children":[{"type":"text","value":"pHash","position":{"start":{"line":98,"column":18,"offset":2524},"end":{"line":98,"column":23,"offset":2529}}}],"position":{"start":{"line":98,"column":17,"offset":2523},"end":{"line":98,"column":47,"offset":2553}}},{"type":"text","value":"算法和","position":{"start":{"line":98,"column":47,"offset":2553},"end":{"line":98,"column":50,"offset":2556}}},{"type":"element","tagName":"a","properties":{"href":"http://en.wikipedia.org/wiki/Scale-invariant_feature_transform"},"children":[{"type":"text","value":"SIFT","position":{"start":{"line":98,"column":51,"offset":2557},"end":{"line":98,"column":55,"offset":2561}}}],"position":{"start":{"line":98,"column":50,"offset":2556},"end":{"line":98,"column":120,"offset":2626}}},{"type":"text","value":"算法，它们能够识别图片的变形。只要变形程度不超过25%，它们就能匹配原图。这些算法虽然更复杂，但是原理与上面的简便算法是一样的，就是先将图片转化成Hash字符串，然后再进行比较。","position":{"start":{"line":98,"column":120,"offset":2626},"end":{"line":98,"column":209,"offset":2715}}}],"position":{"start":{"line":98,"column":3,"offset":2509},"end":{"line":98,"column":209,"offset":2715}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":1373},"end":{"line":98,"column":209,"offset":2715}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":" ","position":{"start":{"line":102,"column":1,"offset":2719},"end":{"line":102,"column":2,"offset":2720}}},{"type":"element","tagName":"a","properties":{"href":"http://www.ruanyifeng.com/blog/2011/07/imgHash.txt"},"children":[{"type":"text","value":"imgHash.py ","position":{"start":{"line":102,"column":3,"offset":2721},"end":{"line":102,"column":14,"offset":2732}}}],"position":{"start":{"line":102,"column":2,"offset":2720},"end":{"line":102,"column":67,"offset":2785}}},{"type":"text","value":" 是","position":{"start":{"line":102,"column":67,"offset":2785},"end":{"line":102,"column":69,"offset":2787}}},{"type":"raw","value":"<code class=\"language-text\">python2</code>","position":{"start":{"line":102,"column":69,"offset":2787},"end":{"line":102,"column":78,"offset":2796}}},{"type":"text","value":" 版本的，我稍微调整了一下，改成","position":{"start":{"line":102,"column":78,"offset":2796},"end":{"line":102,"column":94,"offset":2812}}},{"type":"raw","value":"<code class=\"language-text\">python3</code>","position":{"start":{"line":102,"column":94,"offset":2812},"end":{"line":102,"column":103,"offset":2821}}},{"type":"text","value":"版本并在windows 机器上运行了一下，效果很不错。","position":{"start":{"line":102,"column":103,"offset":2821},"end":{"line":102,"column":130,"offset":2848}}}],"position":{"start":{"line":102,"column":1,"offset":2719},"end":{"line":102,"column":130,"offset":2848}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/python</span>\n\n<span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n\nEXTS <span class=\"token operator\">=</span> <span class=\"token string\">'jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gif'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'png'</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">avhash</span><span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">)</span>\n    im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>ANTIALIAS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span>\n    avg <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> im<span class=\"token punctuation\">.</span>getdata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">64</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y_z<span class=\"token punctuation\">:</span> x <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>y_z<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> y_z<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> i<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> avg <span class=\"token keyword\">else</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> im<span class=\"token punctuation\">.</span>getdata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hamming</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> h2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    h<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> h1 <span class=\"token operator\">^</span> h2\n    <span class=\"token keyword\">while</span> d<span class=\"token punctuation\">:</span>\n        h <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        d <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> d <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> h\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_similar_img</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">,</span> dest_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        h <span class=\"token operator\">=</span> avhash<span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>dest_dir<span class=\"token punctuation\">)</span>\n        images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> ext <span class=\"token keyword\">in</span> EXTS<span class=\"token punctuation\">:</span>\n            images<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.%s'</span> <span class=\"token operator\">%</span> ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        prog <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">50</span> <span class=\"token keyword\">and</span> sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>isatty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span>\n            seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> hamming<span class=\"token punctuation\">(</span>avhash<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> prog<span class=\"token punctuation\">:</span>\n                perc <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span> prog <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n                x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> perc <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\rCalculating... ['</span> <span class=\"token operator\">+</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">40</span> <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.2f%%'</span> <span class=\"token operator\">%</span> perc<span class=\"token punctuation\">,</span> <span class=\"token string\">'(%d/%d)'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>prog<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                prog <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">if</span> prog<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span>\n\n        <span class=\"token keyword\">for</span> f<span class=\"token punctuation\">,</span> ham <span class=\"token keyword\">in</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> i<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> ham <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%s%s%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>ham<span class=\"token punctuation\">,</span> dest_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> root<span class=\"token punctuation\">,</span> dirs<span class=\"token punctuation\">,</span> files <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span><span class=\"token string\">'F:\\\\image\\\\2019-01-03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        find_similar_img<span class=\"token punctuation\">(</span><span class=\"token string\">'D:\\\\usr\\\\local\\\\github\\\\imgHash\\\\no-img.jpg'</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":104,"column":1,"offset":2850},"end":{"line":166,"column":4,"offset":4486}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"output:","position":{"start":{"line":168,"column":1,"offset":4488},"end":{"line":168,"column":8,"offset":4495}}}],"position":{"start":{"line":168,"column":1,"offset":4488},"end":{"line":168,"column":8,"offset":4495}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">D:\\usr\\local\\github\\imgHash\\venv\\Scripts\\python.exe D:/usr/local/github/imgHash/imgHash.py\n0\tF:\\image\\2019-01-03\\0\\9787555502739.jpg\n0\tF:\\image\\2019-01-03\\0\\9787555705956.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558102141.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558104916.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558107627.jpg\n0\tF:\\image\\2019-01-03\\0\\9787801767912.jpg\n0\tF:\\image\\2019-01-03\\0\\9787806193433.jpg\n0\tF:\\image\\2019-01-03\\1\\9787509536063.jpg\n0\tF:\\image\\2019-01-03\\1\\9787511238757.jpg\n0\tF:\\image\\2019-01-03\\1\\9787514321104.jpg\n0\tF:\\image\\2019-01-03\\1\\9787514324389.jpg\n0\tF:\\image\\2019-01-03\\1\\9787530573099.jpg\n0\tF:\\image\\2019-01-03\\1\\9787546632865.jpg\n0\tF:\\image\\2019-01-03\\1\\9787546952581.jpg\n0\tF:\\image\\2019-01-03\\1\\9787549817719.jpg\n0\tF:\\image\\2019-01-03\\1\\9787553458199.jpg\n0\tF:\\image\\2019-01-03\\1\\9787558102387.jpg\n0\tF:\\image\\2019-01-03\\1\\9787560561981.jpg\n0\tF:\\image\\2019-01-03\\2\\9787511247278.jpg\n0\tF:\\image\\2019-01-03\\2\\9787511353801.jpg\n0\tF:\\image\\2019-01-03\\2\\9787513909280.jpg</code></pre></div>","position":{"start":{"line":170,"column":1,"offset":4497},"end":{"line":193,"column":4,"offset":5482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Share","position":{"start":{"line":197,"column":4,"offset":5489},"end":{"line":197,"column":9,"offset":5494}}}],"position":{"start":{"line":197,"column":1,"offset":5486},"end":{"line":197,"column":9,"offset":5494}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"分享几个图片处理算法的文章，非常有意思","position":{"start":{"line":199,"column":1,"offset":5496},"end":{"line":199,"column":20,"offset":5515}}}],"position":{"start":{"line":199,"column":1,"offset":5496},"end":{"line":199,"column":20,"offset":5515}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html"},"children":[{"type":"text","value":"相似图片搜索的原理","position":{"start":{"line":201,"column":2,"offset":5518},"end":{"line":201,"column":11,"offset":5527}}}],"position":{"start":{"line":201,"column":1,"offset":5517},"end":{"line":201,"column":91,"offset":5607}}}],"position":{"start":{"line":201,"column":1,"offset":5517},"end":{"line":201,"column":91,"offset":5607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html"},"children":[{"type":"text","value":"相似图片搜索的原理（二）","position":{"start":{"line":203,"column":2,"offset":5610},"end":{"line":203,"column":14,"offset":5622}}}],"position":{"start":{"line":203,"column":1,"offset":5609},"end":{"line":203,"column":89,"offset":5697}}}],"position":{"start":{"line":203,"column":1,"offset":5609},"end":{"line":203,"column":89,"offset":5697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://www.ruanyifeng.com/blog/2011/08/amazing_algorithms_of_image_processing.html"},"children":[{"type":"text","value":"神奇的图像处理算法","position":{"start":{"line":205,"column":2,"offset":5700},"end":{"line":205,"column":11,"offset":5709}}}],"position":{"start":{"line":205,"column":1,"offset":5699},"end":{"line":205,"column":96,"offset":5794}}}],"position":{"start":{"line":205,"column":1,"offset":5699},"end":{"line":205,"column":96,"offset":5794}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":205,"column":96,"offset":5794}}}}