{"expireTime":9007200810530856000,"key":"transformer-remark-markdown-html-ast-3bb18125633ebc93a37b4cac24d44ab7-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"ARTS17-20181028","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":18,"offset":17}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":18,"offset":17}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Algorithm: Remove Element","position":{"start":{"line":3,"column":3,"offset":21},"end":{"line":3,"column":28,"offset":46}}}],"position":{"start":{"line":3,"column":3,"offset":21},"end":{"line":3,"column":28,"offset":46}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Review: What is the Java 9 Module System?","position":{"start":{"line":5,"column":3,"offset":51},"end":{"line":5,"column":44,"offset":92}}}],"position":{"start":{"line":5,"column":3,"offset":51},"end":{"line":5,"column":44,"offset":92}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tip: Mycat 原理","position":{"start":{"line":7,"column":3,"offset":97},"end":{"line":7,"column":16,"offset":110}}}],"position":{"start":{"line":7,"column":3,"offset":97},"end":{"line":7,"column":16,"offset":110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Share: 近期学习kafka和分库分表的一些感受","position":{"start":{"line":9,"column":3,"offset":115},"end":{"line":9,"column":29,"offset":141}}}],"position":{"start":{"line":9,"column":3,"offset":115},"end":{"line":9,"column":29,"offset":141}}},{"type":"text","value":"\n"}],"position":{"start":{"line":3,"column":1,"offset":19},"end":{"line":9,"column":29,"offset":141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Algorithm","position":{"start":{"line":11,"column":4,"offset":146},"end":{"line":11,"column":13,"offset":155}}}],"position":{"start":{"line":11,"column":1,"offset":143},"end":{"line":11,"column":13,"offset":155}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 27.Remove Element\n *\n * Given an array nums and a value val, remove all instances of that value in-place and return the new length.\n *\n * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n *\n * The order of elements can be changed. It doesn't matter what you leave beyond the new length.\n *\n * Example 1:\n *\n * Given nums = [3,2,2,3], val = 3,\n *\n * Your function should return length = 2, with the first two elements of nums being 2.\n *\n * It doesn't matter what you leave beyond the returned length.\n * Example 2:\n *\n * Given nums = [0,1,2,2,3,0,4,2], val = 2,\n *\n * Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\n *\n * Note that the order of those five elements can be arbitrary.\n *\n * It doesn't matter what values are set beyond the returned length.\n * Clarification:\n *\n * Confused why the returned value is an integer but your answer is an array?\n *\n * Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\n *\n * Internally you can think of this:\n *\n * // nums is passed in by reference. (i.e., without making a copy)\n * int len = removeElement(nums, val);\n *\n * // any modification to nums in your function would be known by the caller.\n * // using the length returned by your function, it prints the first len elements.\n * for (int i = 0; i &lt; len; i++) {\n *     print(nums[i]);\n * }\n * @author jason\n * @date 2018/10/28.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RemoveElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                len <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":13,"column":1,"offset":157},"end":{"line":83,"column":4,"offset":2285}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Review","position":{"start":{"line":85,"column":4,"offset":2290},"end":{"line":85,"column":10,"offset":2296}}}],"position":{"start":{"line":85,"column":1,"offset":2287},"end":{"line":85,"column":10,"offset":2296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What is the Java 9 Module System?","position":{"start":{"line":87,"column":5,"offset":2302},"end":{"line":87,"column":38,"offset":2335}}}],"position":{"start":{"line":87,"column":1,"offset":2298},"end":{"line":87,"column":38,"offset":2335}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@nagillavenkatesh1234/what-is-the-java-9-module-system-2d07bfa00abf"},"children":[{"type":"text","value":"https://medium.com/@nagillavenkatesh1234/what-is-the-java-9-module-system-2d07bfa00abf","position":{"start":{"line":89,"column":1,"offset":2337},"end":{"line":89,"column":87,"offset":2423}}}],"position":{"start":{"line":89,"column":1,"offset":2337},"end":{"line":89,"column":87,"offset":2423}}}],"position":{"start":{"line":89,"column":1,"offset":2337},"end":{"line":89,"column":87,"offset":2423}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Tip","position":{"start":{"line":93,"column":4,"offset":2430},"end":{"line":93,"column":7,"offset":2433}}}],"position":{"start":{"line":93,"column":1,"offset":2427},"end":{"line":93,"column":7,"offset":2433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mycat 是什么?从定义和分类来看，它是一个开源的分布式数据库系统，是一个实现了 MySQL 协议的的 Server，前端用户可以把它看作是一个数据库代理，用 MySQL 客户端工具和命令行访问，而其后端可以用 MySQL 原生(Native)协议与多个 MySQL 服务器通信，也可以用 JDBC 协议与大多数主流数据库服务器通信， 其核心功能是分表分库，即将一个大表水平分割为 N 个小表，存储在后端 MySQL 服务器里或者其他数据库里。","position":{"start":{"line":95,"column":1,"offset":2435},"end":{"line":95,"column":224,"offset":2658}}}],"position":{"start":{"line":95,"column":1,"offset":2435},"end":{"line":95,"column":224,"offset":2658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Mycat 的原理中最重要的一个动词是“拦截”，它拦截了用户发送过来的 SQL 语句，首先对 SQL 语句做了 一些特定的分析:如分片分析、路由分析、读写分离分析、缓存分析等，然后将此 SQL 发往后端的真实数据库， 并将返回的结果做适当的处理，最终再返回给用户。","position":{"start":{"line":97,"column":1,"offset":2660},"end":{"line":97,"column":133,"offset":2792}}}],"position":{"start":{"line":97,"column":1,"offset":2660},"end":{"line":97,"column":133,"offset":2792}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Share","position":{"start":{"line":99,"column":4,"offset":2797},"end":{"line":99,"column":9,"offset":2802}}}],"position":{"start":{"line":99,"column":1,"offset":2794},"end":{"line":99,"column":9,"offset":2802}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"分享一下我最近在项目中运用kafka和学习分库分表的一些感受。","position":{"start":{"line":101,"column":1,"offset":2804},"end":{"line":101,"column":32,"offset":2835}}}],"position":{"start":{"line":101,"column":1,"offset":2804},"end":{"line":101,"column":32,"offset":2835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我认为学习一项新的技术不是难点，难点在于和目前业务的结合，也就是如何解决实际问题。越来越深刻的感受到技术不能脱离业务，也没有完美的解决方案，如果认为我们的解决方案没有问题，那只是暂时没有发现而已。我们要找出更好的，更符合解决现状问题的方案，平衡各种方案的优劣势，从而更好的解决问题。","position":{"start":{"line":103,"column":1,"offset":2837},"end":{"line":103,"column":142,"offset":2978}}}],"position":{"start":{"line":103,"column":1,"offset":2837},"end":{"line":103,"column":142,"offset":2978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为什么要用消息中间件，目的就是解耦。我们的子系统越来越多，各子系统之间的调用也越来越多，使用消息中间件可以更好的解决各个系统之间的依赖。并且后续访问量大了以后，可以使用消息中间件来做限流。","position":{"start":{"line":105,"column":1,"offset":2980},"end":{"line":105,"column":95,"offset":3074}}}],"position":{"start":{"line":105,"column":1,"offset":2980},"end":{"line":105,"column":95,"offset":3074}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为什么考虑分库分表，目前项目使用单库mysql存储数据，有部分表的数量达到了600多万，查询效率比较低，最近业务发展趋势比较好，后续这些表的数据可能会成倍增长，根据网上看的经验值，500万到1000万就要考虑是否分库分表。于是开始研究分库分表的东西，真的是不看不知道，一看吓一跳，要准备的东西太多了，分哪些表，按什么规则分，数据往那些表存，哪些需要存nosql数据库，分片数据查询，分布式事务。初步使用mycat数据库中间件来做个测试，目前刚了解了一点皮毛。想到前面那么多坑要踩，还是有点发憷哦。","position":{"start":{"line":107,"column":1,"offset":3076},"end":{"line":107,"column":249,"offset":3324}}}],"position":{"start":{"line":107,"column":1,"offset":3076},"end":{"line":107,"column":249,"offset":3324}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":107,"column":249,"offset":3324}}}}