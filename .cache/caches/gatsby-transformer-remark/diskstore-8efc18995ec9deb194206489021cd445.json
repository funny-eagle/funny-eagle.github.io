{"expireTime":9007200810533796000,"key":"transformer-remark-markdown-html-31648dce49e2433f13d630b98b4b2a19-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<ul>\n<li>Algorithm: Reverse String</li>\n<li>Review: shard</li>\n<li>Tip: sharding-sphere</li>\n<li>Share: mycat 从入门到放弃</li>\n</ul>\n<h2>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 344. Reverse String\n * Write a function that takes a string as input and returns the string reversed.\n * &lt;p>\n * Example 1:\n * &lt;p>\n * Input: \"hello\"\n * Output: \"olleh\"\n * Example 2:\n * &lt;p>\n * Input: \"A man, a plan, a canal: Panama\"\n * Output: \"amanaP :lanac a ,nalp a ,nam A\"\n *\n * @author jason\n * @date 2018/11/4.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReverseString</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">reverseString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">reverseString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A man, a plan, a canal: Panama\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Shard_(database_architecture)\">Shard (database architecture)</a></p>\n<p><a href=\"https://dzone.com/articles/challenges-of-sharding-mysql\">Challenges of Sharding MySQL</a></p>\n<ul>\n<li>选择分片键</li>\n<li>架构修改</li>\n<li>程序修改</li>\n<li>在分片键，分片（数据库）和物理服务器之间进行映射</li>\n<li>跨节点事务和ACID事务性</li>\n</ul>\n<h2>Tip</h2>\n<h3><a href=\"http://shardingsphere.io/document/current/cn/\">Sharding-Sphere</a></h3>\n<p>近期研究分库分表相关的知识整理和demo <a href=\"https://github.com/yangjinlong86/sharding\">https://github.com/yangjinlong86/sharding</a></p>\n<p>Sharding-JDBC定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p>\n<ul>\n<li>适用于任何基于Java的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</li>\n<li>基于任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</li>\n<li>支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer和PostgreSQL。</li>\n</ul>\n<h2>Share</h2>\n<h3>Mycat 从入门到放弃</h3>\n<p>技术选型真的是个不简单的事情，考虑到方方面面，对于我们目前的现状，分库分表的计划是这样：</p>\n<ul>\n<li>为什么要分库分表（结合目前业务发展，未来5年的数据量增长，某些表已经到了600多万，数据库操作的响应速度越来越慢）</li>\n<li>分库分表原理、形式、规则、事务处理</li>\n<li>分库分表优势劣势分析</li>\n<li>技术选型，写demo、测试、性能、技术对比</li>\n<li>数据库、项目结构调整</li>\n<li>制定开发计划，投入开发改造</li>\n</ul>\n<h4><a href=\"https://mp.weixin.qq.com/s/g-ewn9iZeR1abhEG0f9phQ\">三思！大规模MySQL运维陷阱之基于MyCat的伪分布式架构</a></h4>\n<ul>\n<li><strong>MyCat如何知道数据分片原理，或者说他是如何决定路由路径的？</strong></li>\n<li><strong>如果需要扩展节点了，并且需要做rebalance，如何来做？</strong></li>\n<li><strong>全局表是什么东西？</strong></li>\n<li><strong>MyCat究竟做了什么事情？</strong></li>\n<li><strong>通过SQL语句的变换，实现分布式是不是有点困难？</strong></li>\n<li><strong>在同一个事务中要修改不同节点的数据是如何处理的？</strong></li>\n<li><strong>MyCat后端数据库的架构是什么，如何保证稳定可靠高可用？</strong></li>\n<li><strong>分片多了的情况下，性能是如何保证损失最小的？</strong></li>\n<li><strong>配置文件或者配置库出问题，整个集群会出现什么情况？</strong></li>\n<li><strong>DDL如何进行？</strong></li>\n<li><strong>据我调研，MyCat还实现了自动故障切换的功能，请问这个靠谱么？</strong></li>\n<li><strong>在MyCat上面备份是如何做的？能做到恢复一个快照吗？</strong></li>\n<li><strong>如果已经在使用MyCat了，发现他的风险确实太大了，我如何能下掉呢？</strong></li>\n<li><strong>MyCat的配置复杂吗？上手容易么？</strong></li>\n<li><strong>最后一个问题，现在做分库分表做得好的有哪些？</strong></li>\n</ul>\n<h4><a href=\"https://mp.weixin.qq.com/s?__biz=MzU0MDExOTUyMg==&#x26;mid=2247484366&#x26;idx=1&#x26;sn=a0266d3c8c639dac23d49fc910d28c19&#x26;scene=21#wechat_redirect\">兼容MySQL的开源分布式数据库SequoiaDB在去哪儿网的实践</a></h4>"}