{"expireTime":9007200810530857000,"key":"transformer-remark-markdown-html-ast-54a6abdfc890041172b7cc13b5a19c1f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"引言","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":6,"offset":5}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":6,"offset":5}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Java的重要功能之一就是内部支持多线程-在一个程序中允许同时运行多个任务。","position":{"start":{"line":2,"column":1,"offset":6},"end":{"line":2,"column":39,"offset":44}}}],"position":{"start":{"line":2,"column":1,"offset":6},"end":{"line":2,"column":39,"offset":44}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"线程的概念","position":{"start":{"line":4,"column":4,"offset":49},"end":{"line":4,"column":9,"offset":54}}}],"position":{"start":{"line":4,"column":1,"offset":46},"end":{"line":4,"column":9,"offset":54}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"线程","position":{"start":{"line":5,"column":5,"offset":59},"end":{"line":5,"column":7,"offset":61}}}],"position":{"start":{"line":5,"column":3,"offset":57},"end":{"line":5,"column":9,"offset":63}}},{"type":"text","value":"是指一个任务从头到尾的执行流程。","position":{"start":{"line":5,"column":9,"offset":63},"end":{"line":5,"column":25,"offset":79}}}],"position":{"start":{"line":5,"column":3,"offset":57},"end":{"line":5,"column":25,"offset":79}}},{"type":"text","value":"\n"}],"position":{"start":{"line":5,"column":1,"offset":55},"end":{"line":5,"column":25,"offset":79}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个Java程序中可以并发的启动多个线程，这些线程可以在多个处理器上同时运行。","position":{"start":{"line":7,"column":1,"offset":81},"end":{"line":7,"column":40,"offset":120}}}],"position":{"start":{"line":7,"column":1,"offset":81},"end":{"line":7,"column":40,"offset":120}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"多线程可以使程序反应更快，交互性更强，执行效率更高，即使再单核处理器的系统上，多线程程序的运行速度也比单线程速度更快。","position":{"start":{"line":9,"column":1,"offset":122},"end":{"line":9,"column":60,"offset":181}}}],"position":{"start":{"line":9,"column":1,"offset":122},"end":{"line":9,"column":60,"offset":181}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在单处理器系统中，多个线程共享CPU时间，称为时间分享，操作系统负责调度及分配资源给它们。CPU分配给线程的时间称为时间片，一般是几十ms，获得时间片的线程会被CPU切换执行。","position":{"start":{"line":11,"column":1,"offset":183},"end":{"line":11,"column":89,"offset":271}}}],"position":{"start":{"line":11,"column":1,"offset":183},"end":{"line":11,"column":89,"offset":271}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在Java中，每个任务都是","position":{"start":{"line":13,"column":1,"offset":273},"end":{"line":13,"column":14,"offset":286}}},{"type":"raw","value":"<code class=\"language-text\">Runnable</code>","position":{"start":{"line":13,"column":14,"offset":286},"end":{"line":13,"column":24,"offset":296}}},{"type":"text","value":"接口的一个实例，也成为","position":{"start":{"line":13,"column":24,"offset":296},"end":{"line":13,"column":35,"offset":307}}},{"type":"raw","value":"<code class=\"language-text\">可运行对象（runnable object）</code>","position":{"start":{"line":13,"column":35,"offset":307},"end":{"line":13,"column":59,"offset":331}}},{"type":"text","value":"。","position":{"start":{"line":13,"column":59,"offset":331},"end":{"line":13,"column":60,"offset":332}}}],"position":{"start":{"line":13,"column":1,"offset":273},"end":{"line":13,"column":60,"offset":332}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"创建任务和线程","position":{"start":{"line":15,"column":4,"offset":337},"end":{"line":15,"column":11,"offset":344}}}],"position":{"start":{"line":15,"column":1,"offset":334},"end":{"line":15,"column":11,"offset":344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个任务类必须实现Runnable接口。任务必须从线程运行。\n任务就是对象。为了创建任务，必须首先为任务定义一个实现Runnable接口的类。","position":{"start":{"line":17,"column":1,"offset":346},"end":{"line":18,"column":41,"offset":417}}}],"position":{"start":{"line":17,"column":1,"offset":346},"end":{"line":18,"column":41,"offset":417}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 通过实现Runnable接口定义一个任务类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskClass</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">TaskClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// do something...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":21,"column":1,"offset":420},"end":{"line":32,"column":4,"offset":574}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 创建一个任务、一个线程以及启动线程的步骤</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//  创建一个TaskClass实例</span>\n\t\t<span class=\"token class-name\">TaskClass</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 创建一个线程</span>\n\t\t<span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 启动线程</span>\n\t\tthread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":34,"column":1,"offset":576},"end":{"line":47,"column":4,"offset":799}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"编程练习","position":{"start":{"line":50,"column":6,"offset":807},"end":{"line":50,"column":10,"offset":811}}}],"position":{"start":{"line":50,"column":1,"offset":802},"end":{"line":50,"column":10,"offset":811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"创建三个任务以及三个运行这些任务的线程:","position":{"start":{"line":51,"column":3,"offset":814},"end":{"line":51,"column":23,"offset":834}}}],"position":{"start":{"line":51,"column":3,"offset":814},"end":{"line":51,"column":23,"offset":834}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第一个任务打印字母a100次","position":{"start":{"line":53,"column":3,"offset":840},"end":{"line":53,"column":17,"offset":854}}}],"position":{"start":{"line":53,"column":3,"offset":840},"end":{"line":53,"column":17,"offset":854}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第二个任务打印字母b100次","position":{"start":{"line":55,"column":3,"offset":860},"end":{"line":55,"column":17,"offset":874}}}],"position":{"start":{"line":55,"column":3,"offset":860},"end":{"line":55,"column":17,"offset":874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第三个任务打印1到100的整数","position":{"start":{"line":57,"column":3,"offset":880},"end":{"line":57,"column":18,"offset":895}}}],"position":{"start":{"line":57,"column":3,"offset":880},"end":{"line":57,"column":18,"offset":895}}},{"type":"text","value":"\n"}],"position":{"start":{"line":51,"column":1,"offset":812},"end":{"line":57,"column":18,"offset":895}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 创建三个任务以及三个运行这些任务的线程:\n * 第一个任务打印字母a100次\n * 第二个任务打印字母b100次\n * 第三个任务打印1到100的整数\n *\n * @author jason\n * @date 18/4/3.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskThreadDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 创建任务类</span>\n        <span class=\"token class-name\">Runnable</span> printA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintChar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Runnable</span> printB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintChar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Runnable</span> print100 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建线程</span>\n        <span class=\"token class-name\">Thread</span> threadPrintA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>printA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> threadPrintB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>printB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> threadPrint100 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>print100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 启动线程</span>\n        threadPrintA<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        threadPrintB<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        threadPrint100<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 打印字符任务类\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintChar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 需要打印的字符\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> charToPrint<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 需要打印的次数\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> times<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrintChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        charToPrint <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        times <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>charToPrint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 打印数字任务类\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintNumber</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 需要打印的最大值\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> lastNum<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrintNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lastNum <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> lastNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":59,"column":1,"offset":897},"end":{"line":136,"column":4,"offset":2288}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"任务中的run()方法指名如何完成这个任务，Java虚拟机通过调用任务的run()方法执行任务，无需程序员特意调用，直接调用run()方法只是在同一个线程中执行该方法，而没有新线程被启动。","position":{"start":{"line":138,"column":3,"offset":2292},"end":{"line":138,"column":97,"offset":2386}}}],"position":{"start":{"line":138,"column":3,"offset":2292},"end":{"line":138,"column":97,"offset":2386}}},{"type":"text","value":"\n"}],"position":{"start":{"line":138,"column":1,"offset":2290},"end":{"line":138,"column":97,"offset":2386}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Thread类","position":{"start":{"line":140,"column":4,"offset":2391},"end":{"line":140,"column":11,"offset":2398}}}],"position":{"start":{"line":140,"column":1,"offset":2388},"end":{"line":140,"column":11,"offset":2398}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread类包含为任务而创建的线程的构造方法，以及控制线程的方法。","position":{"start":{"line":141,"column":1,"offset":2399},"end":{"line":141,"column":35,"offset":2433}}}],"position":{"start":{"line":141,"column":1,"offset":2399},"end":{"line":141,"column":35,"offset":2433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread类实现了Runnable接口，所以可以定一个Thread的扩展类，实现Runnable的run()方法，然后客户端类创建这个类的一个对象，调用start()启动线程。","position":{"start":{"line":143,"column":1,"offset":2435},"end":{"line":143,"column":90,"offset":2524}}}],"position":{"start":{"line":143,"column":1,"offset":2435},"end":{"line":143,"column":90,"offset":2524}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author jason\n * @date 18/4/3.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomeThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CustomeThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": do something...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> thread1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomeThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span> thread2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomeThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        thread2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":145,"column":1,"offset":2526},"end":{"line":175,"column":4,"offset":3079}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用","position":{"start":{"line":177,"column":1,"offset":3081},"end":{"line":177,"column":3,"offset":3083}}},{"type":"raw","value":"<code class=\"language-text\">yield()</code>","position":{"start":{"line":177,"column":3,"offset":3083},"end":{"line":177,"column":12,"offset":3092}}},{"type":"text","value":"方法为其他线程临时让出CPU时间。","position":{"start":{"line":177,"column":12,"offset":3092},"end":{"line":177,"column":29,"offset":3109}}}],"position":{"start":{"line":177,"column":1,"offset":3081},"end":{"line":177,"column":29,"offset":3109}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":179,"column":1,"offset":3111},"end":{"line":181,"column":4,"offset":3138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用","position":{"start":{"line":183,"column":1,"offset":3140},"end":{"line":183,"column":3,"offset":3142}}},{"type":"raw","value":"<code class=\"language-text\">sleep(long mills)</code>","position":{"start":{"line":183,"column":3,"offset":3142},"end":{"line":183,"column":22,"offset":3161}}},{"type":"text","value":"可以将该线程设置为休眠以确保其他线程的执行，休眠时间为指定的毫秒数。","position":{"start":{"line":183,"column":22,"offset":3161},"end":{"line":183,"column":56,"offset":3195}}}],"position":{"start":{"line":183,"column":1,"offset":3140},"end":{"line":183,"column":56,"offset":3195}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 休眠 1ms</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do someting...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":185,"column":1,"offset":3197},"end":{"line":193,"column":4,"offset":3300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sleep方法可能抛出一个","position":{"start":{"line":194,"column":1,"offset":3301},"end":{"line":194,"column":14,"offset":3314}}},{"type":"raw","value":"<code class=\"language-text\">InterruptedException</code>","position":{"start":{"line":194,"column":14,"offset":3314},"end":{"line":194,"column":36,"offset":3336}}},{"type":"text","value":"，这是一个必检异常。当一个休眠线程的interrupt()方法被调用时，就会发生这样的一个异常。","position":{"start":{"line":194,"column":36,"offset":3336},"end":{"line":194,"column":84,"offset":3384}}}],"position":{"start":{"line":194,"column":1,"offset":3301},"end":{"line":194,"column":84,"offset":3384}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使用","position":{"start":{"line":196,"column":1,"offset":3386},"end":{"line":196,"column":3,"offset":3388}}},{"type":"raw","value":"<code class=\"language-text\">join()</code>","position":{"start":{"line":196,"column":3,"offset":3388},"end":{"line":196,"column":11,"offset":3396}}},{"type":"text","value":"方法使用一个线程等待另一个线程的结束。","position":{"start":{"line":196,"column":11,"offset":3396},"end":{"line":196,"column":30,"offset":3415}}}],"position":{"start":{"line":196,"column":1,"offset":3386},"end":{"line":196,"column":30,"offset":3415}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>thread</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author jason\n * @date 18/4/6.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YieldTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        \t  <span class=\"token comment\">// 调用线程t的join()方法，其他线程要等待这个线程执行结束后才会执行</span>\n            t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":198,"column":1,"offset":3417},"end":{"line":229,"column":4,"offset":4145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"输出结果：","position":{"start":{"line":231,"column":1,"offset":4147},"end":{"line":231,"column":6,"offset":4152}}}],"position":{"start":{"line":231,"column":1,"offset":4147},"end":{"line":231,"column":6,"offset":4152}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 2 3 4 5 6 7 8 9 10 \n11 12 13 14 15 16 17 18 19 20 </code></pre></div>","position":{"start":{"line":233,"column":1,"offset":4154},"end":{"line":237,"column":4,"offset":4215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果不加join()方法的输出结果顺序不固定","position":{"start":{"line":239,"column":1,"offset":4217},"end":{"line":239,"column":23,"offset":4239}}}],"position":{"start":{"line":239,"column":1,"offset":4217},"end":{"line":239,"column":23,"offset":4239}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">11 12 13 14 15 16 17 1 2 3 4 5 6 7 8 9 10 \n18 19 20 </code></pre></div>","position":{"start":{"line":241,"column":1,"offset":4241},"end":{"line":244,"column":4,"offset":4301}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":246,"column":1,"offset":4303}}}}