{"expireTime":9007200810530858000,"key":"transformer-remark-markdown-ast-be61756228b9da8f3d5028486ca01402-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。\n这种类型的设计模式属于","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":3,"column":12,"offset":64},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">结构型模式</code>","position":{"start":{"line":3,"column":12,"offset":64},"end":{"line":3,"column":19,"offset":71},"indent":[]}},{"type":"text","value":"，它是作为现有的类的一个包装。\n这种模式创建了一个装饰类，用来","position":{"start":{"line":3,"column":19,"offset":71},"end":{"line":4,"column":16,"offset":102},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">包装</code>","position":{"start":{"line":4,"column":16,"offset":102},"end":{"line":4,"column":20,"offset":106},"indent":[]}},{"type":"text","value":"原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。\n我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个","position":{"start":{"line":4,"column":20,"offset":106},"end":{"line":5,"column":31,"offset":168},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">形状</code>","position":{"start":{"line":5,"column":31,"offset":168},"end":{"line":5,"column":35,"offset":172},"indent":[]}},{"type":"text","value":"装饰上不同的颜色，同时又不改变形状类。","position":{"start":{"line":5,"column":35,"offset":172},"end":{"line":5,"column":54,"offset":191},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":5,"column":54,"offset":191},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"介绍","position":{"start":{"line":7,"column":4,"offset":196},"end":{"line":7,"column":6,"offset":198},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":193},"end":{"line":7,"column":6,"offset":198},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"意图：","position":{"start":{"line":8,"column":3,"offset":201},"end":{"line":8,"column":6,"offset":204},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":199},"end":{"line":8,"column":8,"offset":206},"indent":[]}},{"type":"text","value":"动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。","position":{"start":{"line":8,"column":8,"offset":206},"end":{"line":8,"column":50,"offset":248},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":199},"end":{"line":8,"column":50,"offset":248},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"主要解决：","position":{"start":{"line":10,"column":3,"offset":252},"end":{"line":10,"column":8,"offset":257},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":250},"end":{"line":10,"column":10,"offset":259},"indent":[]}},{"type":"text","value":"一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。","position":{"start":{"line":10,"column":10,"offset":259},"end":{"line":10,"column":66,"offset":315},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":250},"end":{"line":10,"column":66,"offset":315},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"何时使用：","position":{"start":{"line":12,"column":3,"offset":319},"end":{"line":12,"column":8,"offset":324},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":317},"end":{"line":12,"column":10,"offset":326},"indent":[]}},{"type":"text","value":"在不想增加很多子类的情况下扩展类。","position":{"start":{"line":12,"column":10,"offset":326},"end":{"line":12,"column":27,"offset":343},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":317},"end":{"line":12,"column":27,"offset":343},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"如何解决：","position":{"start":{"line":14,"column":3,"offset":347},"end":{"line":14,"column":8,"offset":352},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":345},"end":{"line":14,"column":10,"offset":354},"indent":[]}},{"type":"text","value":"将具体功能职责划分，同时继承装饰者模式。","position":{"start":{"line":14,"column":10,"offset":354},"end":{"line":14,"column":30,"offset":374},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":345},"end":{"line":14,"column":30,"offset":374},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"关键代码：","position":{"start":{"line":16,"column":3,"offset":378},"end":{"line":16,"column":8,"offset":383},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":376},"end":{"line":16,"column":10,"offset":385},"indent":[]}},{"type":"text","value":" \n1、Component 类充当抽象角色，不应该具体实现。 \n2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。","position":{"start":{"line":16,"column":10,"offset":385},"end":{"line":18,"column":36,"offset":452},"indent":[1,1]}}],"position":{"start":{"line":16,"column":1,"offset":376},"end":{"line":18,"column":36,"offset":452},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"应用实例：","position":{"start":{"line":20,"column":3,"offset":456},"end":{"line":20,"column":8,"offset":461},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":454},"end":{"line":20,"column":10,"offset":463},"indent":[]}},{"type":"text","value":"\n1、孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。 \n2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。","position":{"start":{"line":20,"column":10,"offset":463},"end":{"line":22,"column":86,"offset":596},"indent":[1,1]}}],"position":{"start":{"line":20,"column":1,"offset":454},"end":{"line":22,"column":86,"offset":596},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"优点：","position":{"start":{"line":24,"column":3,"offset":600},"end":{"line":24,"column":6,"offset":603},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":598},"end":{"line":24,"column":8,"offset":605},"indent":[]}},{"type":"text","value":"装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。","position":{"start":{"line":24,"column":8,"offset":605},"end":{"line":24,"column":64,"offset":661},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":598},"end":{"line":24,"column":64,"offset":661},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"缺点：","position":{"start":{"line":26,"column":3,"offset":665},"end":{"line":26,"column":6,"offset":668},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":663},"end":{"line":26,"column":8,"offset":670},"indent":[]}},{"type":"text","value":"多层装饰比较复杂。","position":{"start":{"line":26,"column":8,"offset":670},"end":{"line":26,"column":17,"offset":679},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":663},"end":{"line":26,"column":17,"offset":679},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"使用场景：","position":{"start":{"line":28,"column":3,"offset":683},"end":{"line":28,"column":8,"offset":688},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":681},"end":{"line":28,"column":10,"offset":690},"indent":[]}},{"type":"text","value":"\n1、扩展一个类的功能。 \n2、动态增加功能，动态撤销。","position":{"start":{"line":28,"column":10,"offset":690},"end":{"line":30,"column":15,"offset":718},"indent":[1,1]}}],"position":{"start":{"line":28,"column":1,"offset":681},"end":{"line":30,"column":15,"offset":718},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"注意事项：","position":{"start":{"line":32,"column":3,"offset":722},"end":{"line":32,"column":8,"offset":727},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":720},"end":{"line":32,"column":10,"offset":729},"indent":[]}},{"type":"text","value":"可代替继承。","position":{"start":{"line":32,"column":10,"offset":729},"end":{"line":32,"column":16,"offset":735},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":720},"end":{"line":32,"column":16,"offset":735},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"实现","position":{"start":{"line":34,"column":4,"offset":740},"end":{"line":34,"column":6,"offset":742},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":737},"end":{"line":34,"column":6,"offset":742},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。然后我们创建一个实现了 Shape 接口的抽象装饰类 ShapeDecorator，并把 Shape 对象作为它的实例变量。\nRedShapeDecorator 是实现了 ShapeDecorator 的实体类。\nDecoratorPatternDemo，我们的演示类使用 RedShapeDecorator 来装饰 Shape 对象。","position":{"start":{"line":35,"column":1,"offset":743},"end":{"line":37,"column":62,"offset":945},"indent":[1,1]}}],"position":{"start":{"line":35,"column":1,"offset":743},"end":{"line":37,"column":62,"offset":945},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 1","position":{"start":{"line":39,"column":5,"offset":951},"end":{"line":39,"column":9,"offset":955},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":947},"end":{"line":39,"column":9,"offset":955},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"创建一个接口。","position":{"start":{"line":40,"column":1,"offset":956},"end":{"line":40,"column":8,"offset":963},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":956},"end":{"line":40,"column":8,"offset":963},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Shape.java","position":{"start":{"line":42,"column":1,"offset":965},"end":{"line":42,"column":11,"offset":975},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":965},"end":{"line":42,"column":11,"offset":975},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":43,"column":1,"offset":976},"end":{"line":47,"column":4,"offset":1030},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 2","position":{"start":{"line":49,"column":5,"offset":1036},"end":{"line":49,"column":9,"offset":1040},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1032},"end":{"line":49,"column":9,"offset":1040},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"创建实现接口的实体类。","position":{"start":{"line":50,"column":1,"offset":1041},"end":{"line":50,"column":12,"offset":1052},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1041},"end":{"line":50,"column":12,"offset":1052},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Rectangle.java","position":{"start":{"line":52,"column":1,"offset":1054},"end":{"line":52,"column":15,"offset":1068},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1054},"end":{"line":52,"column":15,"offset":1068},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shape: Rectangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":53,"column":1,"offset":1069},"end":{"line":61,"column":4,"offset":1213},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Circle.java","position":{"start":{"line":63,"column":1,"offset":1215},"end":{"line":63,"column":12,"offset":1226},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1215},"end":{"line":63,"column":12,"offset":1226},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shape: Circle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":64,"column":1,"offset":1227},"end":{"line":72,"column":4,"offset":1365},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 3","position":{"start":{"line":74,"column":5,"offset":1371},"end":{"line":74,"column":9,"offset":1375},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1367},"end":{"line":74,"column":9,"offset":1375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"创建实现了 Shape 接口的抽象装饰类。","position":{"start":{"line":75,"column":1,"offset":1376},"end":{"line":75,"column":22,"offset":1397},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1376},"end":{"line":75,"column":22,"offset":1397},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"ShapeDecorator.java","position":{"start":{"line":77,"column":1,"offset":1399},"end":{"line":77,"column":20,"offset":1418},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":1399},"end":{"line":77,"column":20,"offset":1418},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeDecorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Shape</span> decoratedShape<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratedShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoratedShape <span class=\"token operator\">=</span> decoratedShape<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      decoratedShape<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":78,"column":1,"offset":1419},"end":{"line":90,"column":4,"offset":1683},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 4","position":{"start":{"line":92,"column":5,"offset":1689},"end":{"line":92,"column":9,"offset":1693},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":1685},"end":{"line":92,"column":9,"offset":1693},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"创建扩展了 ShapeDecorator 类的实体装饰类。","position":{"start":{"line":93,"column":1,"offset":1694},"end":{"line":93,"column":30,"offset":1723},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":1694},"end":{"line":93,"column":30,"offset":1723},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"RedShapeDecorator.java","position":{"start":{"line":95,"column":1,"offset":1725},"end":{"line":95,"column":23,"offset":1747},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":1725},"end":{"line":95,"column":23,"offset":1747},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedShapeDecorator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ShapeDecorator</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratedShape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>decoratedShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      decoratedShape<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           \n      <span class=\"token function\">setRedBorder</span><span class=\"token punctuation\">(</span>decoratedShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRedBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratedShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Border Color: Red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":96,"column":1,"offset":1748},"end":{"line":113,"column":4,"offset":2136},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 5","position":{"start":{"line":115,"column":5,"offset":2142},"end":{"line":115,"column":9,"offset":2146},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2138},"end":{"line":115,"column":9,"offset":2146},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"使用 RedShapeDecorator 来装饰 Shape 对象。","position":{"start":{"line":116,"column":1,"offset":2147},"end":{"line":116,"column":35,"offset":2181},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":2147},"end":{"line":116,"column":35,"offset":2181},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"DecoratorPatternDemo.java","position":{"start":{"line":118,"column":1,"offset":2183},"end":{"line":118,"column":26,"offset":2208},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":2183},"end":{"line":118,"column":26,"offset":2208},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoratorPatternDemo</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token class-name\">Shape</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">Shape</span> redCircle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">Shape</span> redRectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle with normal border\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nCircle of red border\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      redCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nRectangle of red border\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      redRectangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":119,"column":1,"offset":2209},"end":{"line":138,"column":4,"offset":2709},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"步骤 6","position":{"start":{"line":140,"column":5,"offset":2715},"end":{"line":140,"column":9,"offset":2719},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":2711},"end":{"line":140,"column":9,"offset":2719},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"验证输出。","position":{"start":{"line":141,"column":1,"offset":2720},"end":{"line":141,"column":6,"offset":2725},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":2720},"end":{"line":141,"column":6,"offset":2725},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Circle with normal border\nShape: Circle\n\nCircle of red border\nShape: Circle\nBorder Color: Red\n\nRectangle of red border\nShape: Rectangle\nBorder Color: Red</code></pre></div>","position":{"start":{"line":142,"column":1,"offset":2726},"end":{"line":153,"column":4,"offset":2887},"indent":[1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":153,"column":4,"offset":2887}}}}