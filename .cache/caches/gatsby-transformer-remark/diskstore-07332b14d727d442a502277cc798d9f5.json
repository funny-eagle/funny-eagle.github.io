{"expireTime":9007200811185308000,"key":"transformer-remark-markdown-html-ast-c2a4283f358a3ba52a0f68cd580145a7-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Algorithm:","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":13,"offset":13}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/search-in-a-binary-search-tree/"},"children":[{"type":"text","value":"700. Search in a Binary Search Tree","position":{"start":{"line":2,"column":14,"offset":14},"end":{"line":2,"column":49,"offset":49}}}],"position":{"start":{"line":2,"column":13,"offset":13},"end":{"line":2,"column":113,"offset":113}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":113,"offset":113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Review: ","position":{"start":{"line":3,"column":3,"offset":116},"end":{"line":3,"column":11,"offset":124}}},{"type":"element","tagName":"a","properties":{"href":"https://hashnode.com/post/5-best-libraries-for-making-ajax-calls-in-react-cis8x5f7k0jl7th53z68s41k1"},"children":[{"type":"text","value":"5 best libraries for making AJAX calls in React","position":{"start":{"line":3,"column":12,"offset":125},"end":{"line":3,"column":59,"offset":172}}}],"position":{"start":{"line":3,"column":11,"offset":124},"end":{"line":3,"column":161,"offset":274}}}],"position":{"start":{"line":3,"column":1,"offset":114},"end":{"line":3,"column":161,"offset":274}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Tip: 二叉查找树相关的几个基本概念","position":{"start":{"line":4,"column":3,"offset":277},"end":{"line":4,"column":22,"offset":296}}}],"position":{"start":{"line":4,"column":1,"offset":275},"end":{"line":4,"column":22,"offset":296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Share: ","position":{"start":{"line":5,"column":3,"offset":299},"end":{"line":5,"column":10,"offset":306}}},{"type":"element","tagName":"a","properties":{"href":"http://www.uml.org.cn/oobject/201211231.asp"},"children":[{"type":"text","value":"深入浅出UML类图","position":{"start":{"line":5,"column":11,"offset":307},"end":{"line":5,"column":20,"offset":316}}}],"position":{"start":{"line":5,"column":10,"offset":306},"end":{"line":5,"column":66,"offset":362}}}],"position":{"start":{"line":5,"column":1,"offset":297},"end":{"line":5,"column":66,"offset":362}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":5,"column":66,"offset":362}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Algorithm","position":{"start":{"line":7,"column":4,"offset":367},"end":{"line":7,"column":13,"offset":376}}}],"position":{"start":{"line":7,"column":1,"offset":364},"end":{"line":7,"column":13,"offset":376}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 700. Search in a Binary Search Tree\n * &lt;p>\n * Given the root node of a binary search tree (BST) and a value.\n * You need to find the node in the BST that the node's value equals the given value.\n * Return the subtree rooted with that node.\n * If such node doesn't exist, you should return NULL.\n * &lt;p>\n * For example,\n * &lt;p>\n * Given the tree:\n * 4\n * / \\\n * 2   7\n * / \\\n * 1   3\n * &lt;p>\n * And the value to search: 2\n * You should return this subtree:\n * 2\n * / \\\n * 1   3\n * In the example above, if we want to search the value 5,\n * &lt;p>\n * since there is no node with value 5, we should return NULL.\n * &lt;p>\n * Note that an empty tree is represented by NULL,\n * &lt;p>\n * therefore you would see the expected output (serialized tree format) as [], not null.\n *\n * @author jason\n * @date 2019/3/31.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchInBinarySearchTree</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SearchInBinarySearchTree</span><span class=\"token punctuation\">.</span><span class=\"token function\">searchBST</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">searchBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                current<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"val: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":9,"column":1,"offset":378},"end":{"line":88,"column":4,"offset":2333}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Review","position":{"start":{"line":92,"column":4,"offset":2340},"end":{"line":92,"column":10,"offset":2346}}}],"position":{"start":{"line":92,"column":1,"offset":2337},"end":{"line":92,"column":10,"offset":2346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://hashnode.com/post/5-best-libraries-for-making-ajax-calls-in-react-cis8x5f7k0jl7th53z68s41k1"},"children":[{"type":"text","value":"5 best libraries for making AJAX calls in React","position":{"start":{"line":94,"column":6,"offset":2353},"end":{"line":94,"column":53,"offset":2400}}}],"position":{"start":{"line":94,"column":5,"offset":2352},"end":{"line":94,"column":155,"offset":2502}}}],"position":{"start":{"line":94,"column":1,"offset":2348},"end":{"line":94,"column":155,"offset":2502}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"jQuery $.ajax","position":{"start":{"line":96,"column":3,"offset":2506},"end":{"line":96,"column":16,"offset":2519}}}],"position":{"start":{"line":96,"column":1,"offset":2504},"end":{"line":96,"column":16,"offset":2519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Fetch API","position":{"start":{"line":97,"column":3,"offset":2522},"end":{"line":97,"column":12,"offset":2531}}}],"position":{"start":{"line":97,"column":1,"offset":2520},"end":{"line":97,"column":12,"offset":2531}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Superagent","position":{"start":{"line":98,"column":3,"offset":2534},"end":{"line":98,"column":13,"offset":2544}}}],"position":{"start":{"line":98,"column":1,"offset":2532},"end":{"line":98,"column":13,"offset":2544}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Axios","position":{"start":{"line":99,"column":3,"offset":2547},"end":{"line":99,"column":8,"offset":2552}}}],"position":{"start":{"line":99,"column":1,"offset":2545},"end":{"line":99,"column":8,"offset":2552}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Request","position":{"start":{"line":100,"column":3,"offset":2555},"end":{"line":100,"column":10,"offset":2562}}}],"position":{"start":{"line":100,"column":1,"offset":2553},"end":{"line":100,"column":10,"offset":2562}}},{"type":"text","value":"\n"}],"position":{"start":{"line":96,"column":1,"offset":2504},"end":{"line":100,"column":10,"offset":2562}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">fetch</code>","position":{"start":{"line":102,"column":1,"offset":2564},"end":{"line":102,"column":8,"offset":2571}}},{"type":"text","value":"作为与远程资源交互的新标准化API，建议将其用于所有AJAX需求（不仅在React中，而且在所有类型的JavaScript应用程序中）。","position":{"start":{"line":102,"column":8,"offset":2571},"end":{"line":102,"column":76,"offset":2639}}}],"position":{"start":{"line":102,"column":1,"offset":2564},"end":{"line":102,"column":76,"offset":2639}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Tip","position":{"start":{"line":104,"column":4,"offset":2644},"end":{"line":104,"column":7,"offset":2647}}}],"position":{"start":{"line":104,"column":1,"offset":2641},"end":{"line":104,"column":7,"offset":2647}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"二叉查找树相关的几个基本概念","position":{"start":{"line":106,"column":5,"offset":2653},"end":{"line":106,"column":19,"offset":2667}}}],"position":{"start":{"line":106,"column":1,"offset":2649},"end":{"line":106,"column":19,"offset":2667}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"做到了 leetcode 中的 ","position":{"start":{"line":108,"column":3,"offset":2671},"end":{"line":108,"column":19,"offset":2687}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/search-in-a-binary-search-tree/"},"children":[{"type":"text","value":"Search in a Binary Search Tree","position":{"start":{"line":108,"column":20,"offset":2688},"end":{"line":108,"column":50,"offset":2718}}}],"position":{"start":{"line":108,"column":19,"offset":2687},"end":{"line":108,"column":114,"offset":2782}}},{"type":"text","value":"，就顺便把二叉查找树的基本概念复习一下","position":{"start":{"line":108,"column":114,"offset":2782},"end":{"line":108,"column":133,"offset":2801}}}],"position":{"start":{"line":108,"column":3,"offset":2671},"end":{"line":108,"column":133,"offset":2801}}},{"type":"text","value":"\n"}],"position":{"start":{"line":108,"column":1,"offset":2669},"end":{"line":108,"column":133,"offset":2801}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"树（tree）","position":{"start":{"line":110,"column":5,"offset":2807},"end":{"line":110,"column":12,"offset":2814}}}],"position":{"start":{"line":110,"column":3,"offset":2805},"end":{"line":110,"column":14,"offset":2816}}},{"type":"text","value":"是一种典型的数据结构，提供了一种层次组织机构，数据可以存储在树中的每个结点内。","position":{"start":{"line":110,"column":14,"offset":2816},"end":{"line":110,"column":53,"offset":2855}}}],"position":{"start":{"line":110,"column":3,"offset":2805},"end":{"line":110,"column":53,"offset":2855}}},{"type":"text","value":"\n"}],"position":{"start":{"line":110,"column":1,"offset":2803},"end":{"line":111,"column":1,"offset":2856}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"二叉树（binary tree）","position":{"start":{"line":112,"column":5,"offset":2861},"end":{"line":112,"column":21,"offset":2877}}}],"position":{"start":{"line":112,"column":3,"offset":2859},"end":{"line":112,"column":23,"offset":2879}}},{"type":"text","value":"是一种层次结构，要么是空集，要么是一个称为根（root）元素和两棵不同的二叉树组成的树，这两棵二叉树分别称为左子树和右子树。","position":{"start":{"line":112,"column":23,"offset":2879},"end":{"line":112,"column":85,"offset":2941}}}],"position":{"start":{"line":112,"column":3,"offset":2859},"end":{"line":112,"column":85,"offset":2941}}},{"type":"text","value":"\n"}],"position":{"start":{"line":112,"column":1,"offset":2857},"end":{"line":112,"column":85,"offset":2941}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一条路径的","position":{"start":{"line":113,"column":3,"offset":2944},"end":{"line":113,"column":8,"offset":2949}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"长度（length）","position":{"start":{"line":113,"column":10,"offset":2951},"end":{"line":113,"column":20,"offset":2961}}}],"position":{"start":{"line":113,"column":8,"offset":2949},"end":{"line":113,"column":22,"offset":2963}}},{"type":"text","value":"是指在该条路径上的边的个数。","position":{"start":{"line":113,"column":22,"offset":2963},"end":{"line":113,"column":36,"offset":2977}}}],"position":{"start":{"line":113,"column":3,"offset":2944},"end":{"line":113,"column":36,"offset":2977}}},{"type":"text","value":"\n"}],"position":{"start":{"line":113,"column":1,"offset":2942},"end":{"line":113,"column":36,"offset":2977}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个结点的","position":{"start":{"line":114,"column":3,"offset":2980},"end":{"line":114,"column":8,"offset":2985}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"深度（depth）","position":{"start":{"line":114,"column":10,"offset":2987},"end":{"line":114,"column":19,"offset":2996}}}],"position":{"start":{"line":114,"column":8,"offset":2985},"end":{"line":114,"column":21,"offset":2998}}},{"type":"text","value":"是指从跟结点到该结点的路径长度。","position":{"start":{"line":114,"column":21,"offset":2998},"end":{"line":114,"column":37,"offset":3014}}}],"position":{"start":{"line":114,"column":3,"offset":2980},"end":{"line":114,"column":37,"offset":3014}}},{"type":"text","value":"\n"}],"position":{"start":{"line":114,"column":1,"offset":2978},"end":{"line":114,"column":37,"offset":3014}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"兄弟结点（sibling）","position":{"start":{"line":115,"column":5,"offset":3019},"end":{"line":115,"column":18,"offset":3032}}}],"position":{"start":{"line":115,"column":3,"offset":3017},"end":{"line":115,"column":20,"offset":3034}}},{"type":"text","value":"是共享同一父结点的结点。","position":{"start":{"line":115,"column":20,"offset":3034},"end":{"line":115,"column":32,"offset":3046}}}],"position":{"start":{"line":115,"column":3,"offset":3017},"end":{"line":115,"column":32,"offset":3046}}},{"type":"text","value":"\n"}],"position":{"start":{"line":115,"column":1,"offset":3015},"end":{"line":115,"column":32,"offset":3046}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"没有子结点的结点称为","position":{"start":{"line":116,"column":3,"offset":3049},"end":{"line":116,"column":13,"offset":3059}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"叶结点（leaf）","position":{"start":{"line":116,"column":15,"offset":3061},"end":{"line":116,"column":24,"offset":3070}}}],"position":{"start":{"line":116,"column":13,"offset":3059},"end":{"line":116,"column":26,"offset":3072}}},{"type":"text","value":"。","position":{"start":{"line":116,"column":26,"offset":3072},"end":{"line":116,"column":27,"offset":3073}}}],"position":{"start":{"line":116,"column":3,"offset":3049},"end":{"line":116,"column":27,"offset":3073}}},{"type":"text","value":"\n"}],"position":{"start":{"line":116,"column":1,"offset":3047},"end":{"line":116,"column":27,"offset":3073}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"二叉查找树（binary search tree）","position":{"start":{"line":117,"column":5,"offset":3078},"end":{"line":117,"column":30,"offset":3103}}}],"position":{"start":{"line":117,"column":3,"offset":3076},"end":{"line":117,"column":32,"offset":3105}}},{"type":"text","value":"是特殊类型的二叉树，没有重复元素，对于树种的每一个结点，它的左子树中的结点的值都小于该结点的值，而它的右子树的结点的值都大于该结点的值。","position":{"start":{"line":117,"column":32,"offset":3105},"end":{"line":117,"column":100,"offset":3173}}}],"position":{"start":{"line":117,"column":3,"offset":3076},"end":{"line":117,"column":100,"offset":3173}}},{"type":"text","value":"\n"}],"position":{"start":{"line":117,"column":1,"offset":3074},"end":{"line":117,"column":100,"offset":3173}}},{"type":"text","value":"\n"}],"position":{"start":{"line":110,"column":1,"offset":2803},"end":{"line":117,"column":100,"offset":3173}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"参考文献：","position":{"start":{"line":119,"column":1,"offset":3175},"end":{"line":119,"column":6,"offset":3180}}},{"type":"element","tagName":"a","properties":{"href":"https://book.douban.com/subject/1879446/"},"children":[{"type":"text","value":"《Java语言程序设计（进阶篇）》","position":{"start":{"line":119,"column":7,"offset":3181},"end":{"line":119,"column":24,"offset":3198}}}],"position":{"start":{"line":119,"column":6,"offset":3180},"end":{"line":119,"column":67,"offset":3241}}}],"position":{"start":{"line":119,"column":1,"offset":3175},"end":{"line":119,"column":67,"offset":3241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Share","position":{"start":{"line":121,"column":4,"offset":3246},"end":{"line":121,"column":9,"offset":3251}}}],"position":{"start":{"line":121,"column":1,"offset":3243},"end":{"line":121,"column":9,"offset":3251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"http://www.uml.org.cn/oobject/201211231.asp"},"children":[{"type":"text","value":"深入浅出UML类图","position":{"start":{"line":123,"column":6,"offset":3258},"end":{"line":123,"column":15,"offset":3267}}}],"position":{"start":{"line":123,"column":5,"offset":3257},"end":{"line":123,"column":61,"offset":3313}}}],"position":{"start":{"line":123,"column":1,"offset":3253},"end":{"line":123,"column":61,"offset":3313}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"2012年的一篇文章，图文并茂的将UML类图与类与类之间的关系解释的清清楚楚，对UML类图模糊的同学，建议仔细阅读。","position":{"start":{"line":125,"column":1,"offset":3315},"end":{"line":125,"column":59,"offset":3373}}}],"position":{"start":{"line":125,"column":1,"offset":3315},"end":{"line":125,"column":59,"offset":3373}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":125,"column":59,"offset":3373}}}}