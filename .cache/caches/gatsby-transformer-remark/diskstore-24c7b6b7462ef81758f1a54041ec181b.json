{"expireTime":9007200811184863000,"key":"transformer-remark-markdown-html-ac2d356f4810b5d5fb4876551e71347a-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h2>引言</h2>\n<p>我从2012年开始走向程序员之路，时至今日，一晃6年过去了，回过头来检视自己，发现自己太多太多的不足和和对自己的“欠账”。2016年初，我违背了自己当初的技术规划，阴差阳错的做了研发经理职位，从事了2年研发管理工作，期间coding的时间越来越少，对自己的职业规划也是越来越模糊，心里想到要改变现状但总是犹豫不决。但说实话，管理团队的经历让我变得更加成熟，领导教会了我很多管理技能和为人处事之道，沟通协调能力增强了很多。2018年初，终于下决心重回技术岗，加上自己的行业倾向，狠下心离开了待了近三年的公司。在梳理自己的技术技能后，发现自己需要补课的知识太多太多…</p>\n<p>编程是我的一大兴趣爱好，写程序让我觉得很开心。就像蔡学镛老师说的：“我承认我很幸运，现在的我同时把程序设计当成茶余饭后的休闲活动、学习的题材，以及赚钱的工作。”</p>\n<p>今晚失眠了，想起蔡老师的《Java夜未眠》，翻出来再读一读，做了一些笔记，供自己和程序员朋友们参考。</p>\n<h2>《Java夜未眠》部分笔记</h2>\n<blockquote>\n<p>蔡学镛\n台湾台南县人，于1999年获得台湾清华大学计算机硕士学位，曾经担任创新工场首席布道师。\n蔡学镛从小开始学习编写程序，至今已经27年，涉猎极广，相关领域有：\n编程语言（BASIC、BaseIII+、LIPPER、86汇编语言、C++、Java、C#、VB .net），\nDSL（领域特定语言）、软件工程、操作系统、虚拟机器等。\n蔡学镛担任过华硕集团软件工程师、技术总监、元智大学讲师、美商欧莱礼出版社技术编辑、台湾微软杂志专栏作家、CTO、阿里巴巴集团支付宝架构师、创新工场架构师、银联移动支付首席产品架构师。\n著有《Java夜未眠》《编程ING》，\n译有《深入浅出设计模式》、《随意搜索》、《超越Java：探讨程式语言的未来（台湾版）》、《Ajax快速上手》、《Java虚拟机器（台湾版）》。</p>\n</blockquote>\n<h3>学习，是一条漫长的道路</h3>\n<ul>\n<li>先深后广</li>\n<li>阅读英文技术资料</li>\n</ul>\n<h3>写程序，好好玩</h3>\n<ul>\n<li>policy tool 安全设定《Java 安全防护》</li>\n<li>refactoring</li>\n<li>You’ve got the whole world in your hand</li>\n</ul>\n<h3>如何进入程序设计的领域</h3>\n<ul>\n<li>\n<p>培养兴趣</p>\n</li>\n<li>\n<p>慎选程序语言</p>\n<ul>\n<li>REBOL</li>\n<li>Python</li>\n<li>\n<p>Java</p>\n<ul>\n<li>A Jack of all trades is master of none</li>\n<li>学精某种程序语言，然后再学另一个程序语言</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使用适当的开发工具</p>\n</li>\n<li>\n<p>多读好书，少上课</p>\n<ul>\n<li>找志同道合的朋友组织“读书会”</li>\n</ul>\n</li>\n<li>\n<p>加强英文阅读能力</p>\n</li>\n<li>\n<p>求人之前，先求自己</p>\n<ul>\n<li>自己应该尝试先查书、写程序测试、甚至阅读源代码来找答案</li>\n</ul>\n</li>\n<li>\n<p>多写程序练习</p>\n<ul>\n<li>由小到大，由简单到复杂</li>\n<li>找一些有趣的题目（比如：计算器、踩地雷、小画家、俄罗斯方块等）</li>\n</ul>\n</li>\n<li>\n<p>向上延伸、向下延伸、向旁延伸</p>\n<ul>\n<li>向上延伸：学习对象导向分析设计、设计模式、重构以及软件工程。让自己具有做大型项目的能力</li>\n<li>向下延伸：升入了解内部底层的运作机制，例如数据结构、操作系统原理、计算机组织与结构</li>\n<li>向旁延伸：学习不同应用领域的API，例如：多媒体、数据库、分布式运算等</li>\n</ul>\n</li>\n<li>\n<p>写程序是很有趣的事情，可以把自己的想法付诸实现</p>\n</li>\n<li>\n<p>每隔半年检阅自己这段时间的进步</p>\n</li>\n</ul>\n<h3>职业敏感度</h3>\n<ul>\n<li>把职业融入生活</li>\n<li>\n<p>培养高度的职业敏感度</p>\n<ul>\n<li>让自己暴露再大量相关的信息下</li>\n</ul>\n</li>\n</ul>\n<h3>程序员的生涯规划</h3>\n<h3>软件产业的知识经济</h3>\n<ul>\n<li>Know-What 认知性的只是 cognitive knowledge</li>\n<li>Know-How 进阶技能 advanced skills</li>\n<li>Know-why 对整个系统的掌握度 System understanding，了解各种知识背后复杂交错的因果关系</li>\n<li>Care-Why 自发性的创意 self-motivated creativity</li>\n<li>时间和努力见证知识经济</li>\n</ul>\n<h3>偶像崇拜</h3>\n<ul>\n<li>适当地崇拜优质的偶像，可以激励起自己“有为者亦若是”的精神</li>\n<li>David Flanagan ：《Java in Nutshell》</li>\n<li>Jonathan Knudsen：《Java密码学》 《Java 2D图形技术》 《乐高可编程积木》</li>\n<li>Bruce Eckel：《Thinking in java》</li>\n<li>Elliotte Rusty Harold：《Java Network Programming》《java I/O》《XML Bible》</li>\n<li>Martin Fowler：《Refactoring》 《UML Distilled》 《Analysis Patterns》</li>\n<li>Bill Day：JMF Java Media Framework</li>\n<li>James Gosling</li>\n<li>Bertrand meyer 《Object oriented software construction，2nd ed》</li>\n<li>Carl sassenrath rebol</li>\n<li>charles petzold《code》</li>\n</ul>\n<h3>学习java</h3>\n<ul>\n<li>\n<p>java 的原理     </p>\n</li>\n<li>\n<p>学会java 语言\n《The Java spacification 》\n《inside in java virtual machine》</p>\n</li>\n<li>\n<p>面相对象的思维\n多看相关书 design pattern refactoring\n多看java API design 与implementation\n多写程序</p>\n</li>\n<li>\n<p>API</p>\n</li>\n<li>\n<p>开发工具的用法</p>\n</li>\n<li>\n<p>垃圾回收</p>\n<ul>\n<li>改用一个内存管理方式好一点的虚拟机</li>\n<li>少制造垃圾，能用数组的就不要用vector，能用Stringbuffer的就不要用String</li>\n<li>不再使用的对象要尽早设置为null</li>\n</ul>\n</li>\n<li>\n<p>变量的种类</p>\n<ul>\n<li>根据声明方式，分为7种变量</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">{</span>\n\t  <span class=\"token comment\">//class variable 声明在class内，method之外，且用static修饰的变量             </span>\n     <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n     \n     <span class=\"token comment\">//instance variable 声明在class内，method之外，未用static修饰的变量</span>\n     <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n     \n     <span class=\"token comment\">//method parameter声明在method小括号内的变量</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">MyMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// local variable 狭义的局部变量 声明在method内的变量</span>\n             <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">;</span>\n             \n          <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// exception-handler parameter 声明在catch小括号内的变量  </span>\n          <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n     \n     <span class=\"token comment\">// constructor parameter 声明在constructor小括号内的变量</span>\n     <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// local variable 狭义的局部变量 声明在method内的变量</span>\n          <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>根据变量的内存，分为2种变量\nheap variable 占用的内存在heap中，包括了 class variable，instance variable，array compnent，即上一程序的a b g[0]，这类变量会自动被JVM初始化成默认值\nstack variable 通常称为广义的局部变量 pan-local variable，占用的内存在stack中，这类变量包括了狭义的局部变量，exception-handler parameter，method                   parameter，constructor parameter 即上面程序的cdef，狭义的局部变量不会被JVM初始化默认值，使用者必须自行初始化该变量，但是 parameter类的变量会被JVM初始化成传入的     值。</p>\n</li>\n<li>\n<p>根据使用方式为变量分类\nclass variable\ninstance variable\n广义的局部变量 包含上例的cdef\n数组视为对象，array compenent 视为对象的instance variable\n</p>\n</li>\n</ul>"}