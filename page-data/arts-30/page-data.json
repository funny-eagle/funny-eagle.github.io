{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-30/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"0516990a-3d2b-5713-91c5-4f75068528c7","excerpt":"Algorithm: 961. N-Repeated Element in Size 2N Array Review: Thread-Safe Collections Tip: 10进制计数法和2进…","html":"<ul>\n<li>Algorithm: <a href=\"https://leetcode.com/problems/n-repeated-element-in-size-2n-array/\">961. N-Repeated Element in Size 2N Array</a></li>\n<li>Review: <a href=\"https://medium.com/elp-2018/thread-safe-collections-8f1f17c283e7\">Thread-Safe Collections</a></li>\n<li>Tip: 10进制计数法和2进制计数法</li>\n<li>Share: AOP入门分享PPT</li>\n</ul>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 961. N-Repeated Element in Size 2N Array\n *\n * In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.\n *\n * Return the element repeated N times.\n *\n *\n * Example 1:\n *\n * Input: [1,2,3,3]\n * Output: 3\n * Example 2:\n *\n * Input: [2,1,2,5,3,2]\n * Output: 2\n * Example 3:\n *\n * Input: [5,1,5,2,5,3,5,4]\n * Output: 5\n *\n *\n * Note:\n *\n * 4 &lt;= A.length &lt;= 10000\n * 0 &lt;= A[i] &lt; 10000\n * A.length is even\n *\n * @author jason\n * @date 2019/2/17.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NRepeatedElementinSize2NArray</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">repeatedNTimes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 4 &lt;= A.length &lt;= 10000, A.length is even</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">repeatedNTimes</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"thread-safe-collections\" style=\"position:relative;\"><a href=\"#thread-safe-collections\" aria-label=\"thread safe collections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://medium.com/elp-2018/thread-safe-collections-8f1f17c283e7\">Thread-Safe Collections</a></h3>\n<ul>\n<li>为什么需要线程安全的集合\n<ul>\n<li>多线程同时写出</li>\n<li>同时读写</li>\n<li>多线程同时读</li>\n<li>写之前读</li>\n</ul>\n</li>\n<li>什么是线程安全的集合\n<ul>\n<li>线程安全集合是可以在没有竞争条件的情况下同时由多个线程访问的集合</li>\n</ul>\n</li>\n<li>怎么工作的\n<ul>\n<li><img src=\"https://raw.githubusercontent.com/yangjinlong86/arts/master/2019/images/State%20machine%20of%20a%20basic%20Thread-Safe%20Collection.png\" alt=\"State machine of a basic Thread-Safe Collection\"></li>\n</ul>\n</li>\n<li>如何使用\n<ul>\n<li>Java <code class=\"language-text\">java.util.concurrent</code> 包下的 <code class=\"language-text\">BlockingQueue</code>， <code class=\"language-text\">ConcurrentHashMap</code>， <code class=\"language-text\">ConcurrentSkipListMap</code></li>\n<li>Python <code class=\"language-text\">Queue</code>, <code class=\"language-text\">Deques</code></li>\n<li>Go 中 <code class=\"language-text\">channels </code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<h3 id=\"10进制计数法和2进制计数法\" style=\"position:relative;\"><a href=\"#10%E8%BF%9B%E5%88%B6%E8%AE%A1%E6%95%B0%E6%B3%95%E5%92%8C2%E8%BF%9B%E5%88%B6%E8%AE%A1%E6%95%B0%E6%B3%95\" aria-label=\"10进制计数法和2进制计数法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10进制计数法和2进制计数法</h3>\n<blockquote>\n<p>最近买了一本<a href=\"https://book.douban.com/subject/19949020/\">《程序员的数学》</a>，放假前一天拿到手，赶紧拆开读了几页，看到讲10进制和2进制的时候，茅塞顿开，感觉非常爽，以前总感觉没有把这两个计数法搞清楚（没有认真学习过，惭愧），看完之后迫不及待的找了一些数字算了起来。如果有跟我一样的兄弟们，建议快快拿起这本书读起来吧。</p>\n</blockquote>\n<p><strong>10进制计数法</strong></p>\n<ul>\n<li>平时我们使用的就是10进制计数法，使用的数字有10种，即 <code class=\"language-text\">0、1、2、3、4、5、6、7、8、9</code></li>\n<li>数位有一定的意义，从右往左分别表示个位、十位、百位、千位…</li>\n<li>引用书中的例子，来分解<code class=\"language-text\">2503</code>这个数\n<ul>\n<li>2 表示的是 1000 的个数</li>\n<li>5 表示的是 100 的个数</li>\n<li>0 表示的是 10 的个数</li>\n<li>3 表示的是 1 的个数</li>\n<li>2503 这个数字就是2个1000、5个100、0个10、3个1 累加的结果</li>\n<li>1000 是 <code class=\"language-text\">10*10*10</code> 即10的3次方，100 是 <code class=\"language-text\">10*10</code> 即10 的2次方</li>\n<li>2503 又可以表示为 <code class=\"language-text\">2*10的3次方 + 5*10的2次方 + 0*10的1次方 + 3*10的0次方</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>2进制计数法</strong></p>\n<ul>\n<li>计算机在处理数据时使用的是2进制计数法，使用的数字有2中，即 <code class=\"language-text\">0、1</code></li>\n<li>数位的意义是，从右往左分别表示1位、2位、4位、8位、16位…</li>\n</ul>\n<h4 id=\"10进制和2进制数的转换\" style=\"position:relative;\"><a href=\"#10%E8%BF%9B%E5%88%B6%E5%92%8C2%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2\" aria-label=\"10进制和2进制数的转换 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10进制和2进制数的转换</h4>\n<p><img src=\"https://raw.githubusercontent.com/yangjinlong86/arts/master/2019/images/0-99%E7%9A%8410%E8%BF%9B%E5%88%B6%E5%92%8C2%E8%BF%9B%E5%88%B6%E8%AE%A1%E6%95%B0.png\" alt=\"0到99的10进制和2进制计数\"></p>\n<h4 id=\"2-进制转换成-10-进制\" style=\"position:relative;\"><a href=\"#2-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90-10-%E8%BF%9B%E5%88%B6\" aria-label=\"2 进制转换成 10 进制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2 进制转换成 10 进制</h4>\n<blockquote>\n<p>直接举例子，把2进制 <code class=\"language-text\">1010110</code> 转换成10进制</p>\n</blockquote>\n<p>由于2进制从右往左分别表示1位，2位，4位，8位，16位…</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>64</td>\n<td>32</td>\n<td>16</td>\n<td>8</td>\n<td>4</td>\n<td>2</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>然后把所有的<code class=\"language-text\">1</code>下面的对应的值加起来，即<code class=\"language-text\">64+16+4+2=86</code></p>\n<h4 id=\"10-进制转换成-2-进制\" style=\"position:relative;\"><a href=\"#10-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90-2-%E8%BF%9B%E5%88%B6\" aria-label=\"10 进制转换成 2 进制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10 进制转换成 2 进制</h4>\n<p><strong>余数短除法</strong></p>\n<blockquote>\n<p>活用这个方法可以将所有十进制数字转换成任何进制表达。除数为2是因为我们最终想得到的以2为基数的数（即二进制数值） 。如果最终想得到其他数系的数字，用目标数系的基数代替这个方法里二进制的基数2 就可以了。例如，要得到基数为9的数，就用9来代替2作为除数 。最终的结果就是目标数系的数字表达。</p>\n</blockquote>\n<p><strong>整个计算过程只需要将数字一直除以2</strong></p>\n<ol>\n<li>进行除法运算，纪录余数0或1</li>\n<li>继续用商除以2，一直到商为0</li>\n<li>写出2进制数字，从最后一个余数开始顺序读，读到最开始的余数</li>\n</ol>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<h3 id=\"面向切面编程\" style=\"position:relative;\"><a href=\"#%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B\" aria-label=\"面向切面编程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>面向切面编程</h3>\n<blockquote>\n<p>昨天晚上躺在床上，和我妻子讨论起了AOP，我们举了几个生活中的例子来分析什么是join point、pointcut、以及advice。例如计划一次出游，要去三个地方，到达每个景点后可能要拍照、吃饭或购物。这三个地方就是join point，在某个景点拍吃购的地点为 pointcut，而拍照、吃饭、购物这几件事情是advice，它们在出游进行的过程中被切入pointcut。</p>\n</blockquote>\n<p>附件是我在部门进行的面向切面编程的分享PPT <a href=\"https://github.com/yangjinlong86/arts/blob/master/2019/aop-arts33.pptx\">AOP入门</a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#thread-safe-collections\">Thread-Safe Collections</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n<ul>\n<li>\n<p><a href=\"#10%E8%BF%9B%E5%88%B6%E8%AE%A1%E6%95%B0%E6%B3%95%E5%92%8C2%E8%BF%9B%E5%88%B6%E8%AE%A1%E6%95%B0%E6%B3%95\">10进制计数法和2进制计数法</a></p>\n<ul>\n<li><a href=\"#10%E8%BF%9B%E5%88%B6%E5%92%8C2%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2\">10进制和2进制数的转换</a></li>\n<li><a href=\"#2-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90-10-%E8%BF%9B%E5%88%B6\">2 进制转换成 10 进制</a></li>\n<li><a href=\"#10-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%88%90-2-%E8%BF%9B%E5%88%B6\">10 进制转换成 2 进制</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n<ul>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B\">面向切面编程</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第30周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2019-01-27"}}},"pageContext":{"slug":"/arts-30/","previous":{"fields":{"slug":"/arts-29/"},"frontmatter":{"title":"ARTS 第29周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/aspect-oriented-programming/"},"frontmatter":{"title":"面向切面编程","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}