{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-35/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"0ee43931-50fe-5d7a-89d4-e6ccd57143a1","excerpt":"Algorithm:700. Search in a Binary Search Tree Review: 5 best libraries for making AJAX calls in Rea…","html":"<ul>\n<li>Algorithm:<a href=\"https://leetcode.com/problems/search-in-a-binary-search-tree/\">700. Search in a Binary Search Tree</a></li>\n<li>Review: <a href=\"https://hashnode.com/post/5-best-libraries-for-making-ajax-calls-in-react-cis8x5f7k0jl7th53z68s41k1\">5 best libraries for making AJAX calls in React</a></li>\n<li>Tip: 二叉查找树相关的几个基本概念</li>\n<li>Share: <a href=\"http://www.uml.org.cn/oobject/201211231.asp\">深入浅出UML类图</a></li>\n</ul>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">/**\r\n * 700. Search in a Binary Search Tree\r\n * &lt;p>\r\n * Given the root node of a binary search tree (BST) and a value.\r\n * You need to find the node in the BST that the node's value equals the given value.\r\n * Return the subtree rooted with that node.\r\n * If such node doesn't exist, you should return NULL.\r\n * &lt;p>\r\n * For example,\r\n * &lt;p>\r\n * Given the tree:\r\n * 4\r\n * / \\\r\n * 2   7\r\n * / \\\r\n * 1   3\r\n * &lt;p>\r\n * And the value to search: 2\r\n * You should return this subtree:\r\n * 2\r\n * / \\\r\n * 1   3\r\n * In the example above, if we want to search the value 5,\r\n * &lt;p>\r\n * since there is no node with value 5, we should return NULL.\r\n * &lt;p>\r\n * Note that an empty tree is represented by NULL,\r\n * &lt;p>\r\n * therefore you would see the expected output (serialized tree format) as [], not null.\r\n *\r\n * @author jason\r\n * @date 2019/3/31.\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchInBinarySearchTree</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">SearchInBinarySearchTree</span><span class=\"token punctuation\">.</span><span class=\"token function\">searchBST</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">searchBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\r\n                current<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\r\n    <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span>\r\n    <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span>\r\n\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"val: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"5-best-libraries-for-making-ajax-calls-in-react\" style=\"position:relative;\"><a href=\"#5-best-libraries-for-making-ajax-calls-in-react\" aria-label=\"5 best libraries for making ajax calls in react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://hashnode.com/post/5-best-libraries-for-making-ajax-calls-in-react-cis8x5f7k0jl7th53z68s41k1\">5 best libraries for making AJAX calls in React</a></h3>\n<ul>\n<li>jQuery $.ajax</li>\n<li>Fetch API</li>\n<li>Superagent</li>\n<li>Axios</li>\n<li>Request</li>\n</ul>\n<p><code class=\"language-text\">fetch</code>作为与远程资源交互的新标准化API，建议将其用于所有AJAX需求（不仅在React中，而且在所有类型的JavaScript应用程序中）。</p>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<h3 id=\"二叉查找树相关的几个基本概念\" style=\"position:relative;\"><a href=\"#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\" aria-label=\"二叉查找树相关的几个基本概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二叉查找树相关的几个基本概念</h3>\n<blockquote>\n<p>做到了 leetcode 中的 <a href=\"https://leetcode.com/problems/search-in-a-binary-search-tree/\">Search in a Binary Search Tree</a>，就顺便把二叉查找树的基本概念复习一下</p>\n</blockquote>\n<ul>\n<li>\n<p>**树（tree）**是一种典型的数据结构，提供了一种层次组织机构，数据可以存储在树中的每个结点内。</p>\n</li>\n<li>\n<p>**二叉树（binary tree）**是一种层次结构，要么是空集，要么是一个称为根（root）元素和两棵不同的二叉树组成的树，这两棵二叉树分别称为左子树和右子树。</p>\n</li>\n<li>\n<p>一条路径的**长度（length）**是指在该条路径上的边的个数。</p>\n</li>\n<li>\n<p>一个结点的**深度（depth）**是指从跟结点到该结点的路径长度。</p>\n</li>\n<li>\n<p>**兄弟结点（sibling）**是共享同一父结点的结点。</p>\n</li>\n<li>\n<p>没有子结点的结点称为<strong>叶结点（leaf）</strong>。</p>\n</li>\n<li>\n<p>**二叉查找树（binary search tree）**是特殊类型的二叉树，没有重复元素，对于树种的每一个结点，它的左子树中的结点的值都小于该结点的值，而它的右子树的结点的值都大于该结点的值。</p>\n</li>\n</ul>\n<p>参考文献：<a href=\"https://book.douban.com/subject/1879446/\">《Java语言程序设计（进阶篇）》</a></p>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<h3 id=\"深入浅出uml类图\" style=\"position:relative;\"><a href=\"#%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAuml%E7%B1%BB%E5%9B%BE\" aria-label=\"深入浅出uml类图 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://www.uml.org.cn/oobject/201211231.asp\">深入浅出UML类图</a></h3>\n<p>2012年的一篇文章，图文并茂的将UML类图与类与类之间的关系解释的清清楚楚，对UML类图模糊的同学，建议仔细阅读。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#5-best-libraries-for-making-ajax-calls-in-react\">5 best libraries for making AJAX calls in React</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n<ul>\n<li><a href=\"#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9B%B8%E5%85%B3%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">二叉查找树相关的几个基本概念</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n<ul>\n<li><a href=\"#%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAuml%E7%B1%BB%E5%9B%BE\">深入浅出UML类图</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第35周：二叉搜索树查找算法、React AJAX库、二叉查找树与UML类图","tags":["coding","arts"],"description":"本周ARTS包含LeetCode二叉搜索树查找算法解析、React中AJAX调用的最佳库推荐、二叉查找树基本概念复习，以及UML类图详解。","date":"2019-03-24"}}},"pageContext":{"slug":"/arts-35","previous":{"fields":{"slug":"/arts-34"},"frontmatter":{"title":"ARTS 第34周：搜索插入位置算法、网关聚合模式、Spring Cloud Gateway与云服务设计模式","tags":["coding","arts"],"slug":"/arts-34"}},"next":{"fields":{"slug":"/arts-36"},"frontmatter":{"title":"ARTS 第36周：最大二叉树算法、RESTful API最佳实践、递归与分布式系统","tags":["coding","arts"],"slug":"/arts-36"}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}