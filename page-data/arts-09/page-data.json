{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-09/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"f919885d-b6d8-53cb-8dc9-e56573aeb956","excerpt":"Algorithm Palindrome Number Review Using Command Pattern in Java https://medium.com/@p.osinaga/usin…","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<h3 id=\"palindrome-number\" style=\"position:relative;\"><a href=\"#palindrome-number\" aria-label=\"palindrome number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Palindrome Number</h3>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\n/**\n * 9.Palindrome Number\n * &lt;p&gt;\n * Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * Input: 121\n * Output: true\n * Example 2:\n * &lt;p&gt;\n * Input: -121\n * Output: false\n * Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n * Example 3:\n * &lt;p&gt;\n * Input: 10\n * Output: false\n * Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n * Follow up:\n * &lt;p&gt;\n * Coud you solve it without converting the integer to a string?\n *\n * @author jason\n * @date 18/9/1.\n */\npublic class PalindromeNumber {\n    public static boolean isPalindrome(int x) {\n        if (x &lt; 0) {\n            return false;\n        }\n\n        int div = 1;\n        while (x / div &gt;= 10) {\n            div *= 10;\n        }\n\n        while (x != 0) {\n            int left = x / div;\n            int right = x % 10;\n\n            if (left != right) {\n                return false;\n            }\n\n            x = (x % div) / 10;\n            div /= 100;\n        }\n\n        return true;\n    }\n\n    public static void main(String [] args){\n        System.out.println(PalindromeNumber.isPalindrome(121));\n        System.out.println(PalindromeNumber.isPalindrome(-121));\n        System.out.println(PalindromeNumber.isPalindrome(10));\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"using-command-pattern-in-java\" style=\"position:relative;\"><a href=\"#using-command-pattern-in-java\" aria-label=\"using command pattern in java permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Command Pattern in Java</h3>\n<blockquote>\n<p><a href=\"https://medium.com/@p.osinaga/using-command-pattern-in-java-6fd6bb36fd42\">https://medium.com/@p.osinaga/using-command-pattern-in-java-6fd6bb36fd42</a></p>\n</blockquote>\n<p>命令模式属于行为型模式，将请求封装成对象，以便使用不同的请求、队列或者日志来参数化其它对象。命令模式也可以支持撤销操作。</p>\n<p><img src=\"https://raw.githubusercontent.com/yangjinlong86/nocoder/master/data/images/design-pattern/command.jpeg\" alt=\"command\"></p>\n<p>文中作者用 从 AppleStore 中选购商品为例，演示了命令模式在java中的使用，<code>Store</code>类来记录购买哪些<code>Product</code>和然后执行<code>BuyProduct</code>和<code>SellProduct</code>命令，相当于把多个命令记录下来，然后顺序执行这些命令，这些命令可以组合、复用。</p>\n<p>PS: <code>BuyProduct</code>类里居然调用的<code>product</code>的<code>sell()</code>方法，这个老外太TM不认真了。</p>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<p>两个小坑</p>\n<ol>\n<li>一个 vue 项目 执行<code>npm run dev</code> 提示有几个 modules 和 dependencies 找不到，之前在 windows 下build run 都是没问题的，换了 ubuntu 之后，就运行不起来，检查后发现这几个路径的大小没写对，在 linux 环境下引入 module 和 dependencies 是要区分大小写的。当然这也是开发人员书写不规范问题，引入文件应当与实际文件大小写保持一致才是。</li>\n</ol>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">ERROR  Failed to compile with 5 errors\n\nThese dependencies were not found:\n\n* @/components/login/Login.css in ./src/router/index.js\n* @/components/library/LibraryMaintain/LibraryMaintain.vue in ./src/router/index.js\n* @/components/webmanagement/details/Details.vue in ./src/router/index.js\n\nTo install them, you can run: npm install --save @/components/login/Login.css @/components/library/LibraryMaintain/LibraryMaintain.vue @/components/webmanagement/details/Details.vue\n\n\nThese relative modules were not found:\n\n* ../../common/infoWindowLight.js in ./~/_babel-loader@7.1.5@babel-loader/lib!./~/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=script&amp;index=0!./src/components/common/scatterMap.vue\n* ../../common/infoWindow.js in ./~/_babel-loader@7.1.5@babel-loader/lib!./~/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=script&amp;index=0!./src/components/common/scatterMap.vue</code>\n        </deckgo-highlight-code>\n<p>2.为一个项目配置了nginx转发，80端口转发到8075端口，直接用ip访问，上传图片大小超过1M就会抛 <code>413 request entity too large</code>，修改nginx配置文件 <code>client_max_body_size=20M</code>，默认配置大小为1M，超过就会抛上述异常。</p>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<h3 id=\"command-pattern\" style=\"position:relative;\"><a href=\"#command-pattern\" aria-label=\"command pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command Pattern</h3>\n<p>命令模式，我觉得还是比较好理解的，《大话设计模式》里作者用买烤羊肉串和《Head First 设计模式》的餐厅点餐的例子、遥控器的例子，足以让我们很好的理解这个模式的使用了。例如餐厅里，顾客（Client）创建一个订单，订单里的菜品就是由一个个的命令（Command）组成，交给服务员（Invoker），将订单拿走交给厨师（Receiver），厨师按菜单制做菜品，相当于顺序执行命令。项目中，我们使用Apache Chain，结合责任链和命令模式，来处理队列请求，我们老大很喜欢用这个Chain，放在下次arts的share来写一下Apache Chain以及责任链模式。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n<ul>\n<li><a href=\"#palindrome-number\">Palindrome Number</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#using-command-pattern-in-java\">Using Command Pattern in Java</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n<ul>\n<li><a href=\"#command-pattern\">Command Pattern</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第 9 周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2018-09-01"}}},"pageContext":{"slug":"/arts-09/","previous":{"fields":{"slug":"/arts-08/"},"frontmatter":{"title":"ARTS 第 8 周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/arts-10/"},"frontmatter":{"title":"ARTS 第 10 周","tags":["coding","arts"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}