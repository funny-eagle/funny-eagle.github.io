{"componentChunkName":"component---src-templates-blog-post-js","path":"/principles-of-good-programming/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Yang's Blog"}},"markdownRemark":{"id":"d3a8b803-b5e0-5902-9b7b-c46c25d277b2","excerpt":"长久以来，不论是初出茅庐还是业界的老前辈，都依然强调着编程原则和设计原则。Bob大叔在他的《整洁架构之道》中提到，写这本书就是为了讲述这些规则，这些永恒的，不变的软件架构规则。 在学习各种编程原则的时候，看到了 Christopher Diggins…","html":"<p>长久以来，不论是初出茅庐还是业界的老前辈，都依然强调着编程原则和设计原则。Bob大叔在他的《整洁架构之道》中提到，写这本书就是为了讲述这些规则，这些永恒的，不变的软件架构规则。</p>\n<p>在学习各种编程原则的时候，看到了 Christopher Diggins 的这篇良好编程的原则，其中罗列了各种原则以及相应的链接，认为多年来这些编程原则帮助让其成为更好的程序员，且可以帮助任何开发人员来提高效率，写出更加易于维护、BUG更少的代码。</p>\n<p><strong>DRY-Don‘t repeat yourself</strong> - 这是编程中的一个基本原则，就是避免重复。许多编程结构仅用于此目的（例如循环，函数，类等）。一旦你开始重复自己（例如一个长表达式，一系列语句，相同的概念），就创建一个新的抽象。 <a href=\"http://en.wikipedia.org/wiki/Don&#x27;t_repeat_yourself\">http://en.wikipedia.org/wiki/Don%27t_repeat_yourself</a></p>\n<p><strong>抽象原则</strong> - 与DRY相关的抽象原则是“程序中的每一个重要功能都应该在源代码中的一个地方实现”。<a href=\"http://en.wikipedia.org/wiki/Abstraction_principle_(programming\">http://en.wikipedia.org/wiki/Abstraction_principle_(programming</a>）</p>\n<p><strong>KISS（保持简单，愚蠢！）</strong> - 简单（并避免复杂性）应始终是一个关键的目标。简单的代码编写时间更短，错误更少，更容易修改。 <a href=\"http://en.wikipedia.org/wiki/KISS_principle\">http://en.wikipedia.org/wiki/KISS_principle</a></p>\n<p><strong>避免创建 YAGNI（You aren‘t going to need it）</strong> - 尝试在需要之前不添加功能。<a href=\"http://en.wikipedia.org/wiki/YAGNI\">http://en.wikipedia.org/wiki/YAGNI</a></p>\n<p><strong>做最简单的事可能有用</strong> - 在编程前问自己一个问题，“做什么最简单的事情可能有用？”这有助于我们在设计中走向简单化的道路。<a href=\"http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html\">http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html</a></p>\n<p><strong>不要让我思考</strong> - 这是 Steve Krug 的关于web易用性的一本书的标题，它也与编程有关。关键是代码应该易于阅读和理解，只需要最少的努力。如果代码需要阅读者过多的思考才能理解，那么它可能还需要被简化。<a href=\"http://www.sensible.com/dmmt.html\">http://www.sensible.com/dmmt.html</a></p>\n<p><strong>开闭原则</strong> - 软件的类、模块、功能等应该对扩展开放，对修改关闭。换句话说，不要编写可以修改的类，而是编写可以扩展的类。<a href=\"http://en.wikipedia.org/wiki/Open_Closed_Principle\">http://en.wikipedia.org/wiki/Open_Closed_Principle</a></p>\n<p><strong>为维护者编写代码</strong> - 几乎所有值得写的代码都值得在将来维护。你必然也会维护其他人写的代码，踩别人留下的坑。有句话可以让你深刻的记住这一点，“维护你的代码的人是一个知道你住在哪里的暴力精神病患者。“ <a href=\"http://c2.com/cgi/wiki?CodeForTheMaintainer\">http://c2.com/cgi/wiki?CodeForTheMaintainer</a></p>\n<p><strong>最不惊讶</strong>的原则 - <strong>最不惊讶</strong>的原则通常在用户界面方面被引用，但同样的原则适用于书面代码。代码应该尽可能少地让读者感到惊讶。遵循标准惯例的方法，代码应该做注释和名称所暗示的，并且应该尽可能避免可能出人意料的副作用。 <a href=\"http://en.wikipedia.org/wiki/Principle_of_least_astonishment\">http://en.wikipedia.org/wiki/Principle_of_least_astonishment</a></p>\n<p><strong>单一责任原则</strong> - 代码（例如类或函数）应执行单个定义良好的任务。 <a href=\"http://en.wikipedia.org/wiki/Single_responsibility_principle\">http://en.wikipedia.org/wiki/Single_responsibility_principle</a></p>\n<p><strong>最小化耦合</strong> - 代码的任何部分（代码块，函数，类等）应最小化对其他代码区域的依赖性。这是通过尽可能少地使用共享变量来实现的。“低耦合通常是结构良好的计算机系统和良好设计的标志，当与高内聚相结合时，支持高可读性和可维护性的一般目标” [<a href=\"http://en.wikipedia.org/wiki/Coupling_%EF%BC%88\">http://en.wikipedia.org/wiki/Coupling_（</a> computer_programming](<a href=\"http://en.wikipedia.org/wiki/Coupling_(computer_programming)%EF%BC%89\">http://en.wikipedia.org/wiki/Coupling_(computer_programming)）</a></p>\n<p><strong>最大化内聚</strong> - 应在同一组件中找到具有类似功能的代码。 <a href=\"http://en.wikipedia.org/wiki/Cohesion_(computer_science\">http://en.wikipedia.org/wiki/Cohesion_(computer_science</a>）</p>\n<p><strong>隐藏实现详细信息</strong> - 隐藏实现详细信息允许更改代码组件的实现，同时最小化影响使用该组件的任何其他模块。 <a href=\"http://en.wikipedia.org/wiki/Information_Hiding\">http://en.wikipedia.org/wiki/Information_Hiding</a></p>\n<p><strong>迪米特法则</strong> - 一个组件只应与它的直接关系进行通信（例如它继承的类，它包含的对象，通过参数传递的对象等） <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\">http://en.wikipedia.org/wiki/Law_of_Demeter</a></p>\n<p><strong>避免过早优化</strong> - 除非你的代码有效，否则不要考虑优化，但要比你想要的慢。只有这样才能开始考虑优化，然后才能借助经验数据。“我们应该忘记小的效率，大约97％的时间说：过早的优化是所有邪恶的根源” - 唐纳德克努特。 <a href=\"http://en.wikipedia.org/wiki/Program_optimization\">http://en.wikipedia.org/wiki/Program_optimization</a></p>\n<p><strong>重用代码</strong> - 重用代码可提高代码可靠性并缩短开发时间。 <a href=\"http://en.wikipedia.org/wiki/Code_reuse\">http://en.wikipedia.org/wiki/Code_reuse</a></p>\n<p><strong>关注点分离</strong> - 不同的功能区域应该由不同且最小重叠的代码模块来管理。 <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">http://en.wikipedia.org/wiki/Separation_of_concerns</a></p>\n<p><strong>拥抱变化</strong> - 这是Kent Beck的一本书的副标题，也被认为是极限编程和敏捷方法的一个原则。许多其他原则都基于您应该期待的概念并欢迎变革。事实上，最小化耦合等非常古老的软件工程原则与使代码更容易更改的要求直接相关。无论您是否是一名极限编程实践者，这种编写代码的方法都是有意义的。<a href=\"http://www.amazon.com/gp/product/0321278658\">http://www.amazon.com/gp/product/0321278658</a></p>\n<p>参考文献：</p>\n<ul>\n<li><a href=\"https://www.artima.com/weblogs/viewpost.jsp?thread=331531\">The Principles of Good Programming</a></li>\n</ul>","frontmatter":{"title":"编程原则","date":"2019年05月04日 17:40:00","description":"虽然老生常谈，但是十分有用。"}},"previous":{"fields":{"slug":"/aspect-oriented-programming/"},"frontmatter":{"title":"面向切面编程"}},"next":{"fields":{"slug":"/java-garbage-collection/"},"frontmatter":{"title":"Java 垃圾收集器"}}},"pageContext":{"id":"d3a8b803-b5e0-5902-9b7b-c46c25d277b2","previousPostId":"37d5d7d1-e146-5cc4-98e6-a442712e83a9","nextPostId":"98cae048-b39d-55dd-944a-e65806caf641"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}