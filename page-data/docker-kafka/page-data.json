{"componentChunkName":"component---src-templates-blog-post-js","path":"/docker-kafka/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"0144002a-aa01-535b-ba8f-0afc1a048910","excerpt":"使用 Docker 搭建 Kafka 服务端是一个相对简单的过程，因为 Docker 提供了现成的镜像来简化部署。以下是一个基本步骤指南，帮助在本地环境中使用 Docker 来搭建一个简单的 Kaf…","html":"<p>使用 Docker 搭建 Kafka 服务端是一个相对简单的过程，因为 Docker 提供了现成的镜像来简化部署。以下是一个基本步骤指南，帮助在本地环境中使用 Docker 来搭建一个简单的 Kafka 服务端，包括 ZooKeeper（Kafka 需要它来进行协调）。</p>\n<h3 id=\"步骤-1-安装-docker\" style=\"position:relative;\"><a href=\"#%E6%AD%A5%E9%AA%A4-1-%E5%AE%89%E8%A3%85-docker\" aria-label=\"步骤 1 安装 docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>步骤 1: 安装 Docker</h3>\n<p>确保系统上已经安装了 Docker。如果还没有安装，请访问 <a href=\"https://www.docker.com/\">Docker官网</a> 并根据操作系统的不同下载和安装适合的版本。</p>\n<h3 id=\"步骤-2-拉取-kafka-和-zookeeper-的-docker-镜像\" style=\"position:relative;\"><a href=\"#%E6%AD%A5%E9%AA%A4-2-%E6%8B%89%E5%8F%96-kafka-%E5%92%8C-zookeeper-%E7%9A%84-docker-%E9%95%9C%E5%83%8F\" aria-label=\"步骤 2 拉取 kafka 和 zookeeper 的 docker 镜像 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>步骤 2: 拉取 Kafka 和 ZooKeeper 的 Docker 镜像</h3>\n<p>打开命令行工具，执行以下命令来拉取最新的 Kafka 和 ZooKeeper 镜像：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull wurstmeister/zookeeper\r\n<span class=\"token function\">docker</span> pull wurstmeister/kafka</code></pre></div>\n<p><code class=\"language-text\">wurstmeister/zookeeper</code> 和 <code class=\"language-text\">wurstmeister/kafka</code> 是常用的 Docker 镜像，它们配置好了所有必要的环境变量和启动脚本，以方便快速启动 Kafka 和 ZooKeeper。</p>\n<h3 id=\"步骤-3-创建-docker-网络\" style=\"position:relative;\"><a href=\"#%E6%AD%A5%E9%AA%A4-3-%E5%88%9B%E5%BB%BA-docker-%E7%BD%91%E7%BB%9C\" aria-label=\"步骤 3 创建 docker 网络 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>步骤 3: 创建 Docker 网络</h3>\n<p>为了让 Kafka 和 ZooKeeper 容器能够互相通信，创建一个新的 Docker 网络：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> network create kafka-network</code></pre></div>\n<h3 id=\"步骤-4-启动-zookeeper-容器\" style=\"position:relative;\"><a href=\"#%E6%AD%A5%E9%AA%A4-4-%E5%90%AF%E5%8A%A8-zookeeper-%E5%AE%B9%E5%99%A8\" aria-label=\"步骤 4 启动 zookeeper 容器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>步骤 4: 启动 ZooKeeper 容器</h3>\n<p>使用以下命令启动 ZooKeeper 容器，并将其连接到刚才创建的网络：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> zookeeper <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">--network</span> kafka-network <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">ZOOKEEPER_CLIENT_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span> <span class=\"token punctuation\">\\</span>\r\n  wurstmeister/zookeeper</code></pre></div>\n<h3 id=\"步骤-5-启动-kafka-容器\" style=\"position:relative;\"><a href=\"#%E6%AD%A5%E9%AA%A4-5-%E5%90%AF%E5%8A%A8-kafka-%E5%AE%B9%E5%99%A8\" aria-label=\"步骤 5 启动 kafka 容器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>步骤 5: 启动 Kafka 容器</h3>\n<p>接下来，启动 Kafka 容器并连接到同一个 Docker 网络。需要指定一些环境变量来告诉 Kafka 如何找到 ZooKeeper：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> kafka <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">--network</span> kafka-network <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9092</span>:9092 <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_ZOOKEEPER_CONNECT</span><span class=\"token operator\">=</span>zookeeper:2181 <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_ADVERTISED_LISTENERS</span><span class=\"token operator\">=</span>PLAINTEXT://localhost:9092 <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\r\n  wurstmeister/kafka</code></pre></div>\n<p>这里我们做了以下几件事：</p>\n<ul>\n<li><code class=\"language-text\">-p 9092:9092</code> 将容器的 9092 端口映射到主机的 9092 端口，以便可以从主机访问 Kafka。</li>\n<li><code class=\"language-text\">-e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</code> 设置了 Kafka 连接到 ZooKeeper 的地址。</li>\n<li><code class=\"language-text\">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092</code> 告诉 Kafka 它应该对外广播的监听地址，这对于外部客户端连接非常重要。</li>\n<li><code class=\"language-text\">-e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1</code> 设置了偏移量主题的复制因子为 1。在单节点环境中，这是必需的，因为它默认是 3，而在单节点环境下无法满足这个要求。</li>\n</ul>\n<h3 id=\"步骤-6-测试-kafka-服务\" style=\"position:relative;\"><a href=\"#%E6%AD%A5%E9%AA%A4-6-%E6%B5%8B%E8%AF%95-kafka-%E6%9C%8D%E5%8A%A1\" aria-label=\"步骤 6 测试 kafka 服务 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>步骤 6: 测试 Kafka 服务</h3>\n<p>为了测试 Kafka 是否正确运行，可以创建一个测试 topic 并发送一条消息。首先，进入 Kafka 容器内部：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka /bin/bash</code></pre></div>\n<p>然后，在容器内使用 Kafka 自带的命令行工具来创建 topic 和生产/消费消息。例如，创建一个名为 <code class=\"language-text\">test</code> 的 topic：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kafka-topics.sh <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> <span class=\"token builtin class-name\">test</span> --bootstrap-server localhost:9092 --replication-factor <span class=\"token number\">1</span> <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">1</span></code></pre></div>\n<p>发送一条消息到这个 topic：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, Kafka\"</span> <span class=\"token operator\">|</span> kafka-console-producer.sh --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> <span class=\"token builtin class-name\">test</span></code></pre></div>\n<p>最后，从这个 topic 中消费消息：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kafka-console-consumer.sh --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> <span class=\"token builtin class-name\">test</span> --from-beginning</code></pre></div>\n<p>应该能看到之前发送的消息 “Hello, Kafka”。</p>\n<h3 id=\"注意事项\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\" aria-label=\"注意事项 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事项</h3>\n<ul>\n<li>如果在非 Linux 系统上运行 Docker（比如 Windows 或 Mac），请确保将 <code class=\"language-text\">localhost</code> 替换为 Docker 主机的实际 IP 地址，特别是在设置 <code class=\"language-text\">KAFKA_ADVERTISED_LISTENERS</code> 环境变量时。</li>\n<li>在生产环境中，应该配置更多的选项来确保 Kafka 的高可用性和安全性，比如设置多个副本、启用 SSL/TLS 加密等。</li>\n</ul>\n<p>当在使用 Docker 容器运行 Kafka 时，遇到 <code class=\"language-text\">ERROR: Missing environment variable KAFKA_LISTENERS. Must be specified when using KAFKA_ADVERTISED_LISTENERS</code> 这样的错误信息，意味着必须同时指定 <code class=\"language-text\">KAFKA_LISTENERS</code> 和 <code class=\"language-text\">KAFKA_ADVERTISED_LISTENERS</code> 环境变量。<code class=\"language-text\">KAFKA_LISTENERS</code> 指定了 Kafka broker 监听的协议和端口，而 <code class=\"language-text\">KAFKA_ADVERTISED_LISTENERS</code> 则指定了对外广播的地址，用于客户端连接。</p>\n<p>在单机环境中，如果想要从主机（即运行 Docker 的机器）访问 Kafka 容器，可以按照以下方式设置这两个环境变量：</p>\n<h3 id=\"解决方案\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" aria-label=\"解决方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决方案</h3>\n<h4 id=\"修改启动命令\" style=\"position:relative;\"><a href=\"#%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4\" aria-label=\"修改启动命令 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>修改启动命令</h4>\n<p>更新 Kafka 容器启动命令，添加 <code class=\"language-text\">KAFKA_LISTENERS</code> 环境变量，并确保 <code class=\"language-text\">KAFKA_ADVERTISED_LISTENERS</code> 正确指向了可以被外部访问的地址。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> kafka <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">--network</span> kafka-network <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9092</span>:9092 <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_ZOOKEEPER_CONNECT</span><span class=\"token operator\">=</span>zookeeper:2181 <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_ADVERTISED_LISTENERS</span><span class=\"token operator\">=</span>PLAINTEXT://localhost:9092 <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_LISTENERS</span><span class=\"token operator\">=</span>PLAINTEXT://0.0.0.0:9092 <span class=\"token punctuation\">\\</span>\r\n  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">\\</span>\r\n  wurstmeister/kafka</code></pre></div>\n<p>在这里：</p>\n<ul>\n<li><code class=\"language-text\">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092</code>：告诉 Kafka 在所有网络接口上监听 9092 端口。</li>\n<li><code class=\"language-text\">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092</code>：告诉 Kafka 对外广播 <code class=\"language-text\">localhost:9092</code> 作为其连接地址。如果是从其他机器访问这个 Kafka 实例，需要将 <code class=\"language-text\">localhost</code> 替换为实际的 IP 地址或可解析的主机名。</li>\n</ul>\n<h4 id=\"使用-docker-compose-推荐\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-docker-compose-%E6%8E%A8%E8%8D%90\" aria-label=\"使用 docker compose 推荐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 Docker Compose (推荐)</h4>\n<p>如果使用 Docker Compose 来管理多个服务（如 Kafka 和 ZooKeeper），可以在 <code class=\"language-text\">docker-compose.yml</code> 文件中定义这些环境变量。下面是一个示例配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>\r\n\r\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">zookeeper</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wurstmeister/zookeeper\r\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"2181:2181\"</span>\r\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token key atrule\">ZOOKEEPER_CLIENT_PORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2181</span>\r\n\r\n  <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> wurstmeister/kafka\r\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> zookeeper\r\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9092:9092\"</span>\r\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token key atrule\">KAFKA_ZOOKEEPER_CONNECT</span><span class=\"token punctuation\">:</span> zookeeper<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span>\r\n      <span class=\"token key atrule\">KAFKA_ADVERTISED_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span>\r\n      <span class=\"token key atrule\">KAFKA_LISTENERS</span><span class=\"token punctuation\">:</span> PLAINTEXT<span class=\"token punctuation\">:</span>//0.0.0.0<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span>\r\n      <span class=\"token key atrule\">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre></div>\n<p>在这个 <code class=\"language-text\">docker-compose.yml</code> 文件中，我们同样设置了 <code class=\"language-text\">KAFKA_LISTENERS</code> 和 <code class=\"language-text\">KAFKA_ADVERTISED_LISTENERS</code>，并且通过 <code class=\"language-text\">depends_on</code> 确保 Kafka 服务在 ZooKeeper 启动之后再启动。</p>\n<h3 id=\"注意事项-1\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\" aria-label=\"注意事项 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事项</h3>\n<ul>\n<li><strong>网络模式</strong>：如果使用的是自定义 Docker 网络（如上面的例子中的 <code class=\"language-text\">kafka-network</code>），确保 <code class=\"language-text\">KAFKA_ADVERTISED_LISTENERS</code> 中的地址是能够从客户端访问的。</li>\n<li><strong>多节点集群</strong>：如果正在搭建一个多节点的 Kafka 集群，每个节点的 <code class=\"language-text\">KAFKA_ADVERTISED_LISTENERS</code> 应该指向该节点的实际 IP 地址或可解析的主机名，而不是 <code class=\"language-text\">localhost</code>。</li>\n<li><strong>安全性和认证</strong>：在生产环境中，考虑使用 SSL/TLS 加密通信，并配置适当的认证机制来增强安全性。</li>\n</ul>\n<h3 id=\"测试\" style=\"position:relative;\"><a href=\"#%E6%B5%8B%E8%AF%95\" aria-label=\"测试 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>测试</h3>\n<p>启动 Kafka 和 ZooKeeper 服务后，可以通过以下命令测试 Kafka 是否正常工作：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 创建一个测试 topic</span>\r\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-topics.sh <span class=\"token parameter variable\">--create</span> <span class=\"token parameter variable\">--topic</span> <span class=\"token builtin class-name\">test</span> --bootstrap-server localhost:9092 --replication-factor <span class=\"token number\">1</span> <span class=\"token parameter variable\">--partitions</span> <span class=\"token number\">1</span>\r\n\r\n<span class=\"token comment\"># 发送一条消息到 topic</span>\r\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, Kafka\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-i</span> kafka kafka-console-producer.sh --broker-list localhost:9092 <span class=\"token parameter variable\">--topic</span> <span class=\"token builtin class-name\">test</span>\r\n\r\n<span class=\"token comment\"># 从 topic 中消费消息</span>\r\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> kafka kafka-console-consumer.sh --bootstrap-server localhost:9092 <span class=\"token parameter variable\">--topic</span> <span class=\"token builtin class-name\">test</span> --from-beginning</code></pre></div>\n<p>应该能看到之前发送的消息 “Hello, Kafka”。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E6%AD%A5%E9%AA%A4-1-%E5%AE%89%E8%A3%85-docker\">步骤 1: 安装 Docker</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%AD%A5%E9%AA%A4-2-%E6%8B%89%E5%8F%96-kafka-%E5%92%8C-zookeeper-%E7%9A%84-docker-%E9%95%9C%E5%83%8F\">步骤 2: 拉取 Kafka 和 ZooKeeper 的 Docker 镜像</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%AD%A5%E9%AA%A4-3-%E5%88%9B%E5%BB%BA-docker-%E7%BD%91%E7%BB%9C\">步骤 3: 创建 Docker 网络</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%AD%A5%E9%AA%A4-4-%E5%90%AF%E5%8A%A8-zookeeper-%E5%AE%B9%E5%99%A8\">步骤 4: 启动 ZooKeeper 容器</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%AD%A5%E9%AA%A4-5-%E5%90%AF%E5%8A%A8-kafka-%E5%AE%B9%E5%99%A8\">步骤 5: 启动 Kafka 容器</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%AD%A5%E9%AA%A4-6-%E6%B5%8B%E8%AF%95-kafka-%E6%9C%8D%E5%8A%A1\">步骤 6: 测试 Kafka 服务</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">解决方案</a></p>\n<ul>\n<li><a href=\"#%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4\">修改启动命令</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-docker-compose-%E6%8E%A8%E8%8D%90\">使用 Docker Compose (推荐)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\">注意事项</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%B5%8B%E8%AF%95\">测试</a></p>\n</li>\n</ul>","frontmatter":{"title":"使用 Docker 搭建 Kafka 服务端","tags":["coding"],"description":"帮助在本地环境中使用 Docker 来搭建一个简单的 Kafka 服务端，包括 ZooKeeper。","date":"2025-01-06"}}},"pageContext":{"slug":"/docker-kafka","previous":{"fields":{"slug":"/spring-kafka-demo"},"frontmatter":{"title":"Spring-kafka简单使用示例","tags":["coding"],"slug":"/spring-kafka-demo"}},"next":{"fields":{"slug":"/mono-and-flux"},"frontmatter":{"title":"Java 中的 Mono 和 Flux 的详细介绍及使用场景","tags":["coding"],"slug":"/mono-and-flux"}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}