{"componentChunkName":"component---src-templates-blog-post-js","path":"/spring-application-event/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"3226d45a-3f2b-5052-9137-ad17c0063871","excerpt":"一、原理 1. 事件驱动模型 Spring的是基于观察者模式（也称为发布 - 订阅模式）实现的事件驱动模型。在这个模型中，有事件源（发布事件的对象）、事件（及其子类）和事件监听器（订阅事件并处理的对…","html":"<h2 id=\"一原理\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E5%8E%9F%E7%90%86\" aria-label=\"一原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一、原理</h2>\n<h3 id=\"1-事件驱动模型\" style=\"position:relative;\"><a href=\"#1-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B\" aria-label=\"1 事件驱动模型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 事件驱动模型</h3>\n<ul>\n<li>Spring的<code class=\"language-text\">ApplicationEvent</code>是基于观察者模式（也称为发布 - 订阅模式）实现的事件驱动模型。在这个模型中，有事件源（发布事件的对象）、事件（<code class=\"language-text\">ApplicationEvent</code>及其子类）和事件监听器（订阅事件并处理的对象）。</li>\n<li>当事件源产生一个事件后，它会将事件发布到应用程序的上下文中。Spring容器会负责将这个事件通知给所有注册的监听器。</li>\n</ul>\n<h3 id=\"2-spring容器的角色\" style=\"position:relative;\"><a href=\"#2-spring%E5%AE%B9%E5%99%A8%E7%9A%84%E8%A7%92%E8%89%B2\" aria-label=\"2 spring容器的角色 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Spring容器的角色</h3>\n<ul>\n<li>Spring容器在这个过程中扮演了重要的角色。它管理着所有的<code class=\"language-text\">Bean</code>，包括事件源和事件监听器。当一个<code class=\"language-text\">ApplicationEvent</code>被发布时，Spring容器会从它管理的<code class=\"language-text\">Bean</code>中查找所有实现了<code class=\"language-text\">ApplicationListener</code>接口并且关注该事件类型的监听器。</li>\n<li>容器通过反射机制调用这些监听器的<code class=\"language-text\">onApplicationEvent</code>方法，并将事件对象作为参数传递进去，从而实现事件的处理。</li>\n</ul>\n<h3 id=\"3-事件继承体系\" style=\"position:relative;\"><a href=\"#3-%E4%BA%8B%E4%BB%B6%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB\" aria-label=\"3 事件继承体系 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 事件继承体系</h3>\n<ul>\n<li><code class=\"language-text\">ApplicationEvent</code>是所有Spring应用程序事件的基类。它继承自<code class=\"language-text\">java.util.EventObject</code>，这意味着它可以携带事件源对象的引用。</li>\n<li>例如，Spring提供了一些常见的子类，如<code class=\"language-text\">ContextRefreshedEvent</code>（在Spring容器初始化或者刷新时发布）、<code class=\"language-text\">ContextStartedEvent</code>（在Spring容器启动时发布）等。用户也可以创建自己的事件类，继承自<code class=\"language-text\">ApplicationEvent</code>，用于在应用程序特定的业务场景中发布和处理事件。</li>\n</ul>\n<h2 id=\"二使用方法\" style=\"position:relative;\"><a href=\"#%E4%BA%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\" aria-label=\"二使用方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二、使用方法</h2>\n<h3 id=\"1-定义事件\" style=\"position:relative;\"><a href=\"#1-%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\" aria-label=\"1 定义事件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 定义事件</h3>\n<ul>\n<li>创建一个自定义事件类，继承自<code class=\"language-text\">ApplicationEvent</code>。例如，假设我们有一个用户注册的场景，我们可以定义一个<code class=\"language-text\">UserRegisteredEvent</code>。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationEvent</span></span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRegisteredEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRegisteredEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> username<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>在这个事件类中，我们可以定义一些属性来携带与事件相关的信息。这里我们有一个<code class=\"language-text\">username</code>属性，用于存储注册用户的用户名。事件类的构造函数通常需要调用父类的构造函数，将事件源对象传递进去。</li>\n</ul>\n<h3 id=\"2-定义事件监听器\" style=\"position:relative;\"><a href=\"#2-%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8\" aria-label=\"2 定义事件监听器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 定义事件监听器</h3>\n<ul>\n<li>创建一个监听器类，实现<code class=\"language-text\">ApplicationListener</code>接口。接口中定义了<code class=\"language-text\">onApplicationEvent</code>方法，用于处理接收到的事件。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationListener</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserRegisteredEvent</span></span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRegisteredEventListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserRegisteredEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token annotation punctuation\">@Override</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRegisteredEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户 \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 已注册，发送欢迎邮件...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// 这里可以添加发送邮件等实际业务逻辑</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>在<code class=\"language-text\">onApplicationEvent</code>方法中，我们可以编写处理事件的逻辑。在这个例子中，当接收到<code class=\"language-text\">UserRegisteredEvent</code>时，我们打印一条消息表示要发送欢迎邮件，实际应用中可以在这里调用邮件发送服务等操作。</li>\n</ul>\n<h3 id=\"3-配置事件发布和监听\" style=\"position:relative;\"><a href=\"#3-%E9%85%8D%E7%BD%AE%E4%BA%8B%E4%BB%B6%E5%8F%91%E5%B8%83%E5%92%8C%E7%9B%91%E5%90%AC\" aria-label=\"3 配置事件发布和监听 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 配置事件发布和监听</h3>\n<ul>\n<li>在Spring配置文件（如<code class=\"language-text\">applicationContext.xml</code>）或者通过Java配置类中，将事件监听器注册为<code class=\"language-text\">Bean</code>，并且确保事件发布的地方能够获取到<code class=\"language-text\">ApplicationContext</code>来发布事件。</li>\n<li><strong>基于XML配置</strong>\n<ul>\n<li>注册监听器：</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userRegisteredEventListener<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.UserRegisteredEventListener<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<ul>\n<li>在代码中发布事件（假设我们有一个用户注册服务类）：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlConfiguration</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserRegisteredEvent</span></span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRegistrationService</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRegistrationService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// 用户注册逻辑</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户 \"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token string\">\" 注册成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// 发布用户注册事件</span>\r\n        <span class=\"token class-name\">UserRegisteredEvent</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRegisteredEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>基于Java配置</strong>\n<ul>\n<li>首先，定义一个配置类：</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserRegisteredEventListener</span></span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token annotation punctuation\">@Configuration</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token annotation punctuation\">@Bean</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRegisteredEventListener</span> <span class=\"token function\">userRegisteredEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRegisteredEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>然后在事件发布的地方（类似上面的<code class=\"language-text\">UserRegistrationService</code>）获取<code class=\"language-text\">ApplicationContext</code>并发布事件，不过获取<code class=\"language-text\">ApplicationContext</code>的方式可能因应用架构不同而有所不同，例如可以通过实现<code class=\"language-text\">ApplicationContextAware</code>接口来获取。</li>\n</ul>\n<p>通过以上步骤，就可以在Spring应用程序中使用<code class=\"language-text\">ApplicationEvent</code>来实现事件驱动的编程，使得不同组件之间能够以松耦合的方式进行通信和协作。这种方式在处理系统中的异步操作、状态变化通知等场景中非常有用。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E4%B8%80%E5%8E%9F%E7%90%86\">一、原理</a></p>\n<ul>\n<li><a href=\"#1-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B\">1. 事件驱动模型</a></li>\n<li><a href=\"#2-spring%E5%AE%B9%E5%99%A8%E7%9A%84%E8%A7%92%E8%89%B2\">2. Spring容器的角色</a></li>\n<li><a href=\"#3-%E4%BA%8B%E4%BB%B6%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB\">3. 事件继承体系</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%BA%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">二、使用方法</a></p>\n<ul>\n<li><a href=\"#1-%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\">1. 定义事件</a></li>\n<li><a href=\"#2-%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8\">2. 定义事件监听器</a></li>\n<li><a href=\"#3-%E9%85%8D%E7%BD%AE%E4%BA%8B%E4%BB%B6%E5%8F%91%E5%B8%83%E5%92%8C%E7%9B%91%E5%90%AC\">3. 配置事件发布和监听</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Spring中ApplicationEvent的原理和使用方法","tags":["coding"],"description":"在Spring应用程序中使用`ApplicationEvent`来实现事件驱动的编程，使得不同组件之间能够以松耦合的方式进行通信和协作。","date":"2024-12-29"}}},"pageContext":{"slug":"/spring-application-event","previous":{"fields":{"slug":"/python_requirements"},"frontmatter":{"title":"为Python项目生成requirements.txt","tags":["coding"],"slug":"/python_requirements"}},"next":{"fields":{"slug":"/spring-kafka-demo"},"frontmatter":{"title":"Spring-kafka简单使用示例","tags":["coding"],"slug":"/spring-kafka-demo"}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}