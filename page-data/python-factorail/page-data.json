{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-factorail/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Yang's Blog"}},"markdownRemark":{"id":"3fd432d9-990f-5b3e-9030-fc2f74280333","excerpt":"递归简单说来就是调用自身的意思。 来看一个幽默的定义： recursion \\ri-'k&r-zh&n\\ n : see recursion （递归[名词]：见递归） 一、计算n的阶乘 n的阶乘定义为 n \\* (n-1) \\* (n-2) \\* ... \\* 1。 使用循环实现 首先，把数字n赋值给result…","html":"<p><strong>递归</strong>简单说来就是调用自身的意思。</p>\n<p>来看一个幽默的定义：</p>\n<blockquote>\n<p><strong>recursion</strong> <em>\\ri-'k&#x26;r-zh&#x26;n\\</em> n : see recursion</p>\n</blockquote>\n<p>（递归[名词]：见递归）</p>\n<h2>一、计算n的阶乘</h2>\n<blockquote>\n<p><code>n</code>的阶乘定义为 <code>n \\* (n-1) \\* (n-2) \\* ... \\* 1</code>。</p>\n</blockquote>\n<p><strong>使用循环实现</strong></p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">def factorial(n):\n  result = n\n  for i in range(1, n):\n    result *= i #依次与1至n-1的数相乘\n  return result</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>首先，把数字<code>n</code>赋值给<code>result</code>，然后<code>result</code>依次与<code>1</code>～<code>n-1</code>的数相乘，最后返回结果。</p>\n</blockquote>\n<p>阶乘的数学定义：</p>\n<ul>\n<li>1的阶乘是1；</li>\n<li>大于1的数n的阶乘是n乘n-1的阶乘。</li>\n</ul>\n<p><strong>使用递归实现</strong></p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">def factorial(n):\n  if n == 1:\n    return 1\n  else:\n    return n * factorial(n-1)</code>\n        </deckgo-highlight-code>\n<h2>二、计算幂</h2>\n<p>python的内建函数 <code>pow(x, n)</code> 或者 <code>**</code> 运算符可以实现幂的计算。<code>pow(x, n)</code> 是 <code>x</code> 自乘 <code>n-1</code>次，例如<code>pow(2, 3)</code>是<code>2</code>乘以自身两次：<code>2 * 2 * 2 = 8</code>。</p>\n<p><strong>使用循环实现</strong></p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">def power(x, n):\n  result = 1\n  for i in range(n):\n    result *= x\n  return result</code>\n        </deckgo-highlight-code>\n<p><strong>使用递归实现</strong></p>\n<ul>\n<li>对于任意数字<code>x</code>来说，<code>power(x, 0)</code>是<code>1</code>；</li>\n<li>对于任何大于<code>0</code>的数来说，<code>power(x, n)</code>是<code>x</code>乘以<code>(x, n-1)</code>的结果。</li>\n</ul>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">def power(x, n):\n  if n == 0:\n    return 1\n  else:\n    return x * power(x, n-1)</code>\n        </deckgo-highlight-code>","frontmatter":{"title":"Python 两个经典递归：阶乘和幂","date":"2017年04月09日 04:49:33","description":"本文 Python 两个经典递归：阶乘和幂"}},"previous":{"fields":{"slug":"/javascript-base-knowleges/"},"frontmatter":{"title":"JavaScript基础"}},"next":{"fields":{"slug":"/whose-face-is-lit-by-the-firework/"},"frontmatter":{"title":"梦回磁带机时代"}}},"pageContext":{"id":"3fd432d9-990f-5b3e-9030-fc2f74280333","previousPostId":"d3d7ce3e-654d-52a6-87fd-d36a3ac30193","nextPostId":"c0192617-b021-543b-a76a-12c1ba87e538"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}