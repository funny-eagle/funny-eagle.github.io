{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-factorail/","result":{"data":{"site":{"siteMetadata":{"title":"Nocoder.Org"}},"markdownRemark":{"id":"3fd432d9-990f-5b3e-9030-fc2f74280333","excerpt":"递归简单说来就是调用自身的意思。 来看一个幽默的定义： recursion \\ri-'k&r-zh&n\\ n : see recursion （递归[名词]：见递归） ##一、计算n的阶乘 的阶乘定义为 。 使用循环实现 首先，把数字赋值给，然后依次与～的数相乘，最后返回结果。 阶乘的数学定义： 1的阶乘是1； 大于…","html":"<p><strong>递归</strong>简单说来就是调用自身的意思。</p>\n<p>来看一个幽默的定义：</p>\n<blockquote>\n<p><strong>recursion</strong> <em>\\ri-'k&#x26;r-zh&#x26;n\\</em> n : see recursion</p>\n</blockquote>\n<p>（递归[名词]：见递归）</p>\n<p>##一、计算n的阶乘</p>\n<blockquote>\n<p><code class=\"language-text\">n</code>的阶乘定义为 <code class=\"language-text\">n \\* (n-1) \\* (n-2) \\* ... \\* 1</code>。</p>\n</blockquote>\n<p><strong>使用循环实现</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  result <span class=\"token operator\">=</span> n\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">*=</span> i <span class=\"token comment\">#依次与1至n-1的数相乘</span>\n  <span class=\"token keyword\">return</span> result</code></pre></div>\n<blockquote>\n<p>首先，把数字<code class=\"language-text\">n</code>赋值给<code class=\"language-text\">result</code>，然后<code class=\"language-text\">result</code>依次与<code class=\"language-text\">1</code>～<code class=\"language-text\">n-1</code>的数相乘，最后返回结果。</p>\n</blockquote>\n<p>阶乘的数学定义：</p>\n<ul>\n<li>1的阶乘是1；</li>\n<li>大于1的数n的阶乘是n乘n-1的阶乘。</li>\n</ul>\n<p><strong>使用递归实现</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> factorial<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>##二、计算幂</p>\n<p>python的内建函数 <code class=\"language-text\">pow(x, n)</code> 或者 <code class=\"language-text\">**</code> 运算符可以实现幂的计算。<code class=\"language-text\">pow(x, n)</code> 是 <code class=\"language-text\">x</code> 自乘 <code class=\"language-text\">n-1</code>次，例如<code class=\"language-text\">pow(2, 3)</code>是<code class=\"language-text\">2</code>乘以自身两次：<code class=\"language-text\">2 * 2 * 2 = 8</code>。</p>\n<p><strong>使用循环实现</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  result <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">*=</span> x\n  <span class=\"token keyword\">return</span> result</code></pre></div>\n<p><strong>使用递归实现</strong></p>\n<ul>\n<li>对于任意数字<code class=\"language-text\">x</code>来说，<code class=\"language-text\">power(x, 0)</code>是<code class=\"language-text\">1</code>；</li>\n<li>对于任何大于<code class=\"language-text\">0</code>的数来说，<code class=\"language-text\">power(x, n)</code>是<code class=\"language-text\">x</code>乘以<code class=\"language-text\">(x, n-1)</code>的结果。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Python 两个经典递归：阶乘和幂","date":"2017年04月09日","description":null}},"previous":{"fields":{"slug":"/linux-install-jdk/"},"frontmatter":{"title":"linux下安装jdk"}},"next":{"fields":{"slug":"/whose-face-is-lit-by-the-firework/"},"frontmatter":{"title":"梦回磁带机"}}},"pageContext":{"id":"3fd432d9-990f-5b3e-9030-fc2f74280333","previousPostId":"faa7c54c-cf2d-5b1f-beb8-4abdebeb8bad","nextPostId":"c0192617-b021-543b-a76a-12c1ba87e538"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}