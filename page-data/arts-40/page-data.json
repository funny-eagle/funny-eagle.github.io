{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-40/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"c9142104-16d4-50ca-a9d1-ae90196a0903","excerpt":"Algorithm: 561. Array Partition I, 627. Swap Salary Tips: filebeat+kafka+elk 实现nginx access log 实时监…","html":"<ul>\n<li>Algorithm: 561. Array Partition I, 627. Swap Salary</li>\n<li>Tips: filebeat+kafka+elk 实现nginx access log 实时监控分析</li>\n</ul>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<h3 id=\"561-array-partition-i\" style=\"position:relative;\"><a href=\"#561-array-partition-i\" aria-label=\"561 array partition i permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>561. Array Partition I</h3>\n<p>Given an array of <strong>2n</strong> integers, your task is to group these integers into <strong>n</strong> pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.</p>\n<p><strong>Example 1:</strong></p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">Input: [1,4,3,2]\n\nOutput: 4\nExplanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</code>\n        </deckgo-highlight-code>\n<p><strong>Note:</strong></p>\n<ol>\n<li>\n<p><strong>n</strong> is a positive integer, which is in the range of [1, 10000].</p>\n</li>\n<li>\n<p>All the integers in the array will be in the range of [-10000, 10000].</p>\n</li>\n</ol>\n<p><strong>Solution</strong></p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\nimport java.util.Arrays;\n\n/**\n * 561. Array Partition I\n *\n * https://leetcode.com/problems/array-partition-i/\n *\n * @author jason\n * @date 2019/6/17.\n */\npublic class ArrayPairSum {\n    public static int arrayPairSum(int[] nums){\n        Arrays.sort(nums);\n        int max = 0;\n        for (int i = 0; i &lt; nums.length; i+=2) {\n            max += Math.min(nums[i], nums[i+1]);\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = new int[]{3, 2, 4, 1};\n        System.out.println(arrayPairSum(arr));\n    }\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"627-swap-salary\" style=\"position:relative;\"><a href=\"#627-swap-salary\" aria-label=\"627 swap salary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>627. Swap Salary</h3>\n<p>Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.</p>\n<p>Note that you must write a single update statement, DO NOT write any select statement for this problem.</p>\n<p>Example:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>sex</th>\n<th>salary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>A</td>\n<td>m</td>\n<td>2500</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>f</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>C</td>\n<td>m</td>\n<td>5500</td>\n</tr>\n<tr>\n<td>4</td>\n<td>D</td>\n<td>f</td>\n<td>500</td>\n</tr>\n<tr>\n<td>After running your update statement, the above salary table should have the following rows:</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>id</td>\n<td>name</td>\n<td>sex</td>\n<td>salary</td>\n</tr>\n<tr>\n<td>----</td>\n<td>------</td>\n<td>-----</td>\n<td>--------</td>\n</tr>\n<tr>\n<td>1</td>\n<td>A</td>\n<td>f</td>\n<td>2500</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>m</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>C</td>\n<td>f</td>\n<td>5500</td>\n</tr>\n<tr>\n<td>4</td>\n<td>D</td>\n<td>m</td>\n<td>500</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Solution</strong></p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">update salary set sex = (case sex when &#39;m&#39; then &#39;f&#39; when &#39;f&#39; then &#39;m&#39; end)</code>\n        </deckgo-highlight-code>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<p><strong>filebeat+kafka+elk 实现nginx access log 实时监控分析</strong></p>\n<blockquote>\n<p>本文只记录相关的配置和注意事项，不包含安装步骤</p>\n</blockquote>\n<ul>\n<li>\n<p>filebeat 从日志文件读取日志记录，并输出到kafka</p>\n</li>\n<li>\n<p>kafka 消息队列，起缓冲作用</p>\n</li>\n<li>\n<p>logstash 从kafka读取日志消息，进行日志记录的规则过滤，然后保存到elasticsearch</p>\n</li>\n<li>\n<p>elasticsearch 用来存储日志记录</p>\n</li>\n<li>\n<p>kibana 通过读取elasticsearch中的记录，生成各种视图以实时监控分析访问日志</p>\n</li>\n</ul>\n<p>为了方便分析历史的access日志，我没有对access log 的格式进行修改，默认情况下，nginx的log格式如下：</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">log_format  main  remote_addr - remote_user [time_local] &quot;request&quot; status body_bytes_sent &quot;http_referer&quot; &quot;http_user_agent&quot; &quot;$http_x_forwarded_for&quot;;</code>\n        </deckgo-highlight-code>\n<p>例如：</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">222.211.162.225 - - [14/Jun/2019:17:15:22 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36&quot;\n\n117.136.62.63 - - [14/Jun/2019:17:15:36 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Linux; Android 9; ONEPLUS A6000) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.67 Mobile Safari/537.36&quot;\n\n117.136.62.63 - - [14/Jun/2019:17:15:56 +0800] &quot;GET /1111 HTTP/1.1&quot; 404 571 &quot;-&quot; &quot;Mozilla/5.0 (Linux; Android 9; ONEPLUS A6000) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.67 Mobile Safari/537.36&quot;\n\n180.163.220.4 - - [14/Jun/2019:17:21:13 +0800] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Linux; U; Android 8.1.0; zh-CN; EML-AL00 Build/HUAWEIEML-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/11.9.4.974 UWS/2.13.1.48 Mobile Safari/537.36 AliApp(DingTalk/4.5.11) com.alibaba.android.rimet/10487439 Channel/227200 language/zh-CN&quot;\n</code>\n        </deckgo-highlight-code>\n<p>配置步骤</p>\n<ol>\n<li>\n<p>首先配置filebeat的输入输出，添加自定义字段<code>fields.log_topic</code>，为不同的access log 创建不同的topic</p>\n<deckgo-highlight-code language=\"yaml\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\"> filebeat.prospectors:\n\n- type: log\n\nenabled: true\n\nfields:\n\n    log_topic: nginx-access-log\n\npaths:\n\n- /usr/local/nginx/logs/access.log\n\noutput.kafka:\n\n    hosts: [&quot;127.0.0.1:9092&quot;]\n\n    topic: &#39;%{[fields.log_topic]}&#39;\n\n    partition.round_robin:\n\n        reachable_only: false\n\n    required_acks: 1\n\n    compression: gzip\n\n    max_message_bytes: 100000000</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>配置 logstash</p>\n</li>\n</ol>\n<p>​    <code>input</code>: logstash作为消费端从kafka读取记录，指定topic，可以指定多个topic。</p>\n<p>​    <code>filter</code>: 数据经过<code>filter</code>，先将message 解析成json格式，根据自定义的fields.log_topic字段判断是否是对应topic中的消息，然后用grok表达式将message中的各个字段匹配出来，使用access log 中的时间替换@timestamp，然后将message字段移除。</p>\n<p>​    <code>output</code>: 根据自定义的fields.log_topic字段判断是否是对应topic中的消息，如果是，则将数据写入elasticsearch对应的index中。</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">input {\n\n  kafka{\n\n    bootstrap_servers =&gt; &quot;47.106.130.196:9092&quot;\n\n    consumer_threads =&gt; 2\n\n    topics =&gt; [&quot;nginx-access-log&quot;]\n\n  }\n\n}\n\nfilter {\n\n    json {\n\n    \tsource =&gt; &quot;message&quot;\n\n  \t}\n\n\t\tif fields == &quot;nginx-access-log&quot; {\n\n      \tgrok {\n\n      \t\tmatch =&gt; {\n\n                    &quot;message&quot; =&gt; &quot;%{IP:remote_addr} -%SER:remote_user} [%{HTTPDATE:time_local}]&quot;%{WORD:method} DATA:request_url} HTTP/{NUMBER:http_version}&quot; %UMBER:status} {NUMBER:body    _bytes_sent}&quot;%ATA:http_referer}&quot; &quot;{DATA:http_user_agent}&quot;&quot;\n\n                }\n\n\t\t\t\t}\n\n\t\t\t\tdate {\n\n                match =&gt; [ &quot;time_local&quot;,&quot;dd/MMM/YYYY:HH:mm:ss Z&quot;]\n\n                target =&gt; &quot;@timestamp&quot;\n\n\t\t\t\t}\n\n\t\t\t\tmutate {\n\n                remove_field =&gt; [&quot;message&quot;]\n\n            }\n\n        }\n\n    }\n\noutput {\n\n        if fields == &quot;nginx-access-log&quot;{\n\n            elasticsearch {\n\n                hosts =&gt; [&quot;http://127.0.0.1:9200&quot;]\n\n                index =&gt; &quot;nginx-access-log-%{+YYYY.MM.dd}&quot;\n\n            }\n\n        }\n\n}  </code>\n        </deckgo-highlight-code>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n<ul>\n<li><a href=\"#561-array-partition-i\">561. Array Partition I</a></li>\n<li><a href=\"#627-swap-salary\">627. Swap Salary</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第 40 周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2019-06-16"}}},"pageContext":{"slug":"/arts-40/","previous":{"fields":{"slug":"/graph-algorithms/"},"frontmatter":{"title":"常用的图算法","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/arts-41/"},"frontmatter":{"title":"ARTS 第 41 周","tags":["coding","arts"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}