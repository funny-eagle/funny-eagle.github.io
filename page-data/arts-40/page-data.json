{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-40/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"c9142104-16d4-50ca-a9d1-ae90196a0903","excerpt":"Algorithm: 561. Array Partition I, 627. Swap Salary Tips: filebeat+kafka+elk 实现nginx access log 实时监…","html":"<ul>\n<li>Algorithm: 561. Array Partition I, 627. Swap Salary</li>\n<li>Tips: filebeat+kafka+elk 实现nginx access log 实时监控分析</li>\n</ul>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<h3 id=\"561-array-partition-i\" style=\"position:relative;\"><a href=\"#561-array-partition-i\" aria-label=\"561 array partition i permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>561. Array Partition I</h3>\n<p>Given an array of <strong>2n</strong> integers, your task is to group these integers into <strong>n</strong> pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.</p>\n<p><strong>Example 1:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: [1,4,3,2]\n\nOutput: 4\nExplanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</code></pre></div>\n<p><strong>Note:</strong></p>\n<ol>\n<li>\n<p><strong>n</strong> is a positive integer, which is in the range of [1, 10000].</p>\n</li>\n<li>\n<p>All the integers in the array will be in the range of [-10000, 10000].</p>\n</li>\n</ol>\n<p><strong>Solution</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 561. Array Partition I\n *\n * https://leetcode.com/problems/array-partition-i/\n *\n * @author jason\n * @date 2019/6/17.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayPairSum</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">arrayPairSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            max <span class=\"token operator\">+=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">arrayPairSum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"627-swap-salary\" style=\"position:relative;\"><a href=\"#627-swap-salary\" aria-label=\"627 swap salary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>627. Swap Salary</h3>\n<p>Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update statement and no intermediate temp table.</p>\n<p>Note that you must write a single update statement, DO NOT write any select statement for this problem.</p>\n<p>Example:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>sex</th>\n<th>salary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>A</td>\n<td>m</td>\n<td>2500</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>f</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>C</td>\n<td>m</td>\n<td>5500</td>\n</tr>\n<tr>\n<td>4</td>\n<td>D</td>\n<td>f</td>\n<td>500</td>\n</tr>\n<tr>\n<td>After running your update statement, the above salary table should have the following rows:</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>id</td>\n<td>name</td>\n<td>sex</td>\n<td>salary</td>\n</tr>\n<tr>\n<td>----</td>\n<td>------</td>\n<td>-----</td>\n<td>--------</td>\n</tr>\n<tr>\n<td>1</td>\n<td>A</td>\n<td>f</td>\n<td>2500</td>\n</tr>\n<tr>\n<td>2</td>\n<td>B</td>\n<td>m</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>3</td>\n<td>C</td>\n<td>f</td>\n<td>5500</td>\n</tr>\n<tr>\n<td>4</td>\n<td>D</td>\n<td>m</td>\n<td>500</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Solution</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">update</span> salary <span class=\"token keyword\">set</span> sex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">case</span> sex <span class=\"token keyword\">when</span> <span class=\"token string\">'m'</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'f'</span> <span class=\"token keyword\">when</span> <span class=\"token string\">'f'</span> <span class=\"token keyword\">then</span> <span class=\"token string\">'m'</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<p><strong>filebeat+kafka+elk 实现nginx access log 实时监控分析</strong></p>\n<blockquote>\n<p>本文只记录相关的配置和注意事项，不包含安装步骤</p>\n</blockquote>\n<ul>\n<li>\n<p>filebeat 从日志文件读取日志记录，并输出到kafka</p>\n</li>\n<li>\n<p>kafka 消息队列，起缓冲作用</p>\n</li>\n<li>\n<p>logstash 从kafka读取日志消息，进行日志记录的规则过滤，然后保存到elasticsearch</p>\n</li>\n<li>\n<p>elasticsearch 用来存储日志记录</p>\n</li>\n<li>\n<p>kibana 通过读取elasticsearch中的记录，生成各种视图以实时监控分析访问日志</p>\n</li>\n</ul>\n<p>为了方便分析历史的access日志，我没有对access log 的格式进行修改，默认情况下，nginx的log格式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">log_format  main  remote_addr - remote_user <span class=\"token punctuation\">[</span>time_local<span class=\"token punctuation\">]</span> <span class=\"token string\">\"request\"</span> status body_bytes_sent <span class=\"token string\">\"http_referer\"</span> <span class=\"token string\">\"http_user_agent\"</span> <span class=\"token string\">\"<span class=\"token variable\">$http_x_forwarded_for</span>\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">222.211</span>.162.225 - - <span class=\"token punctuation\">[</span><span class=\"token number\">14</span>/Jun/2019:17:15:22 +0800<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET / HTTP/1.1\"</span> <span class=\"token number\">304</span> <span class=\"token number\">0</span> <span class=\"token string\">\"-\"</span> <span class=\"token string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36\"</span>\n\n<span class=\"token number\">117.136</span>.62.63 - - <span class=\"token punctuation\">[</span><span class=\"token number\">14</span>/Jun/2019:17:15:36 +0800<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET / HTTP/1.1\"</span> <span class=\"token number\">304</span> <span class=\"token number\">0</span> <span class=\"token string\">\"-\"</span> <span class=\"token string\">\"Mozilla/5.0 (Linux; Android 9; ONEPLUS A6000) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.67 Mobile Safari/537.36\"</span>\n\n<span class=\"token number\">117.136</span>.62.63 - - <span class=\"token punctuation\">[</span><span class=\"token number\">14</span>/Jun/2019:17:15:56 +0800<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET /1111 HTTP/1.1\"</span> <span class=\"token number\">404</span> <span class=\"token number\">571</span> <span class=\"token string\">\"-\"</span> <span class=\"token string\">\"Mozilla/5.0 (Linux; Android 9; ONEPLUS A6000) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.67 Mobile Safari/537.36\"</span>\n\n<span class=\"token number\">180.163</span>.220.4 - - <span class=\"token punctuation\">[</span><span class=\"token number\">14</span>/Jun/2019:17:21:13 +0800<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET / HTTP/1.1\"</span> <span class=\"token number\">200</span> <span class=\"token number\">612</span> <span class=\"token string\">\"-\"</span> <span class=\"token string\">\"Mozilla/5.0 (Linux; U; Android 8.1.0; zh-CN; EML-AL00 Build/HUAWEIEML-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/11.9.4.974 UWS/2.13.1.48 Mobile Safari/537.36 AliApp(DingTalk/4.5.11) com.alibaba.android.rimet/10487439 Channel/227200 language/zh-CN\"</span>\n</code></pre></div>\n<p>配置步骤</p>\n<ol>\n<li>\n<p>首先配置filebeat的输入输出，添加自定义字段<code class=\"language-text\">fields.log_topic</code>，为不同的access log 创建不同的topic</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"> <span class=\"token key atrule\">filebeat.prospectors</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> log\n\n<span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token key atrule\">log_topic</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>access<span class=\"token punctuation\">-</span>log\n\n<span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token punctuation\">-</span> /usr/local/nginx/logs/access.log\n\n<span class=\"token key atrule\">output.kafka</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"127.0.0.1:9092\"</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token key atrule\">topic</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'%{[fields.log_topic]}'</span>\n\n    <span class=\"token key atrule\">partition.round_robin</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token key atrule\">reachable_only</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n    <span class=\"token key atrule\">required_acks</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\n    <span class=\"token key atrule\">compression</span><span class=\"token punctuation\">:</span> gzip\n\n    <span class=\"token key atrule\">max_message_bytes</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100000000</span></code></pre></div>\n</li>\n<li>\n<p>配置 logstash</p>\n</li>\n</ol>\n<p>​    <code class=\"language-text\">input</code>: logstash作为消费端从kafka读取记录，指定topic，可以指定多个topic。</p>\n<p>​    <code class=\"language-text\">filter</code>: 数据经过<code class=\"language-text\">filter</code>，先将message 解析成json格式，根据自定义的fields.log_topic字段判断是否是对应topic中的消息，然后用grok表达式将message中的各个字段匹配出来，使用access log 中的时间替换@timestamp，然后将message字段移除。</p>\n<p>​    <code class=\"language-text\">output</code>: 根据自定义的fields.log_topic字段判断是否是对应topic中的消息，如果是，则将数据写入elasticsearch对应的index中。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">input <span class=\"token punctuation\">{</span>\n\n  kafka<span class=\"token punctuation\">{</span>\n\n    bootstrap_servers => <span class=\"token string\">\"47.106.130.196:9092\"</span>\n\n    consumer_threads => <span class=\"token number\">2</span>\n\n    topics => <span class=\"token punctuation\">[</span><span class=\"token string\">\"nginx-access-log\"</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\nfilter <span class=\"token punctuation\">{</span>\n\n    json <span class=\"token punctuation\">{</span>\n\n    \tsource => <span class=\"token string\">\"message\"</span>\n\n  \t<span class=\"token punctuation\">}</span>\n\n\t\tif fields == <span class=\"token string\">\"nginx-access-log\"</span> <span class=\"token punctuation\">{</span>\n\n      \tgrok <span class=\"token punctuation\">{</span>\n\n      \t\tmatch => <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token string\">\"message\"</span> => <span class=\"token string\">\"%{IP:remote_addr} -%SER:remote_user} [%{HTTPDATE:time_local}]\"</span>%<span class=\"token punctuation\">{</span>WORD<span class=\"token operator\">:</span>method<span class=\"token punctuation\">}</span> DATA<span class=\"token operator\">:</span>request_url<span class=\"token punctuation\">}</span> HTTP/<span class=\"token punctuation\">{</span>NUMBER<span class=\"token operator\">:</span>http_version<span class=\"token punctuation\">}</span><span class=\"token string\">\" %UMBER:status} {NUMBER:body    _bytes_sent}\"</span>%ATA<span class=\"token operator\">:</span>http_referer<span class=\"token punctuation\">}</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">{</span>DATA<span class=\"token operator\">:</span>http_user_agent<span class=\"token punctuation\">}</span><span class=\"token string\">\"\"</span>\n\n                <span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\tdate <span class=\"token punctuation\">{</span>\n\n                match => <span class=\"token punctuation\">[</span> <span class=\"token string\">\"time_local\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dd/MMM/YYYY:HH:mm:ss Z\"</span><span class=\"token punctuation\">]</span>\n\n                target => <span class=\"token string\">\"@timestamp\"</span>\n\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\tmutate <span class=\"token punctuation\">{</span>\n\n                remove_field => <span class=\"token punctuation\">[</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\noutput <span class=\"token punctuation\">{</span>\n\n        if fields == <span class=\"token string\">\"nginx-access-log\"</span><span class=\"token punctuation\">{</span>\n\n            elasticsearch <span class=\"token punctuation\">{</span>\n\n                hosts => <span class=\"token punctuation\">[</span><span class=\"token string\">\"http://127.0.0.1:9200\"</span><span class=\"token punctuation\">]</span>\n\n                index => <span class=\"token string\">\"nginx-access-log-%{+YYYY.MM.dd}\"</span>\n\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n\n</code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n<ul>\n<li><a href=\"#561-array-partition-i\">561. Array Partition I</a></li>\n<li><a href=\"#627-swap-salary\">627. Swap Salary</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第40周：数组配对与工资交换算法、Nginx日志实时监控分析","tags":["coding","arts"],"description":"本周ARTS包含LeetCode数组配对和工资交换算法解析、Nginx访问日志实时监控分析方案。","date":"2019-06-16"}}},"pageContext":{"slug":"/arts-40","previous":{"fields":{"slug":"/graph-algorithms"},"frontmatter":{"title":"常用的图算法","tags":["coding"],"slug":"/graph-algorithms"}},"next":{"fields":{"slug":"/arts-41"},"frontmatter":{"title":"ARTS 第41周：二叉树前序遍历算法、GatsbyJS静态网站与旧金山漂泊生活","tags":["coding","arts"],"slug":"/arts-41"}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}