{"componentChunkName":"component---src-templates-blog-post-js","path":"/mono/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"fd7924c2-8d86-542b-9e89-4ce998adbf1b","excerpt":"一、概述  是 Project Reactor 库中的一个类，它是 Reactive Streams 规范的实现，用于表示包含 0 或 1 个元素的异步序列。 在 Reactive 编程中， 可以用…","html":"<h3 id=\"一概述\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E6%A6%82%E8%BF%B0\" aria-label=\"一概述 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一、概述</h3>\n<ul>\n<li><code class=\"language-text\">Mono&lt;></code> 是 Project Reactor 库中的一个类，它是 Reactive Streams 规范的实现，用于表示包含 0 或 1 个元素的异步序列。</li>\n<li>在 Reactive 编程中，<code class=\"language-text\">Mono&lt;></code> 可以用来处理异步操作的结果，这些操作可能会返回一个元素、一个完成信号或者一个错误。它是一个强大的工具，可用于构建响应式、非阻塞和异步的应用程序，尤其适合于现代分布式系统和高并发环境。</li>\n</ul>\n<h3 id=\"二核心特点\" style=\"position:relative;\"><a href=\"#%E4%BA%8C%E6%A0%B8%E5%BF%83%E7%89%B9%E7%82%B9\" aria-label=\"二核心特点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二、核心特点</h3>\n<ul>\n<li><strong>异步和非阻塞</strong>：\n<ul>\n<li><code class=\"language-text\">Mono&lt;></code> 是为异步操作设计的，允许程序在等待结果时不阻塞线程，提高系统资源的利用率。它利用回调、事件驱动和操作符链的方式，使程序能够同时处理多个操作而无需等待每个操作完成，提高了系统的吞吐量和响应性。</li>\n</ul>\n</li>\n<li><strong>处理 0 或 1 个元素</strong>：\n<ul>\n<li>与 <code class=\"language-text\">Flux&lt;></code> 类（表示 0 到 N 个元素的序列）不同，<code class=\"language-text\">Mono&lt;></code> 专门用于处理可能包含零个或一个元素的情况。例如，一个 HTTP 请求可能返回一个响应（一个元素），也可能不返回任何内容（零个元素），或者产生一个错误。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三创建-code-classlanguage-textmonoltcode-实例的常见方法\" style=\"position:relative;\"><a href=\"#%E4%B8%89%E5%88%9B%E5%BB%BA-code-classlanguage-textmonoltcode-%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95\" aria-label=\"三创建 code classlanguage textmonoltcode 实例的常见方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>三、创建 <code class=\"language-text\">Mono&lt;></code> 实例的常见方法</h3>\n<ul>\n<li><strong>使用 <code class=\"language-text\">Mono.just()</code></strong>：\n<ul>\n<li>创建一个包含单个元素的 <code class=\"language-text\">Mono&lt;></code>。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>这个 <code class=\"language-text\">Mono</code> 包含一个元素 <code class=\"language-text\">\"Hello\"</code>，当订阅时，它会将该元素发送给订阅者。</li>\n</ul>\n</li>\n<li><strong>使用 <code class=\"language-text\">Mono.empty()</code></strong>：\n<ul>\n<li>创建一个不包含元素的 <code class=\"language-text\">Mono&lt;></code>。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> emptyMono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>这个 <code class=\"language-text\">Mono</code> 只发送完成信号，不会发送任何元素。</li>\n</ul>\n</li>\n<li><strong>使用 <code class=\"language-text\">Mono.error()</code></strong>：\n<ul>\n<li>创建一个只包含错误的 <code class=\"language-text\">Mono&lt;></code>。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> errorMono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error occurred\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>当订阅这个 <code class=\"language-text\">Mono</code> 时，会立即发送一个 <code class=\"language-text\">RuntimeException</code> 给订阅者。</li>\n</ul>\n</li>\n<li><strong>使用 <code class=\"language-text\">Mono.fromCallable()</code></strong>：\n<ul>\n<li>从 <code class=\"language-text\">Callable</code> 函数式接口创建 <code class=\"language-text\">Mono&lt;></code>。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> callableMono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromCallable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Hello from Callable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>当订阅时，会调用 <code class=\"language-text\">Callable</code> 中的 <code class=\"language-text\">call()</code> 方法，如果发生异常，会将异常作为错误发送给订阅者。</li>\n</ul>\n</li>\n<li><strong>使用 <code class=\"language-text\">Mono.fromSupplier()</code></strong>：\n<ul>\n<li>从 <code class=\"language-text\">Supplier</code> 函数式接口创建 <code class=\"language-text\">Mono&lt;></code>。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> supplierMono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSupplier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Hello from Supplier\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>当订阅时，会调用 <code class=\"language-text\">Supplier</code> 中的 <code class=\"language-text\">get()</code> 方法，与 <code class=\"language-text\">fromCallable()</code> 类似，但 <code class=\"language-text\">Supplier</code> 不允许抛出检查异常。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四操作符\" style=\"position:relative;\"><a href=\"#%E5%9B%9B%E6%93%8D%E4%BD%9C%E7%AC%A6\" aria-label=\"四操作符 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>四、操作符</h3>\n<ul>\n<li><code class=\"language-text\">Mono&lt;></code> 提供了多种操作符，允许你对异步序列进行各种操作，以下是一些常见的操作符：</li>\n<li><strong>转换操作符</strong>：\n<ul>\n<li><strong><code class=\"language-text\">map()</code></strong>：\n<ul>\n<li>将 <code class=\"language-text\">Mono</code> 中的元素转换为另一种类型。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> mappedMono <span class=\"token operator\">=</span> mono<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">map()</code> 操作符将 <code class=\"language-text\">String</code> 元素的长度作为 <code class=\"language-text\">Integer</code> 元素发送出去。</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">flatMap()</code></strong>：\n<ul>\n<li>将 <code class=\"language-text\">Mono</code> 中的元素转换为另一个 <code class=\"language-text\">Mono</code>，并将结果展平。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> flatMappedMono <span class=\"token operator\">=</span> mono<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">flatMap()</code> 操作符将 <code class=\"language-text\">String</code> 元素转换为 <code class=\"language-text\">Mono&lt;Integer></code>，并将其展平，使得最终结果是 <code class=\"language-text\">Mono&lt;Integer></code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>过滤操作符</strong>：\n<ul>\n<li><strong><code class=\"language-text\">filter()</code></strong>：\n<ul>\n<li>根据条件过滤元素。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filteredMono <span class=\"token operator\">=</span> mono<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"H\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>只有当元素满足条件（这里是 <code class=\"language-text\">s.startsWith(\"H\")</code>）时，才会将元素发送给订阅者。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>组合操作符</strong>：\n<ul>\n<li><strong><code class=\"language-text\">then()</code></strong>：\n<ul>\n<li>当 <code class=\"language-text\">Mono</code> 完成时，开始另一个 <code class=\"language-text\">Mono</code>。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> firstMono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> secondMono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> combinedMono <span class=\"token operator\">=</span> firstMono<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>secondMono<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>当 <code class=\"language-text\">firstMono</code> 完成时，开始 <code class=\"language-text\">secondMono</code>。</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">zip()</code></strong>：\n<ul>\n<li>将多个 <code class=\"language-text\">Mono</code> 组合在一起，产生一个包含组合元素的 <code class=\"language-text\">Mono</code>。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> mono2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple2</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> zippedMono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>mono1<span class=\"token punctuation\">,</span> mono2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">zip()</code> 操作符将 <code class=\"language-text\">mono1</code> 和 <code class=\"language-text\">mono2</code> 组合在一起，产生一个包含 <code class=\"language-text\">Tuple2&lt;String, Integer></code> 的 <code class=\"language-text\">Mono</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>错误处理操作符</strong>：\n<ul>\n<li><strong><code class=\"language-text\">onErrorReturn()</code></strong>：\n<ul>\n<li>当 <code class=\"language-text\">Mono</code> 发生错误时，返回一个默认值。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">onErrorReturn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default Value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>当 <code class=\"language-text\">Mono</code> 产生错误时，会返回 <code class=\"language-text\">\"Default Value\"</code>。</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">onErrorResume()</code></strong>：\n<ul>\n<li>当 <code class=\"language-text\">Mono</code> 发生错误时，使用另一个 <code class=\"language-text\">Mono</code> 替代。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">onErrorResume</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fallback Value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>当 <code class=\"language-text\">Mono</code> 产生错误时，会使用 <code class=\"language-text\">Mono.just(\"Fallback Value\")</code> 替代。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五订阅和消费-code-classlanguage-textmonoltcode\" style=\"position:relative;\"><a href=\"#%E4%BA%94%E8%AE%A2%E9%98%85%E5%92%8C%E6%B6%88%E8%B4%B9-code-classlanguage-textmonoltcode\" aria-label=\"五订阅和消费 code classlanguage textmonoltcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>五、订阅和消费 <code class=\"language-text\">Mono&lt;></code></h3>\n<ul>\n<li>要获取 <code class=\"language-text\">Mono&lt;></code> 的结果，需要订阅它，例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nmono<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\r\n      value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      error <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Completed\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><strong>代码解释</strong>：\n<ul>\n<li><code class=\"language-text\">subscribe()</code> 方法接收三个参数：\n<ul>\n<li>第一个 Lambda 表达式 <code class=\"language-text\">value -> System.out.println(\"Received: \" + value)</code> 处理元素。</li>\n<li>第二个 Lambda 表达式 <code class=\"language-text\">error -> System.out.println(\"Error: \" + error.getMessage())</code> 处理错误。</li>\n<li>第三个 Lambda 表达式 <code class=\"language-text\">() -> System.out.println(\"Completed\")</code> 处理完成信号。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六使用场景\" style=\"position:relative;\"><a href=\"#%E5%85%AD%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\" aria-label=\"六使用场景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>六、使用场景</h3>\n<ul>\n<li><strong>HTTP 请求处理</strong>：\n<ul>\n<li>发送一个 HTTP 请求，使用 <code class=\"language-text\">Mono&lt;></code> 表示可能的响应。例如，使用 Spring WebFlux 的 WebClient：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>reactive<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebClient</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">reactor<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>publisher<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mono</span></span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpExample</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">WebClient</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">WebClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/data\"</span><span class=\"token punctuation\">)</span>\r\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">bodyToMono</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\r\n              value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n              error <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request completed\"</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">bodyToMono(String.class)</code> 将 HTTP 响应体作为 <code class=\"language-text\">Mono&lt;String></code> 返回，然后可以使用 <code class=\"language-text\">subscribe()</code> 方法处理响应或错误。</li>\n</ul>\n</li>\n<li><strong>数据库操作</strong>：\n<ul>\n<li>在使用响应式数据库客户端（如 R2DBC）时，<code class=\"language-text\">Mono&lt;></code> 可用于表示单个数据库记录的操作结果。例如：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>r2dbc<span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">reactor<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>publisher<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mono</span></span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>r2dbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DatabaseClient</span></span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseExample</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 配置连接工厂</span>\r\n        <span class=\"token class-name\">DatabaseClient</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">DatabaseClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">sql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT COUNT(*) FROM users\"</span><span class=\"token punctuation\">)</span>\r\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">-></span> row<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>\r\n              value <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n              error <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n              <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query completed\"</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">one()</code> 方法返回一个 <code class=\"language-text\">Mono&lt;Integer></code> 表示查询结果。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"七总结\" style=\"position:relative;\"><a href=\"#%E4%B8%83%E6%80%BB%E7%BB%93\" aria-label=\"七总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>七、总结</h3>\n<ul>\n<li><code class=\"language-text\">Mono&lt;></code> 类是 Reactive 编程中的重要组成部分，它提供了一种强大的方式来处理可能包含零个或一个元素的异步操作。</li>\n<li>通过操作符可以对 <code class=\"language-text\">Mono&lt;></code> 序列进行各种转换、过滤、组合和错误处理操作。</li>\n<li>订阅 <code class=\"language-text\">Mono&lt;></code> 可以让你处理元素、错误和完成信号，从而实现非阻塞和异步的操作处理。</li>\n</ul>\n<p><code class=\"language-text\">Mono&lt;></code> 类是构建高性能、响应式应用程序的关键，通过合理使用 <code class=\"language-text\">Mono&lt;></code> 和相关操作符，可以更好地利用系统资源，提高系统的并发性能和响应速度，特别适合于现代的分布式和高并发应用场景。</p>","tableOfContents":"<ul>\n<li><a href=\"#%E4%B8%80%E6%A6%82%E8%BF%B0\">一、概述</a></li>\n<li><a href=\"#%E4%BA%8C%E6%A0%B8%E5%BF%83%E7%89%B9%E7%82%B9\">二、核心特点</a></li>\n<li><a href=\"#%E4%B8%89%E5%88%9B%E5%BB%BA-code-classlanguage-textmonoltcode-%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95\">三、创建 <code class=\"language-text\">Mono&lt;></code> 实例的常见方法</a></li>\n<li><a href=\"#%E5%9B%9B%E6%93%8D%E4%BD%9C%E7%AC%A6\">四、操作符</a></li>\n<li><a href=\"#%E4%BA%94%E8%AE%A2%E9%98%85%E5%92%8C%E6%B6%88%E8%B4%B9-code-classlanguage-textmonoltcode\">五、订阅和消费 <code class=\"language-text\">Mono&lt;></code></a></li>\n<li><a href=\"#%E5%85%AD%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\">六、使用场景</a></li>\n<li><a href=\"#%E4%B8%83%E6%80%BB%E7%BB%93\">七、总结</a></li>\n</ul>","frontmatter":{"title":"Mono类怎么用","tags":["coding"],"description":"在 Reactive 编程中，Mono<> 可以用来处理异步操作的结果，这些操作可能会返回一个元素、一个完成信号或者一个错误。它是一个强大的工具，可用于构建响应式、非阻塞和异步的应用程序，尤其适合于现代分布式系统和高并发环境","date":"2025-01-15"}}},"pageContext":{"slug":"/mono","previous":{"fields":{"slug":"/docker-kafka"},"frontmatter":{"title":"使用 Docker 搭建 Kafka 服务端","tags":["coding"],"slug":"/docker-kafka"}},"next":{"fields":{"slug":"/mono-and-flux"},"frontmatter":{"title":"Java 中的 Mono 和 Flux 的详细介绍及使用场景","tags":["coding"],"slug":"/mono-and-flux"}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}