{"componentChunkName":"component---src-templates-blog-post-js","path":"/java-interview-questions/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"f7c0b5a1-e1ca-5494-b4c4-3c596b8923f9","excerpt":"1. 数据库编码和服务端代码编码一致情况下，Get请求可能产生乱码的原因及解决办法？ 检查中间键tomcat、jetty对get请求的解码格式，默认是iso-8859-1的话，可能会产生乱码，解决办…","html":"<h3 id=\"1-数据库编码和服务端代码编码一致情况下get请求可能产生乱码的原因及解决办法\" style=\"position:relative;\"><a href=\"#1-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A0%81%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A0%81%E4%B8%80%E8%87%B4%E6%83%85%E5%86%B5%E4%B8%8Bget%E8%AF%B7%E6%B1%82%E5%8F%AF%E8%83%BD%E4%BA%A7%E7%94%9F%E4%B9%B1%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\" aria-label=\"1 数据库编码和服务端代码编码一致情况下get请求可能产生乱码的原因及解决办法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 数据库编码和服务端代码编码一致情况下，Get请求可能产生乱码的原因及解决办法？</h3>\n<ul>\n<li>检查中间键tomcat、jetty对get请求的解码格式，默认是iso-8859-1的话，可能会产生乱码，解决办法修改中间键配置文件中URIEncoding解码格式。</li>\n</ul>\n<h3 id=\"2-struts2和springmvc的区别\" style=\"position:relative;\"><a href=\"#2-struts2%E5%92%8Cspringmvc%E7%9A%84%E5%8C%BA%E5%88%AB\" aria-label=\"2 struts2和springmvc的区别 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Struts2和SpringMVC的区别？</h3>\n<ul>\n<li>Struts2入口是<code class=\"language-text\">Filter</code>，SpringMVC是<code class=\"language-text\">Servlet</code></li>\n<li>Spring MVC是基于方法的设计，而Struts2是基于类</li>\n<li>Spring MVC的方法之间基本上是独立的，独享request和response，而Struts2所有Action变量是共享的</li>\n<li>Struts2有自己的interceptor机制，Spring MVC用的是独立的AOP方式</li>\n</ul>\n<h3 id=\"3-spring-mvc的controller是单例的吗有什么影响吗\" style=\"position:relative;\"><a href=\"#3-spring-mvc%E7%9A%84controller%E6%98%AF%E5%8D%95%E4%BE%8B%E7%9A%84%E5%90%97%E6%9C%89%E4%BB%80%E4%B9%88%E5%BD%B1%E5%93%8D%E5%90%97\" aria-label=\"3 spring mvc的controller是单例的吗有什么影响吗 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Spring MVC的Controller是单例的吗，有什么影响吗？</h3>\n<ul>\n<li>Spring MVC 的 Controller 是单例的</li>\n<li>如果在controller中定义了非静态成员变量，会导致属性重复使用</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 非静态成员变量j的属性值会重复利用，不会累加</span>\n<span class=\"token comment\">// 解决办法：不要定义非静态成员变量，或者使用多例 @Scope(\"prototype\")</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexController</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"4-mybatis如何防止sql注入\" style=\"position:relative;\"><a href=\"#4-mybatis%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2sql%E6%B3%A8%E5%85%A5\" aria-label=\"4 mybatis如何防止sql注入 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. MyBatis如何防止sql注入？</h3>\n<p>Mybatis中的<code class=\"language-text\">#{}</code>和<code class=\"language-text\">${}</code>的区别</p>\n<ul>\n<li><code class=\"language-text\">#{}</code>使用的是PreparedStatement，会有类型转换, 将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by “111”, 如果传入的值是id，则解析成的sql为order by “id”</li>\n<li><code class=\"language-text\">${}</code>将传入的数据直接显示生成在sql中。如：order by <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>s</mi><mi>e</mi><msub><mi>r</mi><mi>i</mi></msub><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">user_id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">se</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">d</span></span></span></span></span>，如果传入的值是111,那么解析成sql时的值为order by user_id,  如果传入的值是id，则解析成的sql为order by id</li>\n<li><code class=\"language-text\">#{}</code>方式能够很大程度防止sql注入</li>\n<li><code class=\"language-text\">${}</code>方式无法防止Sql注入</li>\n<li><code class=\"language-text\">${}</code>方式一般用于传入数据库对象，例如传入表名</li>\n<li>尽量使用<code class=\"language-text\">#{}</code>代替<code class=\"language-text\">${}</code></li>\n<li>参考文献\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000010107964\">https://segmentfault.com/a/1190000010107964</a></li>\n<li><a href=\"https://my.oschina.net/chuibilong/blog/638950\">https://my.oschina.net/chuibilong/blog/638950</a></li>\n<li><a href=\"https://blog.csdn.net/kakaxi_77/article/details/46007239\">https://blog.csdn.net/kakaxi_77/article/details/46007239</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-hibernate一级缓存二级缓存\" style=\"position:relative;\"><a href=\"#5-hibernate%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98\" aria-label=\"5 hibernate一级缓存二级缓存 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Hibernate一级缓存、二级缓存？</h3>\n<ul>\n<li>\n<p>一级缓存</p>\n<ul>\n<li>第一级缓存是 Session 缓存并且是一种强制性的缓存，所有的要求都必须通过它。Session 对象在它自己的权利之下，在将它提交给数据库之前保存一个对象。</li>\n<li>如果你对一个对象发出多个更新，Hibernate 会尝试尽可能长地延迟更新来减少发出的 SQL 更新语句的数目。如果你关闭 session,所有缓存的对象丢失，或是存留，或是在数据库中被更新。</li>\n</ul>\n</li>\n<li>\n<p>二级缓存</p>\n<ul>\n<li>第二级缓存是一种可选择的缓存并且第一级缓存在任何想要在第二级缓存中找到一个对象前将总是被询问。</li>\n<li>第二级缓存可以在每一个类和每一个集合的基础上被安装，并且它主要负责跨会话缓存对象。</li>\n<li>任何第三方缓存可以和 Hibernate 一起使用。org.hibernate.cache.CacheProvider 接口被提供，它必须实现来给 Hibernate 提供一个缓存实现的解决方法。</li>\n</ul>\n</li>\n<li>\n<p>参考文献</p>\n<ul>\n<li><a href=\"http://wiki.jikexueyuan.com/project/hibernate/caching.html\">http://wiki.jikexueyuan.com/project/hibernate/caching.html</a></li>\n<li><a href=\"https://blog.csdn.net/xlgen157387/article/details/40071651\">https://blog.csdn.net/xlgen157387/article/details/40071651</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-使用过哪些socket框架\" style=\"position:relative;\"><a href=\"#6-%E4%BD%BF%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9Bsocket%E6%A1%86%E6%9E%B6\" aria-label=\"6 使用过哪些socket框架 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 使用过哪些Socket框架？</h3>\n<ul>\n<li>Socket\n<ul>\n<li>netty</li>\n<li>java sockets\n<ul>\n<li><a href=\"https://www.baeldung.com/a-guide-to-java-sockets\">A Guide to Java Sockets</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>WebSocket\n<ul>\n<li><a href=\"%5Bhttp://www.ruanyifeng.com/blog/2017/05/websocket.html%5D(http://www.ruanyifeng.com/blog/2017/05/websocket.html)\">阮一峰的WebSocket教程</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-spring-mvc-请求-响应流程\" style=\"position:relative;\"><a href=\"#7-spring-mvc-%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94%E6%B5%81%E7%A8%8B\" aria-label=\"7 spring mvc 请求 响应流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Spring MVC 请求-响应流程</h3>\n<p><img src=\"https://raw.githubusercontent.com/jasonyang86/nocoder/master/data/images/201804/springmvc%E8%AF%B7%E6%B1%82%E8%B7%9F%E8%B8%AA.png\" alt=\"\"></p>\n<ol>\n<li>\n<p>浏览器发送请求的url以及其他信息</p>\n</li>\n<li>\n<p>DispatcherServlet先会查询处理器映射（handler mapping），来确定发送给哪个控制器。</p>\n</li>\n<li>\n<p>确定合适的控制器后，将请求发送给选中的控制器</p>\n</li>\n<li>\n<p>控制器完成逻辑处理后，将模型数据打包，并标示出输出的视图名，将请求连同模型和视图名发送回DispatcherServlet</p>\n</li>\n<li>\n<p>DispatcherServlet使用视图解析器（view resolver）来将逻辑视图名匹配一个特定的视图实现（jsp或其它）</p>\n</li>\n<li>\n<p>DispatcherServlet匹配到对应的视图实现</p>\n</li>\n<li>\n<p>视图使用模型数据渲染输出，这个输出通过响应对象传递给客户端</p>\n</li>\n</ol>\n<h3 id=\"8-对-http-协议无状态的理解\" style=\"position:relative;\"><a href=\"#8-%E5%AF%B9-http-%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E7%90%86%E8%A7%A3\" aria-label=\"8 对 http 协议无状态的理解 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 对 HTTP 协议无状态的理解</h3>\n<p>对<strong>无状态</strong>的理解</p>\n<ul>\n<li>协议对于事务处理没有记忆能力</li>\n<li>对同一个url请求没有上下文关系</li>\n<li>每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况</li>\n<li>服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器</li>\n<li>人生若只如初见</li>\n</ul>\n<p><strong>状态</strong>的含义：客户端和服务器在某次会话中产生的数据。</p>\n<p><strong>无状态</strong>就意味着，这些数据不会被保留，但是通过增加cookie和session机制，现在的网络请求其实是有状态的。</p>\n<p>在没有状态的http协议下，服务器也一定会保留你每次网络请求对数据的修改，但这跟保留每次访问的数据是不一样的，保留的只是会话产生的结果，而没有保留会话。</p>\n<p>知乎上有个哥们儿举的一个例子：</p>\n<blockquote>\n<p><strong>有状态：</strong></p>\n<p>A：你今天中午吃的啥？\nB：吃的大盘鸡。\nA：味道怎么样呀？\nB：还不错，挺好吃的。</p>\n<p><strong>无状态：</strong></p>\n<p>A：你今天中午吃的啥？\nB：吃的大盘鸡。\nA：味道怎么样呀？\nB：？？？啊？啥？啥味道怎么样？</p>\n<p>所以需要cookie这种东西：</p>\n<p>A：你今天中午吃的啥？\nB：吃的大盘鸡。\nA：你今天中午吃的大盘鸡味道怎么样呀？\nB：还不错，挺好吃的。</p>\n</blockquote>\n<h3 id=\"9-redis-存储机制\" style=\"position:relative;\"><a href=\"#9-redis-%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6\" aria-label=\"9 redis 存储机制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Redis 存储机制</h3>\n<ul>\n<li>RDB</li>\n<li>AOF</li>\n</ul>\n<h3 id=\"10-aop的原理\" style=\"position:relative;\"><a href=\"#10-aop%E7%9A%84%E5%8E%9F%E7%90%86\" aria-label=\"10 aop的原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. AOP的原理</h3>\n<ul>\n<li>AOP 术语</li>\n<li>代理模式</li>\n<li>Spring AOP</li>\n</ul>\n<h3 id=\"11分布式事务解决方案\" style=\"position:relative;\"><a href=\"#11%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" aria-label=\"11分布式事务解决方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.分布式事务解决方案</h3>\n<ul>\n<li>两阶段提交</li>\n<li>TCC补偿</li>\n<li>最终一致性\n<ul>\n<li>可靠性消息服务</li>\n</ul>\n</li>\n<li>最大努力通知型事务</li>\n</ul>\n<h3 id=\"12-object-对象的方法有哪些分别有什么作用该什么场景用\" style=\"position:relative;\"><a href=\"#12-object-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%E5%88%86%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E8%AF%A5%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E7%94%A8\" aria-label=\"12 object 对象的方法有哪些分别有什么作用该什么场景用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12. Object 对象的方法有哪些？分别有什么作用？该什么场景用？</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\no<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\no<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\no<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\no<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\no<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\no<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\no<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n</code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"#1-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A0%81%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%BC%96%E7%A0%81%E4%B8%80%E8%87%B4%E6%83%85%E5%86%B5%E4%B8%8Bget%E8%AF%B7%E6%B1%82%E5%8F%AF%E8%83%BD%E4%BA%A7%E7%94%9F%E4%B9%B1%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\">1. 数据库编码和服务端代码编码一致情况下，Get请求可能产生乱码的原因及解决办法？</a></li>\n<li><a href=\"#2-struts2%E5%92%8Cspringmvc%E7%9A%84%E5%8C%BA%E5%88%AB\">2. Struts2和SpringMVC的区别？</a></li>\n<li><a href=\"#3-spring-mvc%E7%9A%84controller%E6%98%AF%E5%8D%95%E4%BE%8B%E7%9A%84%E5%90%97%E6%9C%89%E4%BB%80%E4%B9%88%E5%BD%B1%E5%93%8D%E5%90%97\">3. Spring MVC的Controller是单例的吗，有什么影响吗？</a></li>\n<li><a href=\"#4-mybatis%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2sql%E6%B3%A8%E5%85%A5\">4. MyBatis如何防止sql注入？</a></li>\n<li><a href=\"#5-hibernate%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98\">5. Hibernate一级缓存、二级缓存？</a></li>\n<li><a href=\"#6-%E4%BD%BF%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9Bsocket%E6%A1%86%E6%9E%B6\">6. 使用过哪些Socket框架？</a></li>\n<li><a href=\"#7-spring-mvc-%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94%E6%B5%81%E7%A8%8B\">7. Spring MVC 请求-响应流程</a></li>\n<li><a href=\"#8-%E5%AF%B9-http-%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E7%90%86%E8%A7%A3\">8. 对 HTTP 协议无状态的理解</a></li>\n<li><a href=\"#9-redis-%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6\">9. Redis 存储机制</a></li>\n<li><a href=\"#10-aop%E7%9A%84%E5%8E%9F%E7%90%86\">10. AOP的原理</a></li>\n<li><a href=\"#11%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">11.分布式事务解决方案</a></li>\n<li><a href=\"#12-object-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%E5%88%86%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E8%AF%A5%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E7%94%A8\">12. Object 对象的方法有哪些？分别有什么作用？该什么场景用？</a></li>\n</ul>","frontmatter":{"title":"几道Java相关的面试题","tags":["coding"],"description":"这些是我被问到的面试题，比较基础。","date":"2018-04-11"}}},"pageContext":{"slug":"/java-interview-questions/","previous":{"fields":{"slug":"/multi-thread-notes/"},"frontmatter":{"title":"Java 多线程","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/java-binary-search/"},"frontmatter":{"title":"Java 二分查找法","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}