{"componentChunkName":"component---src-templates-blog-post-js","path":"/java-binary-search/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Yang's Website","author":"Jason Yang"}},"markdownRemark":{"id":"b0aa79f1-ce35-54f5-ad74-0976406f71d0","excerpt":"二分查找法是一种常见的对数值列表的查找方法。使用二分查找法的前提条件是数组中的元素必须已经排好序。二分查找法首先将关键字与数组的中间元素进行比较。考虑一下三种情况： 如果关键字小于中间元素，只需要在…","html":"<blockquote>\n<p>二分查找法是一种常见的对数值列表的查找方法。使用二分查找法的前提条件是数组中的元素必须已经排好序。二分查找法首先将关键字与数组的中间元素进行比较。考虑一下三种情况：</p>\n</blockquote>\n<ul>\n<li>如果关键字小于中间元素，只需要在数组的前一半元素中继续查找关键字。</li>\n<li>如果关键字和中间元素相等，则匹配成功，查找结束。</li>\n<li>如果关键字大于中间元素，只需要在数组的后一半元素中继续查找关键字。</li>\n</ul>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.solution;\n\n/**\n * @author jason\n * @date 18/4/19.\n */\npublic class BinarySearch {\n    public static int binarySearch(int [] list, int key){\n        int low = 0;\n        int high = list.length - 1;\n\n        while(high &gt;= low){\n            int mid = (low + high) / 2;\n            if(key &lt; list[mid]){\n                high = mid - 1;\n            }else if(key == list[mid]){\n                return mid;\n            }else{\n                low = mid + 1;\n            }\n        }\n\t    // 如果关键字不在该序列中，返回-low-1，\n\t\t// 表明不在序列中，并且返回关键字应该插入的位置\n        return -low-1;\n    }\n\n    public static void main(String[] args) {\n        System.out.print(binarySearch(new int []{1,2,3,4,5}, 5));\n    }\n}\n</code>\n        </deckgo-highlight-code>\n<p>再附上一道【剑指offer】的编程练习题及题解</p>\n<blockquote>\n<p>题目描述：二维数组中的查找</p>\n</blockquote>\n<p>对于一个有序数组，我们通常采用二分查找的方式来定位某一元素，请编写二分查找的算法，在数组中查找指定元素。\n给定一个整数数组A及它的大小n，同时给定要查找的元素val，请返回它在数组中的位置(从0开始)，若不存在该元素，返回-1。\n若该元素出现多次，请返回第一次出现的位置。</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.solution;\n\n/**\n * 题目描述\n * 对于一个有序数组，我们通常采用二分查找的方式来定位某一元素，请编写二分查找的算法，在数组中查找指定元素。\n * 给定一个整数数组A及它的大小n，同时给定要查找的元素val，请返回它在数组中的位置(从0开始)，若不存在该元素，返回-1。\n * 若该元素出现多次，请返回第一次出现的位置。\n * 测试样例：\n * [1,3,5,7,9],5,3\n * [4,4,10,21],4,4\n * 返回：1\n *\n * @author jason\n * @date 18/4/1.\n */\npublic class BinarySearch {\n    public int getPos(int[] A, int n, int val) {\n        // low:起始位置下标\n        int low = 0;\n        // high:结束位置下标\n        int high = n - 1;\n\n        while (high &gt; low) {\n            // mid:中间位置下标\n            int mid = (low + high) / 2;\n            if (val &lt; A[mid]) {\n                // 如果目标值在左侧，结束位置下标修改为mid-1\n                high = mid - 1;\n            } else if (val == A[mid]) {\n                // 如果目标值等于中间位置下标对应的值，将结束位置下标设置为中间位置下标，继续向左查找\n                high = mid;\n            } else {\n                // 如果目标值在右侧，起始查找的位置下标修改为mid+1\n                low = mid + 1;\n            }\n        }\n        return A[low] == val ? low : -1;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {10, 10, 10, 10, 10, 10, 10, 10};\n        BinarySearch bs = new BinarySearch();\n        System.out.println(bs.getPos(array, 8, 10));\n    }\n}\n</code>\n        </deckgo-highlight-code>","tableOfContents":"","frontmatter":{"title":"Java 二分查找法","tags":["coding"],"description":"Java实现二分查找法。","date":"2018-04-18"}}},"pageContext":{"slug":"/java-binary-search/","previous":{"fields":{"slug":"/java-interview-questions/"},"frontmatter":{"title":"几道Java相关的面试题","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/sleepless-in-java/"},"frontmatter":{"title":"读《Java夜未眠》部分笔记","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}