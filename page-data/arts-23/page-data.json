{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-23/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"12a01843-8d55-5eb2-bc1f-458b8ccc8307","excerpt":"Algorithm Review  The Composite Pattern 模式通常被一起使用，并被组合在同一个设计解决方案中，复合模式在一个解决方案中结合多个设计模式，以解决一般或者重复发生的…","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\n/**\n * 876. Middle of the Linked List\n * &lt;p&gt;\n * Given a non-empty, singly linked list with head node head, return a middle node of linked list.\n * &lt;p&gt;\n * If there are two middle nodes, return the second middle node.\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * Input: [1,2,3,4,5]\n * Output: Node 3 from this list (Serialization: [3,4,5])\n * The returned node has value 3.  (The judge&#39;s serialization of this node is [3,4,5]).\n * Note that we returned a ListNode object ans, such that:\n * ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\n * Example 2:\n * &lt;p&gt;\n * Input: [1,2,3,4,5,6]\n * Output: Node 4 from this list (Serialization: [4,5,6])\n * Since the list has two middle nodes with values 3 and 4, we return the second one.\n * &lt;p&gt;\n * &lt;p&gt;\n * Note:\n * &lt;p&gt;\n * The number of nodes in the given list will be between 1 and 100.\n *\n * @author jason\n * @date 2018/12/9.\n */\npublic class MiddleOfTheLinkedList {\n    public static ListNode middleNode(ListNode head) {\n        int count = 0;\n        for (ListNode cur = head; cur != null; cur = cur.next) {\n            count++;\n        }\n        for (int i = count / 2; i &gt; 0; i--) {\n            head = head.next;\n        }\n        return head;\n    }\n\n}\n\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n}\n</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"-the-composite-pattern\" style=\"position:relative;\"><a href=\"#-the-composite-pattern\" aria-label=\" the composite pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://medium.com/@priya104/the-composite-pattern-2edec432dd58\"> The Composite Pattern</a></h3>\n<p>模式通常被一起使用，并被组合在同一个设计解决方案中，复合模式在一个解决方案中结合多个设计模式，以解决一般或者重复发生的问题。</p>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<p>Python3 configparser 读取cfg文件时， 如果value包含百分号(%)，则需要另加一个百分号(%)来转义。</p>\n<p>假设有如下配置文件:</p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">[prod-server]\n\nip=192.168.28.123\n\nusername=root\n\npassword=7ice$%%18</code>\n        </deckgo-highlight-code>\n<p>其中 <code>password</code> 真实值为 <code>7ice$%18</code>，包含百分号，就必须写成 <code>7ice$%%18</code>，否则会抛如下异常信息：</p>\n<deckgo-highlight-code language=\"python\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">Traceback (most recent call last):\n\n  File &quot;D:/usr/local/yuntu/clean-unused-docker-images/run.py&quot;, line 38, in &lt;module&gt;\n\n    main(&quot;conf/server.cfg&quot;)\n\n  File &quot;D:/usr/local/yuntu/clean-unused-docker-images/run.py&quot;, line 32, in main\n\n    password = conf.get(section, &quot;password&quot;)\n\n  File &quot;C:\\Python37-32\\lib\\configparser.py&quot;, line 799, in get\n\n    d)\n\n  File &quot;C:\\Python37-32\\lib\\configparser.py&quot;, line 394, in before_get\n\n    self._interpolate_some(parser, option, L, value, section, defaults, 1)\n\n  File &quot;C:\\Python37-32\\lib\\configparser.py&quot;, line 444, in _interpolate_some\n\n    &quot;found: %r&quot; % (rest,))\n\nconfigparser.InterpolationSyntaxError: &#39;%&#39; must be followed by &#39;%&#39; or &#39;(&#39;, found: &#39;%hua&#39;</code>\n        </deckgo-highlight-code>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<h3 id=\"spring-boot-设置跨域访问\" style=\"position:relative;\"><a href=\"#spring-boot-%E8%AE%BE%E7%BD%AE%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE\" aria-label=\"spring boot 设置跨域访问 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot 设置跨域访问</h3>\n<blockquote>\n<p>现代浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。跨域HTTP请求是指A域上资源请求了B域上的资源，举例而言，部署在A机器上Nginx上的js代码通过ajax请求了部署在B机器Tomcat上的RESTful接口。</p>\n<p>IP（域名）不同、或者端口不同，都会造成跨域问题。为了解决跨域的问题，曾经出现过jsonp、代理文件等方案，应用场景受限，维护成本高，直到HTML5带来了CORS协议。</p>\n<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing），允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。它通过服务器增加一个特殊的Header[Access-Control-Allow-Origin]来告诉客户端跨域的限制，如果浏览器支持CORS、并且判断Origin通过的话，就会允许XMLHttpRequest发起跨域请求</p>\n<p>作者：郭寻抚</p>\n<p>链接：<a href=\"https://www.jianshu.com/p/55643abe7a18\">https://www.jianshu.com/p/55643abe7a18</a></p>\n<p>來源：简书</p>\n<p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n</blockquote>\n<p>作者在文中给出的demo在<code>spring-boot2</code>里已经过时了，在<code>spring-boot2</code>中的解决方案如下：</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.blog.configuration;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(&quot;/**&quot;)\n                .allowedHeaders(&quot;*&quot;)\n                .allowedMethods(&quot;*&quot;)\n                .allowedOrigins(&quot;*&quot;);\n    }\n}</code>\n        </deckgo-highlight-code>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#-the-composite-pattern\"> The Composite Pattern</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n<ul>\n<li><a href=\"#spring-boot-%E8%AE%BE%E7%BD%AE%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE\">Spring Boot 设置跨域访问</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第23周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2018-12-08"}}},"pageContext":{"slug":"/arts-23/","previous":{"fields":{"slug":"/arts-22/"},"frontmatter":{"title":"ARTS 第22周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/arts-24/"},"frontmatter":{"title":"ARTS 第24周","tags":["coding","arts"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}