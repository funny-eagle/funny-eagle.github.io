{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-11/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"fbc444ec-5983-5faa-9c14-b7c3dc5856a1","excerpt":"Algorithm Jewels and Stones Review Strategy Pattern Tutorial with Java Examples https://dzone.com/a…","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<h3 id=\"jewels-and-stones\" style=\"position:relative;\"><a href=\"#jewels-and-stones\" aria-label=\"jewels and stones permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jewels and Stones</h3>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\n/**\n * You&#39;re given strings J representing the types of stones that are jewels, and S\n * representing the stones you have.  Each character in S is a type of\n * stone you have.  You want to know how many of the stones you have are also jewels.\n *\n * The letters in J are guaranteed distinct, and all characters in J and S are letters.\n * Letters are case sensitive, so &quot;a&quot; is considered a different type of stone from &quot;A&quot;.\n *\n * Example 1:\n *\n * Input: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;\n * Output: 3\n * Example 2:\n *\n * Input: J = &quot;z&quot;, S = &quot;ZZ&quot;\n * Output: 0\n * Note:\n *\n * S and J will consist of letters and have length at most 50.\n * The characters in J are distinct.\n * @author jason\n * @date 18/9/16.\n */\npublic class JewelsAndStones {\n    public static int numJewelsInStones(String J, String S) {\n        int res = 0;\n        if(J == null || &quot;&quot;.equals(J) || S == null || &quot;&quot;.equals(S)){\n            return res;\n        }\n\n        String [] jArr = J.split(&quot;&quot;);\n        String [] sArr = S.split(&quot;&quot;);\n\n        for (int i = 0; i &lt; jArr.length; i++) {\n            for (int j = 0; j &lt; sArr.length; j++) {\n                if(jArr[i].equals(sArr[j])){\n                    ++res;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(numJewelsInStones(&quot;ABC&quot;, &quot;ABCCDE&quot;));\n        System.out.println(numJewelsInStones(&quot;&quot;, &quot;&quot;));\n        System.out.println(numJewelsInStones(null, null));\n        System.out.println(numJewelsInStones(&quot;ABC&quot;, &quot;&quot;));\n        System.out.println(numJewelsInStones(&quot;&quot;, &quot;ABCCDE&quot;));\n        System.out.println(numJewelsInStones(&quot;abc&quot;, &quot;rewqabc&quot;));\n    }\n}\n</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"strategy-pattern-tutorial-with-java-examples\" style=\"position:relative;\"><a href=\"#strategy-pattern-tutorial-with-java-examples\" aria-label=\"strategy pattern tutorial with java examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strategy Pattern Tutorial with Java Examples</h3>\n<blockquote>\n<p><a href=\"https://dzone.com/articles/design-patterns-strategy\">https://dzone.com/articles/design-patterns-strategy</a></p>\n</blockquote>\n<p>a useful pattern in changing algorithm implementations at runtime, without causing tight coupling.</p>\n<p><strong>Defines a set of encapsulated algorithms that can be swapped to carry out a specific behaviour</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/yangjinlong86/nocoder/master/data/images/design-pattern/strategy_pattern.png\" alt=\"\"></p>\n<p>简单实用的策略模式，Context 由一个 Strategy接口和若干行为方法组成。在运行时向Context传入不同的策略实现类来执行对应的行为方法。</p>\n<p>作者使用压缩文件格式rar或者zip为示例，阐述了策略模式的使用场景和具体实现，代码如下：</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//Strategy Interface\npublic interface CompressionStrategy {\n  public void compressFiles(ArrayList&lt;File&gt; files);\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public class ZipCompressionStrategy implements CompressionStrategy {\n  public void compressFiles(ArrayList&lt;File&gt; files) {\n    //using ZIP approach\n  }\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public class RarCompressionStrategy implements CompressionStrategy {\n  public void compressFiles(ArrayList&lt;File&gt; files) {\n    //using RAR approach\n  }\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public class CompressionContext {\n  private CompressionStrategy strategy;\n  //this can be set at runtime by the application preferences\n  public void setCompressionStrategy(CompressionStrategy strategy) {\n    this.strategy = strategy;\n  }\n  \n  //use the strategy\n  public void createArchive(ArrayList&lt;File&gt; files) {\n    strategy.compressFiles(files);\n  }\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public class Client {\n  public static void main(String[] args) {\n    CompressionContext ctx = new CompressionContext();\n    //we could assume context is already set by preferences\n    ctx.setCompressionStrategy(new ZipCompressionStrategy());\n    //get a list of files...\n    ctx.createArchive(fileList);\n  }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<h3 id=\"canal-server-docker\" style=\"position:relative;\"><a href=\"#canal-server-docker\" aria-label=\"canal server docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>canal-server docker</h3>\n<p>升级canal到1.1.1版本，本体验证通过，后续准备替换测试和生产环境的canal-server为docker版本。</p>\n<p>docker pull canal/canal-server:v1.1.0</p>\n<p>docker run 需要挂载logs，其它的参数都可以通过<code>-e</code>的方式来配置</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">-e canal.auto.scan=false \\\n-e canal.destinations=test \\\n-e canal.instance.master.address=127.0.0.1:3306  \\\n-e canal.instance.dbUsername=canal  \\\n-e canal.instance.dbPassword=canal  \\\n-e canal.instance.connectionCharset=UTF-8 \\\n-e canal.instance.tsdb.enable=true \\\n-e canal.instance.gtidon=false</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p><a href=\"https://github.com/alibaba/canal/wiki/Docker-QuickStart\">https://github.com/alibaba/canal/wiki/Docker-QuickStart</a></p>\n</blockquote>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<h3 id=\"strategy-pattern\" style=\"position:relative;\"><a href=\"#strategy-pattern\" aria-label=\"strategy pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strategy pattern</h3>\n<blockquote>\n<p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html#id10\">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html#id10</a></p>\n</blockquote>\n<p><strong>策略模式的优点</strong></p>\n<p>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。\n策略模式提供了管理相关的算法族的办法。\n策略模式提供了可以替换继承关系的办法。\n使用策略模式可以避免使用多重条件转移语句。</p>\n<p><strong>策略模式的缺点</strong></p>\n<p>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。\n策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量</p>\n<p><strong>在以下情况下可以使用策略模式</strong></p>\n<p>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。\n一个系统需要动态地在几种算法中选择一种。\n如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。\n不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n<ul>\n<li><a href=\"#jewels-and-stones\">Jewels and Stones</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#strategy-pattern-tutorial-with-java-examples\">Strategy Pattern Tutorial with Java Examples</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n<ul>\n<li><a href=\"#canal-server-docker\">canal-server docker</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n<ul>\n<li><a href=\"#strategy-pattern\">Strategy pattern</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第 11 周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2018-09-15"}}},"pageContext":{"slug":"/arts-11/","previous":{"fields":{"slug":"/arts-10/"},"frontmatter":{"title":"ARTS 第 10 周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/arts-12/"},"frontmatter":{"title":"ARTS 第 12 周","tags":["coding","arts"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}