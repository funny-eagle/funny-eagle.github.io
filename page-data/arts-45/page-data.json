{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-45/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"b11e5f2a-2816-583a-a5ef-27d4531f409a","excerpt":"Algorithm Review React Components Components 像方法一样返回HTML元素。 Components 是独立的、可重用的。它们的作用与js function …","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.codeabbey;\n\nimport java.util.Scanner;\n\n/**\n * https://www.codeabbey.com/index/task_view/sums-in-loop\n */\npublic class SumsInLoop {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int total = scanner.nextInt();\n        scanner.nextLine();\n        System.out.println();\n\n        String[] arr = new String[total];\n        for (int i = 0; i &lt; total; i++) {\n            arr[i] = scanner.nextLine();\n        }\n\n        for (int i = 0; i &lt; arr.length; i++) {\n            String[] nums = arr[i].split(&quot; &quot;);\n            int sum = 0;\n            for (int j = 0; j &lt; nums.length; j++) {\n                int intValue = Integer.parseInt(nums[j]);\n                sum += intValue;\n            }\n            System.out.print(sum + &quot; &quot;);\n        }\n\n        scanner.close();\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<p><strong>React Components</strong></p>\n<p>Components 像方法一样返回HTML元素。</p>\n<p>Components 是独立的、可重用的。它们的作用与js function 类似，但是独立工作并返回 HTML。</p>\n<p>Components 有两种类型，Class Components 和 Function Compoments。</p>\n<blockquote>\n<p>在较老的React中，你可能会发现主要使用的是Class组建。现在建议使用Function组件和Hooks，它们是在React16.8中添加的。</p>\n</blockquote>\n<p>React组件的名称必须以大写字母开头。</p>\n<h3 id=\"class-component\" style=\"position:relative;\"><a href=\"#class-component\" aria-label=\"class component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Component</h3>\n<p>类组件必须包含extends React.Component 语句。这个语句创建一个React.Component的继承者，可以访问React.Component的方法。</p>\n<p>组件还需要一个render()方法，该方法返回HTML。</p>\n<p>创建一个名为Car的类组件：</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">class Car extends React.Component {\n\n    render(){\n        return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;\n    }\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"function-component\" style=\"position:relative;\"><a href=\"#function-component\" aria-label=\"function component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Component</h3>\n<p>Function 组件也返回HTML，它的行为与类组件非常类似，但是Function组件可以用更少的代码实现，更容易理解。</p>\n<p>创建一个名为Car的Function组件</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function Car(){\n    return return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"rendering-a-component\" style=\"position:relative;\"><a href=\"#rendering-a-component\" aria-label=\"rendering a component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rendering a Component</h3>\n<p>现在有一个名为Car的组件，返回一个<h2>元素。</p>\n<p>在程序中使用这个组件爱你，语法类似HTML:<code>&#x3C;Car/></code></p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">ReactDOM.render(&lt;Car/&gt;, document.getElementById(&#39;root&#39;));</code>\n        </deckgo-highlight-code>\n<h3 id=\"props\" style=\"position:relative;\"><a href=\"#props\" aria-label=\"props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props</h3>\n<p>组件可以作为<code>props</code>传递，代表properties。</p>\n<p>Props 类似于方法参数，可以将它们作为属性传递到组件中。</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function Car(props){\n    return &lt;h2&gt;I am a {props.color} Car!&lt;/h2&gt;\n}\n\nReactDOM.render(&lt;Car color=&quot;red&quot;/&gt;, document.getElementById(&#39;root&#39;))</code>\n        </deckgo-highlight-code>\n<h3 id=\"components-in-components\" style=\"position:relative;\"><a href=\"#components-in-components\" aria-label=\"components in components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components in Components</h3>\n<p>我们可以引用其他组件中的组件</p>\n<p>使用Garage组件中的Car组件</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function Car(){\n    return &lt;h2&gt;I am a Car!&lt;/h2&gt;\n}\n\n// 车库\nfunction Garage(){\n    return (\n        &lt;&gt;\n            &lt;h1&gt;Who lives in my Garage?&lt;/h1&gt;\n            &lt;Car /&gt;\n        &lt;/&gt;\n    );\n}\n\nReactDOM.render(&lt;Garage/&gt;, document.getElementById(&#39;root&#39;));</code>\n        </deckgo-highlight-code>\n<h3 id=\"components-in-files\" style=\"position:relative;\"><a href=\"#components-in-files\" aria-label=\"components in files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components in Files</h3>\n<p>React 都是关于重用代码，并且建议将组件拆分到单独的文件中。</p>\n<p>为此，创建一个扩展名为js的新文件，并将代码放进去。</p>\n<p>创建一个Car.js文件</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function Car(){\n    return &lt;h2&gt;Hi , I am a Car!&lt;/h2&gt;\n}\n\nexport default Car;</code>\n        </deckgo-highlight-code>\n<p>为了能够使用Car组件，必须在程序import这个文件。</p>\n<deckgo-highlight-code language=\"javascript\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">import React from &#39;react&#39;;\nimport ReactDOM from &#39;react-dom&#39;;\nimport Car from &#39;./Car.js&#39;;\n\nReactDOM.render(&lt;Car/&gt;, document.getElementById(&#39;root&#39;));</code>\n        </deckgo-highlight-code>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<p>默认情况下，用<code>sudo dnf update</code> 或 <code>sudo yum update</code>后，会将Linux内核一起更新，过一段时间，grub2 就会生成好几个启动项，如果更新内核后使用系统没有问题，就可以把旧的内核删除。</p>\n<p>我遇到的问题是，每次更新内核后，都需要重新安装显卡驱动，不然进不了GUI，这个很烦人，浪费时间，搞得我每次都有冲动重装系统。今天更新到5.15.12，又进不了桌面了，还好grub2可以让我选择从5.15.11启动。</p>\n<blockquote>\n<p>TMD，装win算了，至少没这么多麻烦…然后我就去搜win10镜像了…\n行了吧你，Windows用不了几天你必然折腾回Linux，谁叫你爱折腾呢…\n好吧，还是不要逃避问题…</p>\n</blockquote>\n<p>冷静了一会儿，网上搜索试验了一番，把不用的内核都删除，然后dnf更新时排除内核，即不升级内核。</p>\n<p>使用<code>uname -r</code> 查看当前使用的内核</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">[yangjl@fedora ~]$ uname -r\n5.15.11-200.fc35.x86_64</code>\n        </deckgo-highlight-code>\n<p>使用<code>rpm -aq|grep kernel</code>查看已经安装的内核</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">[yangjl@fedora ~]$ sudo rpm -aq | grep kernel\nlibreport-plugin-kerneloops-2.15.2-6.fc35.x86_64\nabrt-addon-kerneloops-2.14.6-9.fc35.x86_64\nkernel-headers-5.15.4-200.fc35.x86_64\nkernel-srpm-macros-1.0-6.fc35.noarch\nkernel-core-5.15.11-200.fc35.x86_64\nkernel-modules-5.15.11-200.fc35.x86_64\nkernel-5.15.11-200.fc35.x86_64\nkernel-modules-extra-5.15.11-200.fc35.x86_64\nkernel-devel-5.15.11-200.fc35.x86_64\nkernel-devel-5.15.12-200.fc35.x86_64</code>\n        </deckgo-highlight-code>\n<p>保留当前使用的内核，删除不用的内核 <code>sudo dnf remove -y kernel-core-5.15.12*</code></p>\n<p><code>dnf</code> 和 <code>yum</code> 更新时可以使用exclude命令排除你不希望更新的package，例如更新除了firefox以外的所有package，可以这样</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">sudo dnf update --exclude=firefox\nsudo yum update --exclude=firefox</code>\n        </deckgo-highlight-code>\n<p>再比如更新除了内核以外的所有package：</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">sudo dnf update --exclude=kernel*\nsudo yum update --exclude=kernel*</code>\n        </deckgo-highlight-code>\n<p>如果觉得麻烦，在fedora下，可以通过修改<code>/etc/dnf/dnf.conf</code>，在<code>[main]</code>下添加<code>exclude=kernel*</code>,这样在使用<code>dnf update</code>和<code>yum update</code>时会排除kernel package 的更新。</p>\n<p>/etc/dnf/dnf.conf</p>\n<deckgo-highlight-code language=\"shell\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">[main]\ngpgcheck=1\ninstallonly_limit=3\nclean_requirements_on_remove=True\nbest=False\nskip_if_unavailable=True\nexclude=kernel*</code>\n        </deckgo-highlight-code>\n<p>参考文献</p>\n<p><a href=\"https://chewett.co.uk/blog/800/exclude-fedora-packages-updating-dnf-yum/\">https://chewett.co.uk/blog/800/exclude-fedora-packages-updating-dnf-yum/</a>\n<a href=\"https://laplacence.github.io/2017/02/27/Fedora_delete_redundancy_kernel/\">https://laplacence.github.io/2017/02/27/Fedora_delete_redundancy_kernel/</a></p>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<p>GO编程模式 ： 泛型编程 <a href=\"https://coolshell.cn/articles/21615.html\">https://coolshell.cn/articles/21615.html</a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#class-component\">Class Component</a></li>\n<li><a href=\"#function-component\">Function Component</a></li>\n<li><a href=\"#rendering-a-component\">Rendering a Component</a></li>\n<li><a href=\"#props\">Props</a></li>\n<li><a href=\"#components-in-components\">Components in Components</a></li>\n<li><a href=\"#components-in-files\">Components in Files</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第 45 周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2021-09-08"}}},"pageContext":{"slug":"/arts-45/","previous":{"fields":{"slug":"/arts-44/"},"frontmatter":{"title":"ARTS 第 44 周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/ji-mu-can-ting-guitar/"},"frontmatter":{"title":"吉姆餐厅","tags":["music"],"slug":null}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}