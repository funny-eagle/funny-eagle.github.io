{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-27/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"51522fed-e2de-559a-889d-4ace39d15fe8","excerpt":"Algorithm Review User guide for 4.x Tip 寻找相似图片 接上周的图书图片爬虫引发的问题，图片爬下来以后，有不少“暂无图片”的图片，而且部分这些图片的命名还没有规…","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<pre><code class=\"language-java\">package org.nocoder.leetcode.solution;\n\n/**\n * 709. To Lower Case\n * &#x3C;p>\n * Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.\n * &#x3C;p>\n * Example 1:\n * &#x3C;p>\n * Input: \"Hello\"\n * Output: \"hello\"\n * Example 2:\n * &#x3C;p>\n * Input: \"here\"\n * Output: \"here\"\n * Example 3:\n * &#x3C;p>\n * Input: \"LOVELY\"\n * Output: \"lovely\"\n */\npublic class ToLowerCase {\n    public static String toLowerCase(String str) {\n        StringBuilder lowerCase = new StringBuilder();\n        char[] chars = str.toCharArray();\n        for (int i = 0; i &#x3C; chars.length; i++) {\n            int n = chars[i];\n            if (n >= 65 &#x26;&#x26; n &#x3C;= 90) {\n                n += 32;\n                lowerCase.append((char) n);\n            } else {\n                lowerCase.append((char) n);\n            }\n        }\n        return lowerCase.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(toLowerCase(\"Hello\"));\n    }\n}\n</code></pre>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<p><a href=\"https://netty.io/wiki/user-guide-for-4.x.html#wiki-h2-0\">User guide for 4.x</a></p>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<h3 id=\"寻找相似图片\" style=\"position:relative;\"><a href=\"#%E5%AF%BB%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87\" aria-label=\"寻找相似图片 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>寻找相似图片</h3>\n<p>接上周的图书图片爬虫引发的问题，图片爬下来以后，有不少“暂无图片”的图片，而且部分这些图片的命名还没有规律可循，所以没办法在爬取的时候就过滤掉。我使用了中间表来保存图书的信息及图片在本地的路径，所以可以找到对应关系，从而对类似“暂无图片”的图片进行删除。</p>\n<p>问题就在于如何快速的找到这些“暂无图片”图片，我的想法是通过找相似图片的方式，以一个图片找到其他类似的图片，在网上搜索了一下，找到了阮一峰老师的这篇文章。</p>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html\">相似图片搜索的原理-阮一峰</a></p>\n<p>这里的关键技术叫做”感知哈希算法”（Perceptual hash algorithm），它的作用是对每张图片生成一个”指纹”（fingerprint）字符串，然后比较不同图片的指纹。结果越接近，就说明图片越相似。</p>\n<p>下面是一个最简单的实现：</p>\n<p><strong>第一步，缩小尺寸。</strong></p>\n<p>将图片缩小到8x8的尺寸，总共64个像素。这一步的作用是去除图片的细节，只保留结构、明暗等基本信息，摒弃不同尺寸、比例带来的图片差异。</p>\n<p><strong>第二步，简化色彩。</strong></p>\n<p>将缩小后的图片，转为64级灰度。也就是说，所有像素点总共只有64种颜色。</p>\n<p><strong>第三步，计算平均值。</strong></p>\n<p>计算所有64个像素的灰度平均值。</p>\n<p><strong>第四步，比较像素的灰度。</strong></p>\n<p>将每个像素的灰度，与平均值进行比较。大于或等于平均值，记为1；小于平均值，记为0。</p>\n<p><strong>第五步，计算哈希值。</strong></p>\n<p>将上一步的比较结果，组合在一起，就构成了一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片都采用同样次序就行了。</p>\n<p>得到指纹以后，就可以对比不同的图片，看看64位中有多少位是不一样的。在理论上，这等同于计算<a href=\"http://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\">“汉明距离”</a>（Hamming distance）。如果不相同的数据位不超过5，就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。</p>\n<p>具体的代码实现，可以参见<a href=\"http://www.reddit.com/r/programming/comments/hql8b/looks_like_it_for_the_last_few_months_i_have_had/c1xkcdd\">Wote</a>用python语言写的<a href=\"http://www.ruanyifeng.com/blog/2011/07/imgHash.txt\">imgHash.py</a>。代码很短，只有53行。使用的时候，第一个参数是基准图片，第二个参数是用来比较的其他图片所在的目录，返回结果是两张图片之间不相同的数据位数量（汉明距离）。</p>\n<p>这种算法的优点是简单快速，不受图片大小缩放的影响，缺点是图片的内容不能变更。如果在图片上加几个文字，它就认不出来了。所以，它的最佳用途是根据缩略图，找出原图。</p>\n<p>实际应用中，往往采用更强大的<a href=\"http://www.phash.org/\">pHash</a>算法和<a href=\"http://en.wikipedia.org/wiki/Scale-invariant_feature_transform\">SIFT</a>算法，它们能够识别图片的变形。只要变形程度不超过25%，它们就能匹配原图。这些算法虽然更复杂，但是原理与上面的简便算法是一样的，就是先将图片转化成Hash字符串，然后再进行比较。</p>\n</blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/07/imgHash.txt\">imgHash.py </a> 是<code>python2</code> 版本的，我稍微调整了一下，改成<code>python3</code>版本并在windows 机器上运行了一下，效果很不错。</p>\n<pre><code class=\"language-python\">#!/usr/bin/python\n\nimport glob\nimport os\nimport sys\nfrom functools import reduce\nfrom PIL import Image\n\n\nEXTS = 'jpg', 'jpeg', 'gif', 'png'\n\n\ndef avhash(im):\n    if not isinstance(im, Image.Image):\n        im = Image.open(im)\n    im = im.resize((8, 8), Image.ANTIALIAS).convert('L')\n    avg = reduce(lambda x, y: x + y, im.getdata()) / 64.\n    return reduce(lambda x, y_z: x | (y_z[1] &#x3C;&#x3C; y_z[0]),\n                  enumerate(map(lambda i: 0 if i &#x3C; avg else 1, im.getdata())),\n                  0)\n\n\ndef hamming(h1, h2):\n    h, d = 0, h1 ^ h2\n    while d:\n        h += 1\n        d &#x26;= d - 1\n    return h\n\n\ndef find_similar_img(img_path, dest_dir):\n        h = avhash(img_path)\n        os.chdir(dest_dir)\n        images = []\n        for ext in EXTS:\n            images.extend(glob.glob('*.%s' % ext))\n\n        seq = []\n        prog = int(len(images) > 50 and sys.stdout.isatty())\n        for f in images:\n            seq.append((f, hamming(avhash(f), h)))\n            if prog:\n                perc = 100. * prog / len(images)\n                x = int(2 * perc / 5)\n                print('\\rCalculating... [' + '#' * x + ' ' * (40 - x) + ']'),\n                print('%.2f%%' % perc, '(%d/%d)' % (prog, len(images))),\n                sys.stdout.flush()\n                prog += 1\n\n        if prog:\n            print\n\n        for f, ham in sorted(seq, key=lambda i: i[1]):\n            if ham &#x3C; 5:\n                print(\"%d\\t%s%s%s\" % (ham, dest_dir, \"\\\\\", f))\n\n\nif __name__ == '__main__':\n    for root, dirs, files in os.walk('F:\\\\image\\\\2019-01-03'):\n        find_similar_img('D:\\\\usr\\\\local\\\\github\\\\imgHash\\\\no-img.jpg', root)\n\n</code></pre>\n<p>output:</p>\n<pre><code class=\"language-shell\">D:\\usr\\local\\github\\imgHash\\venv\\Scripts\\python.exe D:/usr/local/github/imgHash/imgHash.py\n0\tF:\\image\\2019-01-03\\0\\9787555502739.jpg\n0\tF:\\image\\2019-01-03\\0\\9787555705956.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558102141.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558104916.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558107627.jpg\n0\tF:\\image\\2019-01-03\\0\\9787801767912.jpg\n0\tF:\\image\\2019-01-03\\0\\9787806193433.jpg\n0\tF:\\image\\2019-01-03\\1\\9787509536063.jpg\n0\tF:\\image\\2019-01-03\\1\\9787511238757.jpg\n0\tF:\\image\\2019-01-03\\1\\9787514321104.jpg\n0\tF:\\image\\2019-01-03\\1\\9787514324389.jpg\n0\tF:\\image\\2019-01-03\\1\\9787530573099.jpg\n0\tF:\\image\\2019-01-03\\1\\9787546632865.jpg\n0\tF:\\image\\2019-01-03\\1\\9787546952581.jpg\n0\tF:\\image\\2019-01-03\\1\\9787549817719.jpg\n0\tF:\\image\\2019-01-03\\1\\9787553458199.jpg\n0\tF:\\image\\2019-01-03\\1\\9787558102387.jpg\n0\tF:\\image\\2019-01-03\\1\\9787560561981.jpg\n0\tF:\\image\\2019-01-03\\2\\9787511247278.jpg\n0\tF:\\image\\2019-01-03\\2\\9787511353801.jpg\n0\tF:\\image\\2019-01-03\\2\\9787513909280.jpg\n</code></pre>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<p>分享几个图片处理算法的文章，非常有意思</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html\">相似图片搜索的原理</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html\">相似图片搜索的原理（二）</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/08/amazing_algorithms_of_image_processing.html\">神奇的图像处理算法</a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n<ul>\n<li><a href=\"#%E5%AF%BB%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87\">寻找相似图片</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第27周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2019-01-05"}}},"pageContext":{"slug":"/arts-27/","previous":{"fields":{"slug":"/arts-26/"},"frontmatter":{"title":"ARTS 第26周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/arts-28/"},"frontmatter":{"title":"ARTS 第28周","tags":["coding","arts"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}