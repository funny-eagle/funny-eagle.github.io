{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-39/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"511d9bc1-d959-5fd9-b197-d3eb70e27e69","excerpt":"Algorithm: 563. Binary Tree Tilt Review: Microservices Logging Best Practices Algorithm Review Micr…","html":"<blockquote>\n<ul>\n<li>Algorithm: 563. Binary Tree Tilt</li>\n<li>Review: Microservices Logging Best Practices</li>\n</ul>\n</blockquote>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\nimport org.nocoder.leetcode.solution.common.TreeNode;\n\n/**\n * 563. Binary Tree Tilt\n * https://leetcode.com/problems/binary-tree-tilt/\n * @author jason\n * @date 2019/5/16.\n */\npublic class BinaryTreeTilt {\n    static int tilt = 0;\n    public static int findTilt(TreeNode root){\n        calNodeTilt(root);\n        return tilt;\n    }\n\n    private static int calNodeTilt(TreeNode cur) {\n        if(cur == null){\n            return 0;\n        }\n        int lt = calNodeTilt(cur.left);\n        int rt = calNodeTilt(cur.right);\n        tilt += Math.abs(lt-rt);\n        return lt + rt + cur.val;\n    }\n\n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.right.right = new TreeNode(5);\n        System.out.println(findTilt(root));\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"microservices-logging-best-practices\" style=\"position:relative;\"><a href=\"#microservices-logging-best-practices\" aria-label=\"microservices logging best practices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://dzone.com/articles/microservices-logging-best-practices\">Microservices Logging Best Practices</a></h3>\n<blockquote>\n<p>如何为微服务应用纪录正确的有意义的日志数据</p>\n</blockquote>\n<ul>\n<li>给 request 关联一个唯一标识\n<ul>\n<li>使用唯一标识标记request记录每次调用</li>\n<li>例如，假设你正在记录每个服务的访问权限和错误日志。如果在服务B中发现错误，则可能有必要了解错误是由来自服务A的请求还是发送到服务C的请求引起的</li>\n</ul>\n</li>\n<li>将request 唯一标识与 response 像关联</li>\n<li>将日志发送到集中位置\n<ul>\n<li>避免登录到各个不同的服务器来读取日志</li>\n</ul>\n</li>\n<li>结构化日志数据\n<ul>\n<li>json，简化解析日志过程</li>\n</ul>\n</li>\n<li>为request添加上下文</li>\n<li>将日志写入本地存储</li>\n<li>纪录有用且有意义的数据\n<ul>\n<li>排查问题时，可以通过日志记录的信息更快的定位到错误</li>\n<li>自动化报警</li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#microservices-logging-best-practices\">Microservices Logging Best Practices</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第 39 周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2019-05-11"}}},"pageContext":{"slug":"/arts-39/","previous":{"fields":{"slug":"/arts-38/"},"frontmatter":{"title":"ARTS 第 38 周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/java-garbage-collection/"},"frontmatter":{"title":"Java 垃圾收集器","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}