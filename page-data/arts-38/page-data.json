{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-38/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"0d8ddf3d-56ed-541c-95d8-453055b5c088","excerpt":"Algorithm: 617. Merge Two Binary Trees Review: The Principles of Good Programming Tip: 再谈依赖倒置 Share…","html":"<blockquote>\n<ul>\n<li>Algorithm: 617. Merge Two Binary Trees</li>\n<li>Review: The Principles of Good Programming</li>\n<li>Tip: 再谈依赖倒置</li>\n<li>Share: Don’t Make Me Think</li>\n</ul>\n</blockquote>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 617. Merge Two Binary Trees\n *\n * Given two binary trees and imagine that when you put one of them to cover the other,\n * some nodes of the two trees are overlapped while the others are not.\n *\n * You need to merge them into a new binary tree. The merge rule is that if two nodes overlap,\n * then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.\n *\n * Example 1:\n *\n * Input:\n *\tTree 1                     Tree 2\n *           1                         2\n *          / \\                       / \\\n *         3   2                     1   3\n *        /                           \\   \\\n *       5                             4   7\n * Output:\n * Merged tree:\n *\t     3\n *\t    / \\\n *\t   4   5\n *\t  / \\   \\\n *\t 5   4   7\n *\n *\n * Note: The merging process must start from the root nodes of both trees.\n * @author YangJinlong\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MergeTwoBinaryTrees</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> t1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> t2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> t1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        t1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> t2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> t1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"the-principles-of-good-programming\" style=\"position:relative;\"><a href=\"#the-principles-of-good-programming\" aria-label=\"the principles of good programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.artima.com/weblogs/viewpost.jsp?thread=331531\">The Principles of Good Programming</a></h3>\n<p>长久以来，不论是初出茅庐还是业界的老前辈，都依然强调着编程原则和设计原则。Bob大叔在他的《整洁架构之道》中提到，写这本书就是为了讲述这些规则，这些永恒的，不变的软件架构规则。</p>\n<p>在学习各种编程原则的时候，看到了 Christopher Diggins 的这篇良好编程的原则，其中罗列了各种原则以及相应的链接，认为多年以来这些编程原则帮助让其成为更好的程序员，且可以帮助任何开发人员来提高效率，写出更加易于维护、BUG更少的代码。</p>\n<p><strong>DRY-Don‘t repeat yourself</strong> - 这可能是编程中最基本的一个原则，就是避免重复。许多编程结构仅用于此目的（例如循环，函数，类等）。一旦你开始重复自己（例如一个长表达式，一系列语句，相同的概念），就创建一个新的抽象。 <a href=\"http://en.wikipedia.org/wiki/Don&#x27;t_repeat_yourself\">http://en.wikipedia.org/wiki/Don%27t_repeat_yourself</a></p>\n<p><strong>抽象原则</strong> - 与DRY相关的抽象原则是“程序中的每一个重要功能都应该在源代码中的一个地方实现”。<a href=\"http://en.wikipedia.org/wiki/Abstraction_principle_(programming%3E%EF%BC%89\">http://en.wikipedia.org/wiki/Abstraction_principle_(programming>）</a></p>\n<p><strong>KISS（保持简单，愚蠢！）</strong> - 简单（并避免复杂性）应始终是一个关键目标。简单的代码编写时间更短，错误更少，更容易修改。 <a href=\"http://en.wikipedia.org/wiki/KISS_principle%3E\">http://en.wikipedia.org/wiki/KISS_principle></a></p>\n<p><strong>避免创建 YAGNI（You aren‘t going to need it）</strong> - 尝试在需要之前不添加功能。<a href=\"http://en.wikipedia.org/wiki/YAGNI%3E\">http://en.wikipedia.org/wiki/YAGNI></a></p>\n<p><strong>做最简单的事可能有用</strong> - 在编程时问一个人自己的一个好问题是“什么是最简单的事情可能有用？”这有助于我们在设计中走向简单化的道路。<a href=\"http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html%3E\">http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html></a></p>\n<p><strong>不要让我思考</strong> - 这实际上是一本关于web可用性的书的标题，它也与编程有关。关键是代码应该易于阅读和理解，只需要最少的努力。如果代码需要阅读者过多的思考才能理解，那么它可能会还需要再被简化。 <a href=\"http://www.sensible.com/dmmt.html%3E\">http://www.sensible.com/dmmt.html></a></p>\n<p><strong>开闭原则</strong> - 软件的类、模块、功能等应该对扩展开放，对修改关闭。换句话说，不要编写可以修改的类，而是编写可以扩展的类。<a href=\"http://en.wikipedia.org/wiki/Open_Closed_Principle%3E\">http://en.wikipedia.org/wiki/Open_Closed_Principle></a></p>\n<p><strong>为维护者编写代码</strong> - 几乎所有值得编写的代码都值得在将来由你或其他人维护。未来你必须维护代码通常会记住尽可能多的代码，作为一个完全陌生人的代码，所以你不妨总是为其他人写代码。记住这一点的一个令人难忘的方式是“总是编码，好像最终维护你的代码的人是一个知道你住在哪里的暴力精神病患者。“ <a href=\"http://c2.com/cgi/wiki?CodeForTheMaintainer%3E\">http://c2.com/cgi/wiki?CodeForTheMaintainer></a></p>\n<p><strong>最不惊讶</strong>的原则 - <strong>最不惊讶</strong>的原则通常在用户界面方面被引用，但同样的原则适用于书面代码。代码应该尽可能少地让读者感到惊讶。遵循标准惯例的方法，代码应该做注释和名称所暗示的，并且应该尽可能避免可能出人意料的副作用。 <a href=\"http://en.wikipedia.org/wiki/Principle_of_least_astonishment%3E\">http://en.wikipedia.org/wiki/Principle_of_least_astonishment></a></p>\n<p><strong>单一责任原则</strong> - 代码组件（例如类或函数）应执行单个定义良好的任务。 <a href=\"http://en.wikipedia.org/wiki/Single_responsibility_principle%3E\">http://en.wikipedia.org/wiki/Single_responsibility_principle></a></p>\n<p><strong>最小化耦合</strong> - 代码的任何部分（代码块，函数，类等）应最小化对其他代码区域的依赖性。这是通过尽可能少地使用共享变量来实现的。“低耦合通常是结构良好的计算机系统和良好设计的标志，当与高内聚相结合时，支持高可读性和可维护性的一般目标” [<a href=\"http://en.wikipedia.org/wiki/Coupling_%EF%BC%88\">http://en.wikipedia.org/wiki/Coupling_（</a> computer_programming](<a href=\"http://en.wikipedia.org/wiki/Coupling_(computer_programming)%EF%BC%89\">http://en.wikipedia.org/wiki/Coupling_(computer_programming)）</a></p>\n<p><strong>最大化内聚</strong> - 应在同一组件中找到具有类似功能的代码。 <a href=\"http://en.wikipedia.org/wiki/Cohesion_(computer_science%3E%EF%BC%89\">http://en.wikipedia.org/wiki/Cohesion_(computer_science>）</a></p>\n<p><strong>隐藏实现详细信息</strong> - 隐藏实现详细信息允许更改代码组件的实现，同时最小化影响使用该组件的任何其他模块。 <a href=\"http://en.wikipedia.org/wiki/Information_Hiding%3E\">http://en.wikipedia.org/wiki/Information_Hiding></a></p>\n<p><strong>迪米特法则</strong> - 代码组件只应与它们的直接关系进行通信（例如它们继承的类，它们包含的对象，通过参数传递的对象等） <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter%3E\">http://en.wikipedia.org/wiki/Law_of_Demeter></a></p>\n<p><strong>避免过早优化</strong> - 除非你的代码有效，否则不要考虑优化，但要比你想要的慢。只有这样才能开始考虑优化，然后才能借助经验数据。“我们应该忘记小的效率，大约97％的时间说：过早的优化是所有邪恶的根源” - 唐纳德克努特。 <a href=\"http://en.wikipedia.org/wiki/Program_optimization%3E\">http://en.wikipedia.org/wiki/Program_optimization></a></p>\n<p><strong>重用代码</strong> - 重用代码可提高代码可靠性并缩短开发时间。 <a href=\"http://en.wikipedia.org/wiki/Code_reuse%3E\">http://en.wikipedia.org/wiki/Code_reuse></a></p>\n<p><strong>关注点分离</strong> - 不同的功能区域应该由不同且最小重叠的代码模块来管理。 <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns%3E\">http://en.wikipedia.org/wiki/Separation_of_concerns></a></p>\n<p><strong>拥抱变化</strong> - 这是Kent Beck的一本书的副标题，也被认为是极限编程和敏捷方法的一个原则。许多其他原则都基于您应该期待的概念并欢迎变革。事实上，最小化耦合等非常古老的软件工程原则与使代码更容易更改的要求直接相关。无论您是否是一名极限编程实践者，这种编写代码的方法都是有意义的。<a href=\"http://www.amazon.com/gp/product/0321278658%3E\">http://www.amazon.com/gp/product/0321278658></a></p>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<h3 id=\"再谈依赖倒置\" style=\"position:relative;\"><a href=\"#%E5%86%8D%E8%B0%88%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE\" aria-label=\"再谈依赖倒置 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再谈依赖倒置</h3>\n<ul>\n<li>高层模块不应该依赖底层模块。两个都应该依赖抽象。</li>\n<li>抽象不应该 依赖细节，细节应该依赖抽象。</li>\n</ul>\n<p>依赖倒置，究竟是什么发生了倒置呢？</p>\n<p>这要从软件模块的层次说起，我们在做项目时，会写很多的低层方法，例如访问数据库、处理某个业务的逻辑等等。再由高层的模块去调用这些方法。这就叫做高层次依赖低层次。</p>\n<p><img src=\"/images/%E9%AB%98%E5%B1%82%E4%BE%9D%E8%B5%96%E4%BD%8E%E5%B1%82.png\" alt=\"\"></p>\n<p>一旦低层模块需要修改或更换，那么高层模块必然也要随之修改，两者的是高度耦合的，这种对于低层次组件的依赖限制了高层组件被重用的可行性。如果将高层组件依赖于抽象的接口或者抽象类，根据里氏替换原则，使用父类的地方都可以用子类来替换。这样就可以将高层组件和低层组件进行解耦，便于重用不同层级的组件，降低软件的维护成本，更加灵活。</p>\n<p><img src=\"/images/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE-%E9%AB%98%E5%B1%82%E4%BE%9D%E8%B5%96%E6%8E%A5%E5%8F%A3.png\" alt=\"\"></p>\n<p>依赖倒置可以说是面向对象设计的标志，编程时要考虑针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都终止与抽象类或者接口。</p>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<h3 id=\"dont-make-me-think\" style=\"position:relative;\"><a href=\"#dont-make-me-think\" aria-label=\"dont make me think permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Don’t make me think</h3>\n<p><a href=\"http://www.sensible.com/dmmt.html\">http://www.sensible.com/dmmt.html</a></p>\n<blockquote>\n<p>《Don’t Make Me Think》适合从事Web设计和Web开发的技术人员阅读，特别适合为如何留住访问者苦恼的网站/网页设计人员阅读。可用性设计是Web设计中最重要也是难度最大的一项任务。本书作者根据多年从业的经验，剖析用户的心理，在用户使用模式、为扫描进行设计、导航设计、主页布局、可用性测试等方面提出了许多独特的观点，并给出了大量简单、易行的可用性设计的建议。本书短小精练，语言轻松诙谐，书中穿插大量色彩丰富的屏幕截图、趣味丛生的卡通插图以及包含大量信息的图表，使枯燥的设计原理变得平易近人。</p>\n</blockquote>\n<p>虽然是关于web可用性的一本书，但道理都是相同的，也可以用于编程。代码应该易于阅读和理解，只需要最少的努力。如果代码需要阅读的人过多的思考才能理解，那么它可能会还需要再被简化。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#the-principles-of-good-programming\">The Principles of Good Programming</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n<ul>\n<li><a href=\"#%E5%86%8D%E8%B0%88%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE\">再谈依赖倒置</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n<ul>\n<li><a href=\"#dont-make-me-think\">Don’t make me think</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第38周：合并二叉树算法、良好编程原则、依赖倒置与可用性设计","tags":["coding","arts"],"description":"本周ARTS包含LeetCode合并二叉树算法解析、良好编程原则分享、依赖倒置原则详解，以及《Don't Make Me Think》读后感。","date":"2019-05-04"}}},"pageContext":{"slug":"/arts-38","previous":{"fields":{"slug":"/principles-of-good-programming"},"frontmatter":{"title":"编程原则","tags":["coding"],"slug":"/principles-of-good-programming"}},"next":{"fields":{"slug":"/arts-39"},"frontmatter":{"title":"ARTS 第39周：二叉树倾斜算法与微服务日志记录最佳实践","tags":["coding","arts"],"slug":"/arts-39"}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}