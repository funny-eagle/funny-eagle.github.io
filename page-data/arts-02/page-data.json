{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-02/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"79c651e1-caf5-528b-a7f9-9fa8dd1ad5d7","excerpt":"Algorithm Add Two Numbers Review Code Review Best Practices\nhttps://medium.com/palantir/code-review…","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<h3 id=\"add-two-numbers\" style=\"position:relative;\"><a href=\"#add-two-numbers\" aria-label=\"add two numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Two Numbers</h3>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\n/**\n * 1.Add Two Numbers\n * \n * You are given two non-empty linked lists representing two non-negative integers.\n * \n * The digits are stored in reverse order and each of their nodes contain a single digit.\n * \n * Add the two numbers and return it as a linked list.\n * \n * You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n * \n * Example\n * Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n * Output: 7 -&gt; 0 -&gt; 8\n * Explanation: 342 + 465 = 807.\n *\n * @author jason\n * @date 18/7/13.\n */\npublic class AddTwoNumbers {\n    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode listNode = new ListNode(0);\n        ListNode cur = listNode;\n\n        int carry = 0;\n        while (l1 != null || l2 != null || carry != 0) {\n            int val1 = (l1 == null) ? 0 : l1.val;\n            int val2 = (l2 == null) ? 0 : l2.val;\n            int sum = val1 + val2 + carry;\n            cur.next = new ListNode(sum % 10);\n            cur = cur.next;\n            carry = sum / 10;\n            if (l1 != null) {\n                l1 = l1.next;\n            }\n            if (l2 != null) {\n                l2 = l2.next;\n            }\n        }\n        return listNode.next;\n    }\n\n    public static void main(String[] args) {\n\n        ListNode l1 = new ListNode(2);\n        l1.next = new ListNode(4);\n        l1.next.next = new ListNode(3);\n\n        ListNode l2 = new ListNode(5);\n        l2.next = new ListNode(6);\n        l2.next.next = new ListNode(4);\n\n        ListNode.print(l1);\n        ListNode.print(l2);\n        ListNode.print(AddTwoNumbers.addTwoNumbers(l1, l2));\n    }\n\n}\n\n/**\n * Definition for singly-linked list.\n */\nclass ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n    public static void print(ListNode listNode) {\n        while (listNode != null) {\n            System.out.print(listNode.val);\n            if (listNode.next != null) {\n                System.out.print(&quot; -&gt; &quot;);\n            }\n            listNode = listNode.next;\n        }\n        System.out.println();\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<blockquote>\n<p>Code Review Best Practices\n<a href=\"https://medium.com/palantir/code-review-best-practices-19e02780015f\">https://medium.com/palantir/code-review-best-practices-19e02780015f</a></p>\n</blockquote>\n<ul>\n<li>\n<p>Why, what, and when to do code reviews\nWhy:\n1.个人编程能力提升；\n2.知识共享帮助团队提升；\n3.代码的一致性；\n4.代码的可读性；\n5.低级错误和代码结构错误\n6.安全\nWhat:\n1.团队就自己的方法达成一致；\n2.团队中的所有人的代码都需要复查；\nWhen：\n在自动化检查之后，代码合并到master分支之前进行code review</p>\n</li>\n<li>\n<p>Preparing code for review\n1.明确复查范围；\n2.提交代码的完整性，确保代码是通过测试和自动化检查的；\n3.重构的代码不应该改变其原有的行为意图；\n4.人工代码复查重心应该在程序逻辑上，而不是样式、语法或格式，这些问题用自动化工具来检测。</p>\n</li>\n<li>\n<p>Performing code reviews\ncode review的目的、执行、可读性和风格、可维护性、安全、评论以及认真回复review评论。</p>\n</li>\n<li>\n<p>Code review examples</p>\n</li>\n</ul>\n<p>Inconsistent naming\n命名风格不一致</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">class MyClass {\n  private int countTotalPageVisits; //R: name variables consistently\n  private int uniqueUsersCount;\n}</code>\n        </deckgo-highlight-code>\n<p>Inconsistent method signatures\n方法签名不一致</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">interface MyInterface {\n  /** Returns {@link Optional#empty} if s cannot be extracted. */\n  public Optional&lt;String&gt; extractString(String s);\n  /** Returns null if {@code s} cannot be rewritten. */\n  //R: should harmonize return values: use Optional&lt;&gt; here, too\n  public String rewriteString(String s);\n}</code>\n        </deckgo-highlight-code>\n<p>Library use\n使用工具类</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//R: remove and replace by Guava&#39;s MapJoiner\nString joinAndConcatenate(Map&lt;String, String&gt; map, String keyValueSeparator, String keySeparator);</code>\n        </deckgo-highlight-code>\n<p>Personal taste</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">int dayCount; //R: nit: I usually prefer numFoo over fooCount; up to you, but we should keep it consistent in this project</code>\n        </deckgo-highlight-code>\n<p>Bugs</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//R: This performs numIterations+1 iterations, is that intentional?\n//   If it is, consider changing the numIterations semantics?\nfor (int i = 0; i &lt;= numIterations; ++i) {\n  ...\n}</code>\n        </deckgo-highlight-code>\n<p>Architectural concerns\n架构问题</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">otherService.call(); //R: I think we should avoid the dependency on OtherService. Can we discuss this in person?</code>\n        </deckgo-highlight-code>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<p>上周在写一个定时删除无用资源的定时任务，用到了列举所有oss对象的方法，阿里的FAQ回复有勘误（已向他们反馈，现已修复）</p>\n<p>获取阿里云OSS上指定bucket下所有的对象信息列表</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">String endpoint = &quot;http://oss-cn-hangzhou.aliyuncs.com&quot;;\nString accessKeyId = &quot;&lt;yourAccessKeyId&gt;&quot;;\nString accessKeySecret = &quot;&lt;yourAccessKeySecret&gt;&quot;;\nString bucketName = &quot;&lt;yourBucketName&gt;&quot;;\n// 创建OSSClient实例。\nOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\nfinal int maxKeys = 200;\nString nextMarker = null;\nObjectListing objectListing;\ndo {\n    objectListing = ossClient.listObjects(new ListObjectsRequest(bucketName).withMarker(nextMarker).withMaxKeys(maxKeys));\n    List&lt;OSSObjectSummary&gt; sums = objectListing.getObjectSummaries();\n    for (OSSObjectSummary s : sums) {\n        System.out.println(&quot;\\t&quot; + s.getKey());\n    }\n    nextMarker = objectListing.getNextMarker();\n} while (objectListing.isTruncated());\n// 关闭OSSClient。\nossClient.shutdown();</code>\n        </deckgo-highlight-code>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<p>20条数据库设计最佳实践</p>\n<blockquote>\n<p><a href=\"https://dzone.com/articles/20-database-design-best\">https://dzone.com/articles/20-database-design-best</a></p>\n</blockquote>\n<ol>\n<li>对<code>table</code>和<code>column</code>使用明确定义的单词并且风格一致的命名。</li>\n<li>表名使用单数（例如：使用<code>StudentCourse</code> 而不是<code>StudentCourses</code>），<code>table</code>代表着一个实体的集合，不需要用复数命名。</li>\n<li>表名不要用空格，否则，您将不得不使用<code>'{'，'['，'''</code>等字符来定义表，访问时还需要用引号<code>“Student Course”</code>， 直接用<code>StudentCourse</code>会更好。</li>\n<li>表名不要使用不必要的前缀或者后缀，例如使用<code>School</code>而不是<code>TblSchool, SchoolTable</code>。</li>\n<li>保持密码的安全性，需要用的时候在程序里解密</li>\n<li>所有表使用<code>integer</code>类型ID字段。 即使暂时不需要ID，将来也可能会需要，例如关联表，索引等。</li>\n<li>索引选择<code>integer</code>类型的列，<code>varchar</code>列索引会引起性能问题。</li>\n<li>使用位字段存储布尔值，使用<code>integer</code>或<code>varchar</code>是不必要的存储消耗。布尔值的字段列命名使用<code>is</code>作为前缀。</li>\n<li>提供数据库访问权限，不要把管理员权限分配给所有人。</li>\n<li>尽量避免出现select * 查询除非必须需要，使用select [需要的列]可以提高查询效率。</li>\n<li>如果应用程序代码足够大，则使用<code>ORM（object relational mapping）</code>框架（例如<code> hibernate</code>，<code>MyBatis</code> …）。ORM框架的性能问题可以通过详细的配置参数来处理。</li>\n<li>将大表、不用的表或很少使用的表，部分划分到不同的物理存储区以提高查询性能。</li>\n<li>对于大型，敏感和任务评论者数据库系统，使用灾难恢复和安全服务，如故障转移群集，自动备份，复制等。</li>\n<li>使用约束（外键，检查，非空…）来保证数据的完整性。 不要把所有的控制权都交给程序代码处理。</li>\n<li>缺乏数据库文档是非常可恶的。 用ER图和说明文档来记录数据库设计。 也为触发器，存储过程和其他脚本编写注释行。</li>\n<li>在大表上经常使用的查询创建索引。 分析工具可以用来确定需要定义哪些索引。 对于多行数据的查询，聚簇索引通常更好。 对于点查询，非聚集索引通常更好。</li>\n<li>数据库服务器和Web服务器必须放置在不同的机器上。 这将提供更高的安全性（攻击者无法直接访问数据），并且由于请求数量和进程使用率降低，服务器CPU和内存性能会更好。</li>\n<li>由于性能问题，不得在频繁查询的表中定义图像和<code>Blob</code>数据列。 这些数据必须放在单独的表中，并且它们的指针可以在查询的表中使用。</li>\n<li>标准化必须根据需要使用，以优化性能。 欠规范化会导致数据的过度重复，过度规范化会导致太多表中的过多连接。两者都会影响性能。</li>\n<li>一定要为数据库设计留足够的时间，否则可能会花费比设计多成百上千倍的时间来维护设计不佳的数据库甚至需要重新设计。</li>\n</ol>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n<ul>\n<li><a href=\"#add-two-numbers\">Add Two Numbers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第 2 周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2018-07-15"}}},"pageContext":{"slug":"/arts-02/","previous":{"fields":{"slug":"/docker-practice/"},"frontmatter":{"title":"Docker的基本用法","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/arts-03/"},"frontmatter":{"title":"ARTS 第 3 周","tags":["coding","arts"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}