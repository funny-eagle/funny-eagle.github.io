{"componentChunkName":"component---src-templates-blog-post-js","path":"/Introduction-to-spring-cloud-load-balancer/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"9783551b-4394-5ccf-99fa-fff1d8d53e1c","excerpt":"原文链接：https://www.baeldung.com/spring-cloud-load-balancer 1. 引言 随着微服务架构变得越来越流行，在不同服务器上运行多个服务变得越来越普遍。…","html":"<p>原文链接：<a href=\"https://www.baeldung.com/spring-cloud-load-balancer\">https://www.baeldung.com/spring-cloud-load-balancer</a></p>\n<h2 id=\"1-引言\" style=\"position:relative;\"><a href=\"#1-%E5%BC%95%E8%A8%80\" aria-label=\"1 引言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 引言</h2>\n<p>随着微服务架构变得越来越流行，在不同服务器上运行多个服务变得越来越普遍。在本快速教程中，我们将了解如何使用 Spring Cloud Load Balancer 创建应用程序。</p>\n<h2 id=\"2什么是负载均衡\" style=\"position:relative;\"><a href=\"#2%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\" aria-label=\"2什么是负载均衡 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.什么是负载均衡</h2>\n<p>负载均衡是在同一应用程序的不同实例之间分配流量的过程。</p>\n<p>要创建容错系统，通常要运行每个应用程序的多个实例。因此，每当一个服务需要与另一个服务通信时，它都需要选择一个特定的实例来发送其请求。</p>\n<p>在负载均衡方有许多算法：</p>\n<ul>\n<li>随机选择(Random)：随机选择实例</li>\n<li>循环(Round-robin)：每次以相同的顺序选择实例</li>\n<li>最少连接数(Least connections)：选择当前连接数最少的实例</li>\n<li>加权指标(Weight metric)：使用加权指标选择最佳实例（例如，CPU 或内存使用率）</li>\n<li>IP 哈希(IP hash)：使用客户端 IP 的哈希映射到实例</li>\n</ul>\n<p>这些只是负载均衡算法的几个示例，每种算法都有其优点和缺点。</p>\n<p>随机选择和循环很容易实现，但可能无法以最佳方式使用服务。</p>\n<p>最少连接和加权指标更复杂，但通常会产生更优化的服务利用率。</p>\n<p>当服务器粘性很重要时，IP 哈希值很棒，但它的容错能力不是很强。</p>\n<h2 id=\"3-spring-cloud-load-balancer-简介\" style=\"position:relative;\"><a href=\"#3-spring-cloud-load-balancer-%E7%AE%80%E4%BB%8B\" aria-label=\"3 spring cloud load balancer 简介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Spring Cloud Load Balancer 简介</h2>\n<p>Spring Cloud Load Balancer 允许我们创建以负载均衡方式与其他应用程序通信的应用程序。使用我们想要的任何算法，我们都可以在进行远程服务调用时轻松实现负载均衡。</p>\n<p>为了说明这一点，让我们看一些示例代码。我们将从一个简单的服务器应用程序开始。服务器将具有单个 HTTP 终结点，可以作为多个实例运行。</p>\n<p>然后，我们将创建一个客户端应用程序，该应用程序使用 Spring Cloud Load Balancer 在服务器的不同实例之间交替请求。</p>\n<h3 id=\"31-示例服务器\" style=\"position:relative;\"><a href=\"#31-%E7%A4%BA%E4%BE%8B%E6%9C%8D%E5%8A%A1%E5%99%A8\" aria-label=\"31 示例服务器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. 示例服务器</h3>\n<p>对于我们的示例服务器，我们从一个简单的 Spring Boot 应用程序开始：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerApplication</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${server.instance.id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> instanceId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from instance %s\"</span><span class=\"token punctuation\">,</span> instanceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们首先注入一个名为 instanceId 的可配置变量。这使我们能够区分多个正在运行的实例。接下来，我们添加一个 HTTP GET 端点，该端点回显消息和实例 ID。</p>\n<p>默认实例将在 ID 为 1 的端口 8080 上运行。要运行第二个实例，我们只需要添加几个程序参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token parameter variable\">--server.instance.id</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token parameter variable\">--server.port</span><span class=\"token operator\">=</span><span class=\"token number\">8081</span></code></pre></div>\n<p>现在，让我们看一下客户端代码。这是我们使用 Spring Cloud Load Balancer 的地方，所以让我们首先将它包含在我们的应用程序中：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-loadbalancer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>接下来，我们创建一个 ServiceInstanceListSupplier 的实现。这是 Spring Cloud Load Balancer 中的关键接口之一。它定义了我们如何查找可用的服务实例。</p>\n<p>对于我们的示例应用程序，我们将对示例服务器的两个不同实例进行硬编码。它们在同一台计算机上运行，但使用不同的端口：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoInstanceSupplier</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ServiceInstanceListSupplier</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DemoInstanceSupplier</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceId <span class=\"token operator\">=</span> serviceId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServiceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> serviceId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Flux</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServiceInstance</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token class-name\">Flux</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultServiceInstance</span><span class=\"token punctuation\">(</span>serviceId <span class=\"token operator\">+</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> serviceId<span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultServiceInstance</span><span class=\"token punctuation\">(</span>serviceId <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> serviceId<span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8081</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在实际系统中，我们希望使用不对服务地址进行硬编码的实现。我们稍后会对此进行更多研究。</p>\n<p>现在，我们创建一个 LoadBalancerConfiguration 类：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@LoadBalancerClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"example-service\"</span><span class=\"token punctuation\">,</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">DemoServerInstanceConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WebClientConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@LoadBalanced</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token class-name\">WebClient<span class=\"token punctuation\">.</span>Builder</span> <span class=\"token function\">webClientBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">WebClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此类有一个角色：创建负载均衡的 WebClient 构建器以发出远程请求。请注意，我们的注释使用服务的伪名称。</p>\n<p>这是因为我们可能无法提前知道运行实例的实际主机名和端口。因此，我们使用伪名称作为占位符，框架在选择正在运行的实例时将替换实际值。</p>\n<p>接下来，让我们创建一个 Configuration 类来实例化我们的服务实例供应商。请注意，我们使用与上述相同的伪名称：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServerInstanceConfiguration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token class-name\">ServiceInstanceListSupplier</span> <span class=\"token function\">serviceInstanceListSupplier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoInstanceSupplier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example-service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在，我们可以创建实际的客户端应用程序。让我们使用上面的 WebClient Bean 向示例服务器发送 10 个请求：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientApplication</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">ConfigurableApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringApplicationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">web</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebApplicationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NONE</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">WebClient</span> loadBalancedClient <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebClient<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> response <span class=\"token operator\">=</span>\n              loadBalancedClient<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example-service/hello\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>查看输出，我们可以确认我们在两个不同的实例之间进行负载均衡：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Hello from instance <span class=\"token number\">2</span>\nHello from instance <span class=\"token number\">1</span>\nHello from instance <span class=\"token number\">2</span>\nHello from instance <span class=\"token number\">1</span>\nHello from instance <span class=\"token number\">2</span>\nHello from instance <span class=\"token number\">1</span>\nHello from instance <span class=\"token number\">2</span>\nHello from instance <span class=\"token number\">1</span>\nHello from instance <span class=\"token number\">2</span>\nHello from instance <span class=\"token number\">1</span></code></pre></div>\n<h2 id=\"4-其他功能\" style=\"position:relative;\"><a href=\"#4-%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD\" aria-label=\"4 其他功能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 其他功能</h2>\n<p>示例服务器和客户端显示了 Spring Cloud Load Balancer 的非常简单的用法。但其他库功能也值得一提。</p>\n<p>首先，示例客户端使用默认的 RoundRobinLoadBalancer 策略。该库还提供了一个 RandomLoadBalancer 类。我们还可以使用我们想要的任何算法创建自己的 ReactorServiceInstanceLoadBalancer 实现。</p>\n<p>此外，该库还提供了一种动态发现服务实例的方法。我们使用 DiscoveryClientServiceInstanceListSupplier 接口执行此操作。这对于与服务发现系统（如 Eureka 或 Zookeeper）集成非常有用。</p>\n<p>除了不同的负载均衡和服务发现功能外，该库还提供基本的重试功能。在后台，它最终依赖于 Spring Retry 库。这允许我们重试失败的请求，可能在一段时间后使用相同的实例。</p>\n<p>另一个内置功能是指标，它建立在千分尺库之上。开箱即用，我们可以获得每个实例的基本服务级别指标，但我们也可以添加自己的指标。</p>\n<p>最后，Spring Cloud Load Balancer 库提供了一种使用 LoadBalancerCacheManager 接口缓存服务实例的方法。这很重要，因为在现实中，查找可用的服务实例可能涉及远程调用。这意味着查找不经常更改的数据可能成本很高，并且它还代表了应用程序中可能的故障点。通过使用服务实例的缓存，我们的应用程序可以解决其中的一些缺点。</p>\n<h2 id=\"5-结论\" style=\"position:relative;\"><a href=\"#5-%E7%BB%93%E8%AE%BA\" aria-label=\"5 结论 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 结论</h2>\n<p>负载均衡是构建现代容错系统的重要组成部分。使用 Spring Cloud Load Balancer，我们可以轻松创建应用程序，这些应用程序使用各种负载均衡技术将请求分发到不同的服务实例。</p>\n<p>这里的所有示例代码都可以在 <a href=\"https://github.com/eugenp/tutorials/tree/master/spring-cloud-modules/spring-cloud-loadbalancer\">GitHub</a> 上找到。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%E5%BC%95%E8%A8%80\">1. 引言</a></p>\n</li>\n<li>\n<p><a href=\"#2%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\">2.什么是负载均衡</a></p>\n</li>\n<li>\n<p><a href=\"#3-spring-cloud-load-balancer-%E7%AE%80%E4%BB%8B\">3. Spring Cloud Load Balancer 简介</a></p>\n<ul>\n<li><a href=\"#31-%E7%A4%BA%E4%BE%8B%E6%9C%8D%E5%8A%A1%E5%99%A8\">3.1. 示例服务器</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD\">4. 其他功能</a></p>\n</li>\n<li>\n<p><a href=\"#5-%E7%BB%93%E8%AE%BA\">5. 结论</a></p>\n</li>\n</ul>","frontmatter":{"title":"Spring Cloud Load Balancer 简介","tags":["coding"],"description":"Spring Cloud Load Balancer 简介","date":"2024-01-30"}}},"pageContext":{"slug":"/Introduction-to-spring-cloud-load-balancer/","previous":{"fields":{"slug":"/operating-system-knowledge/"},"frontmatter":{"title":"[系统架构设计师] 操作系统考点总结","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/architecture-english-word/"},"frontmatter":{"title":"[系统架构设计师]英语词汇","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}