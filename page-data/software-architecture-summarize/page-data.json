{"componentChunkName":"component---src-templates-blog-post-js","path":"/software-architecture-summarize/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Yang's Website","author":"Jason Yang"}},"markdownRemark":{"id":"3b4b635b-539b-585b-b8d6-44f965488fe4","excerpt":"软件架构的概述 软件架构是从需求分析到软件设计之间的过渡过程。 架构设计就是需求分配，将满足需求的职责分配到组件上。 软件架构为软件系统提供了一个结构、行为和属性的高级抽象，由构件的描述、构件的相互…","html":"<h2 id=\"软件架构的概述\" style=\"position:relative;\"><a href=\"#%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A6%82%E8%BF%B0\" aria-label=\"软件架构的概述 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>软件架构的概述</h2>\n<ol>\n<li>软件架构是从<strong>需求分析</strong>到<strong>软件设计</strong>之间的<strong>过渡过程</strong>。</li>\n<li>架构设计就是<strong>需求分配</strong>，将满足需求的职责分配到组件上。</li>\n<li>软件架构为软件系统提供了一个<strong>结构</strong>、<strong>行为</strong>和<strong>属性</strong>的高级抽象，由<strong>构件的描述</strong>、<strong>构件的相互作用（连接件）</strong>、<strong>指导构件集成的模式</strong>以及这些<strong>模式的约束</strong>组成。</li>\n<li>软件架构不仅指定了系统的<strong>组织结构</strong>和<strong>拓扑结构</strong>，并且显示了系统<strong>需求</strong>和<strong>构件</strong>之间的关系，提供了一些<strong>设计决策</strong>的基本原理。</li>\n<li>解决好软件的<strong>复用</strong>、<strong>质量</strong>和<strong>维护问题</strong>，是研究软件架构的<strong>根本目的</strong>。</li>\n<li>软件架构设计包括提出<strong>架构模型</strong>，产生架构设计和进行设计评审等活动，是一个<strong>迭代</strong>的过程。</li>\n<li>架构设计主要关注软件组件的<strong>结构</strong>、<strong>属性</strong>和<strong>交互作用</strong>，并通过多种视图全面描述特定的系统架构。</li>\n<li>软件架构能够在设计变更相对容易的阶段，考虑系统结构的可选方案，便于技术人员与非技术人员就软件设计进行交互，能够展现软件的<strong>结构</strong>、<strong>属性</strong>与<strong>内部交互关系</strong>。</li>\n<li>软件架构是项目干系人进行交流的手段，明确了对系统实现的<strong>约束条件</strong>，决定了开发和维护组织的<strong>组织结构</strong>，制约着系统的<strong>质量属性</strong>。</li>\n<li>软件架构使<strong>推理</strong>和<strong>控制的更改</strong>更加简单，有助于循序渐进的<strong>原型设计</strong>，可以作为<strong>培训</strong>的基础。</li>\n<li>软件架构是<strong>可传递</strong>和<strong>可复用</strong>的模型，通过研究软件架构可能预测<strong>软件的质量</strong>。</li>\n</ol>\n<h3 id=\"软件架构41视图\" style=\"position:relative;\"><a href=\"#%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%8441%E8%A7%86%E5%9B%BE\" aria-label=\"软件架构41视图 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>软件架构4+1视图</h3>\n<blockquote>\n<p>“4+1”视图模型从5个不同的视角来描述软件架构，包括逻辑视图、进程视图、物理视图、开发视图和场景视图。每一个视图只关心系统的一个侧面，5个视图结合在一起才能反映系统的软件架构的全部内容。</p>\n</blockquote>\n<ol>\n<li>逻辑视图：主要支持系统的功能需求，即系统提供给最终用户的服务。</li>\n<li>开发视图：也称为模块视图，主要侧重于软件模块的组织和管理。</li>\n<li>进程视图：侧重于系统的运行特性，主要关注一些非功能性的需求，例如系统的性能和可用性。</li>\n<li>物理视图：主要考虑如何把软件映射到硬件上，它通常要考虑到解决系统拓扑结构、系统安装、通信等问题。</li>\n<li>场景：可以看作是那些重要系统活动的抽象，它使四个视图有机地联系起来，从某种意义上说，场景是最重要的需求抽象。</li>\n</ol>\n<h2 id=\"构件\" style=\"position:relative;\"><a href=\"#%E6%9E%84%E4%BB%B6\" aria-label=\"构件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>构件</h2>\n<ul>\n<li>构件由一组通常需要<strong>同时部署</strong>的<strong>原子构件</strong>组成。</li>\n<li>一个原子构件是一个模块和一组资源。</li>\n<li>构件是一个独立可交付的功能单元，外界通过接口访问其提供的服务。</li>\n</ul>\n<p>构件的特性：</p>\n<ol>\n<li>独立部署单元</li>\n<li>作为第三方的组装单元</li>\n<li>没有外部的可见状态</li>\n</ol>\n<p>对象的特性：</p>\n<ol>\n<li>一个实例单元，具有唯一的标志</li>\n<li>可能具有状态，此状态外部可见</li>\n<li>封装了自己的状态和行为</li>\n</ol>\n<p><strong>一个构件可以包含多个类元素，但是一个类元素只能属于一个构件。</strong></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A6%82%E8%BF%B0\">软件架构的概述</a></p>\n<ul>\n<li><a href=\"#%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%8441%E8%A7%86%E5%9B%BE\">软件架构4+1视图</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%9E%84%E4%BB%B6\">构件</a></p>\n</li>\n</ul>","frontmatter":{"title":"软件架构的概述和构件","tags":["coding"],"description":"系统架构设计师考试要点：软件架构的概述和构件。","date":"2023-06-27"}}},"pageContext":{"slug":"/software-architecture-summarize/","previous":{"fields":{"slug":"/rss-feed/"},"frontmatter":{"title":"中文技术类RSS源订阅推荐","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/java-bytecode-and-instructions/inded/"},"frontmatter":{"title":"Java字节码和指令集","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}