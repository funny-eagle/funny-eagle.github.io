{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-25/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"1739ac5b-fbfa-524c-afc3-eb747a2c15e9","excerpt":"Algorithm Review 10 Common Software Architectural Patterns in a nutshell An architectural pattern i…","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">/**\r\n * 12. Integer to Roman\r\n * &lt;p>\r\n * Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\r\n * &lt;p>\r\n * Symbol       Value\r\n * I             1\r\n * V             5\r\n * X             10\r\n * L             50\r\n * C             100\r\n * D             500\r\n * M             1000\r\n * For example, two is written as II in Roman numeral, just two one's added together.\r\n * Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\r\n * &lt;p>\r\n * Roman numerals are usually written largest to smallest from left to right. However,\r\n * the numeral for four is not IIII. Instead, the number four is written as IV.\r\n * Because the one is before the five we subtract it making four. The same principle applies to the number nine,\r\n * which is written as IX. There are six instances where subtraction is used:\r\n * &lt;p>\r\n * I can be placed before V (5) and X (10) to make 4 and 9.\r\n * X can be placed before L (50) and C (100) to make 40 and 90.\r\n * C can be placed before D (500) and M (1000) to make 400 and 900.\r\n * Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.\r\n * &lt;p>\r\n * Example 1:\r\n * &lt;p>\r\n * Input: 3\r\n * Output: \"III\"\r\n * Example 2:\r\n * &lt;p>\r\n * Input: 4\r\n * Output: \"IV\"\r\n * Example 3:\r\n * &lt;p>\r\n * Input: 9\r\n * Output: \"IX\"\r\n * Example 4:\r\n * &lt;p>\r\n * Input: 58\r\n * Output: \"LVIII\"\r\n * Explanation: L = 50, V = 5, III = 3.\r\n * Example 5:\r\n * &lt;p>\r\n * Input: 1994\r\n * Output: \"MCMXCIV\"\r\n * Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\r\n *\r\n * @author yangjinlong\r\n * @date 2018-12-21 16:34:50\r\n */</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegerToRoman</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">IntegerToRoman</span> integerToRoman <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntegerToRoman</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integerToRoman<span class=\"token punctuation\">.</span><span class=\"token function\">intToRoman</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">intToRoman</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IV\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"XL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"L\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"XC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">900</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                result <span class=\"token operator\">+=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                num <span class=\"token operator\">-=</span> i<span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"10-common-software-architectural-patterns-in-a-nutshell\" style=\"position:relative;\"><a href=\"#10-common-software-architectural-patterns-in-a-nutshell\" aria-label=\"10 common software architectural patterns in a nutshell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013\">10 Common Software Architectural Patterns in a nutshell</a></h3>\n<blockquote>\n<p>An <strong>architectural pattern</strong> is a general, reusable solution to a commonly occurring problem in software architecture within a given context. Architectural patterns are similar to software design pattern but have a broader scope.</p>\n</blockquote>\n<ol>\n<li><strong>Layered pattern</strong></li>\n<li><strong>Client-server pattern</strong></li>\n<li><strong>Master-slave pattern</strong></li>\n<li><strong>Pipe-filter pattern</strong></li>\n<li><strong>Broker pattern</strong></li>\n<li><strong>Peer-to-peer pattern</strong></li>\n<li><strong>Event-bus pattern</strong></li>\n<li><strong>Model-view-controller pattern</strong></li>\n<li><strong>Blackboard pattern</strong></li>\n<li><strong>Interpreter pattern</strong></li>\n</ol>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<h3 id=\"springresourcesstatic-locations\" style=\"position:relative;\"><a href=\"#springresourcesstatic-locations\" aria-label=\"springresourcesstatic locations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>spring.resources.static-locations</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.resources.statis-locations: file:/usr/local/springbootproj/web-front/</code></pre></div>\n<p>这个配置指定静态页面的地址，一般用于测试环境，这个目录下就是<code class=\"language-text\">html</code>,<code class=\"language-text\">css</code>,<code class=\"language-text\">js</code>等静态文件，如果没有最后的<code class=\"language-text\">/</code>，spring boot将会抛出 page not found exception。</p>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<h3 id=\"github-app-imgbot\" style=\"position:relative;\"><a href=\"#github-app-imgbot\" aria-label=\"github app imgbot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>github app <a href=\"https://github.com/marketplace/imgbot\">ImgBot</a></h3>\n<p>以前没关注过github app，前两天在 marketplace 看到一个imgBot应用，比较好用，推荐一下。</p>\n<p>自己优化图片非常耗时，让ImgBot为您完成所有繁重的工作。你只是坐下来审查PRs :)</p>\n<p>安装完成后，ImgBot将遍历GitHub中的所有图片文件并无损压缩它们。减少文件大小，但保持尺寸和质量不变。ImgBot 在完成后会提交一个PR供您查看和合并。</p>\n<p>每次添加或更新图像时，ImgBot都会跳转并使用新的PR为您优化它们。</p>\n<p>以下是imgBot为我优化图片的日志</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[ImgBot] Optimize images\r\n\r\n*Total -- 1,007.54kb -> 807.73kb (19.83%)\r\n\r\n/data/images/design-pattern/strategy_pattern.png -- 2.99kb -> 1.52kb (49.17%)\r\n/data/images/201808/负载均衡.png -- 29.59kb -> 16.69kb (43.59%)\r\n/data/images/201804/springmvc请求跟踪.png -- 184.49kb -> 106.44kb (42.3%)\r\n/data/images/201812/RestTemplate-SimpleClientHttpRequestFactory.png -- 56.83kb -> 34.28kb (39.68%)\r\n/data/images/201805/wechat.jpg -- 27.07kb -> 20.05kb (25.94%)\r\n/data/images/design-pattern/decorator_pattern_uml_diagram.jpg -- 50.75kb -> 40.75kb (19.72%)\r\n/data/images/201807/jenkins-pipline.jpeg -- 161.77kb -> 133.35kb (17.57%)\r\n/data/images/201806/proxy.png -- 32.12kb -> 27.50kb (14.4%)\r\n/data/images/design-pattern/command.jpeg -- 58.42kb -> 51.15kb (12.44%)\r\n/data/images/banner/book.png -- 214.12kb -> 194.69kb (9.07%)\r\n/data/images/201805/jasonyang.jpg -- 63.71kb -> 59.27kb (6.98%)\r\n/data/images/201805/nocoder_monkey.jpeg -- 24.09kb -> 22.92kb (4.86%)\r\n/data/images/design-pattern/observer_pattern_uml_diagram.jpg -- 31.54kb -> 30.30kb (3.91%)\r\n/data/images/design-pattern/singleton_pattern_uml_diagram.jpg -- 13.11kb -> 12.73kb (2.87%)\r\n/data/images/design-pattern/sunwukong_sixears.jpeg -- 22.74kb -> 22.40kb (1.49%)\r\n/data/images/design-pattern/abstractfactory_pattern_uml_diagram.jpg -- 34.19kb -> 33.68kb (1.49%)</code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#10-common-software-architectural-patterns-in-a-nutshell\">10 Common Software Architectural Patterns in a nutshell</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n<ul>\n<li><a href=\"#springresourcesstatic-locations\">spring.resources.static-locations</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n<ul>\n<li><a href=\"#github-app-imgbot\">github app ImgBot</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第25周：整数转罗马数字算法、10种常见软件架构模式、Spring Boot静态资源路径配置与GitHub ImgBot应用推荐","tags":["coding","arts"],"description":"本周ARTS包含LeetCode整数转罗马数字算法解析、10种常见软件架构模式分享、Spring Boot静态资源路径配置详解，以及GitHub ImgBot应用推荐。","date":"2018-12-22"}}},"pageContext":{"slug":"/arts-25","previous":{"fields":{"slug":"/arts-24"},"frontmatter":{"title":"ARTS 第24周：实现strStr算法、Netty User guide、使用datax将mysql数据导入elasticsearch与Netty 4.x用户指南中文翻译","tags":["coding","arts"],"slug":"/arts-24"}},"next":{"fields":{"slug":"/arts-26"},"frontmatter":{"title":"ARTS 第26周：唯一电子邮件地址算法、Netty 4.x用户指南、Python爬取当当图书信息与专业精神和保持思考习惯感悟","tags":["coding","arts"],"slug":"/arts-26"}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}