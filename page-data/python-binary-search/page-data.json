{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-binary-search/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Yang's Blog"}},"markdownRemark":{"id":"92f9465e-6a14-5eb0-a96b-a011bba24ddd","excerpt":"先来玩个数字游戏，我从1～100中选一个整数，你来猜中这个数字。 如果你运气好的话可能十几次就猜中了，也可能是耐心的提问了我100次后。 但其实你只需要提问7次就可以找到答案。 举个例子，假设我选的数字是。 问：这个数是否大于50？ 答：是 问：大于75？ 答：是 问：大于88？ 答：否 问：大于8…","html":"<p>先来玩个数字游戏，我从1～100中选一个整数，你来猜中这个数字。</p>\n<p>如果你运气好的话可能十几次就猜中了，也可能是耐心的提问了我100次后。</p>\n<p>但其实你只需要提问7次就可以找到答案。</p>\n<p>举个例子，假设我选的数字是<code class=\"language-text\">86</code>。</p>\n<ul>\n<li>问：这个数是否大于50？</li>\n</ul>\n<p>答：是</p>\n<ul>\n<li>问：大于75？</li>\n</ul>\n<p>答：是</p>\n<ul>\n<li>问：大于88？</li>\n</ul>\n<p>答：否</p>\n<ul>\n<li>问：大于82？</li>\n</ul>\n<p>答：是</p>\n<ul>\n<li>问：大于86？</li>\n</ul>\n<p>答：否</p>\n<ul>\n<li>问：大于84？</li>\n</ul>\n<p>答：是</p>\n<ul>\n<li>问：大于85？</li>\n</ul>\n<p>答：是</p>\n<p>最终答案锁定，大于85并且不大于86，即<code class=\"language-text\">86</code>。</p>\n<blockquote>\n<p>连续将满足条件的值等分，直到找到正确答案，这就是二分法。\n这个算法的本身就是递归的定义，也可以用递归来实现</p>\n</blockquote>\n<ul>\n<li>如果上下限相同，那么就是数字所在的位置，返回；</li>\n<li>否则找到两者的中间点，也就是上下限的平均值，查找数字在中间点的左侧还是右侧，然后继续查找数字所在的那半部分</li>\n</ul>\n<p>下面实现一个二分法查找，返回查找目标数字所在序列的位置，下标。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/python</span>\n<span class=\"token triple-quoted-string string\">'''\n二分法查找\nsequence 查找的序列，范围\nnumber   查找目标\nlower    下限\nupper    上限    \n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> lower<span class=\"token punctuation\">,</span> upper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> lower <span class=\"token operator\">==</span> upper<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">assert</span> number <span class=\"token operator\">==</span> sequence<span class=\"token punctuation\">[</span>upper<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">return</span> upper\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\tmiddle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lower <span class=\"token operator\">+</span> upper<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span> <span class=\"token comment\">#找到两者的中间点</span>\n\t\t<span class=\"token keyword\">if</span> number <span class=\"token operator\">></span> sequence<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> \n\t\t\t<span class=\"token comment\">#如果在中间点的右侧，就在middle+1 ～ upper的范围内继续找</span>\n\t\t\t<span class=\"token keyword\">return</span> search<span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> middle<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> upper<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token comment\">#如果在中间点的左侧，就在lower～middle的范围继续找</span>\n\t\t\t<span class=\"token keyword\">return</span> search<span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> lower<span class=\"token punctuation\">,</span> middle<span class=\"token punctuation\">)</span>\t\t\t\n<span class=\"token comment\">#初始化一个1～100的列表</span>\nseq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">xrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tseq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> search<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">,</span> <span class=\"token number\">86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Python 另一个经典递归：二分法查找","date":"2017年04月07日 05:42:47","description":"Python 另一个经典递归：二分法查找。"}},"previous":{"fields":{"slug":"/xue-hui-ti-wen/"},"frontmatter":{"title":"学会提问"}},"next":{"fields":{"slug":"/javascript-base-knowleges/"},"frontmatter":{"title":"JavaScript基础"}}},"pageContext":{"id":"92f9465e-6a14-5eb0-a96b-a011bba24ddd","previousPostId":"3789e6ff-277b-591e-85b6-a57ac0b860c1","nextPostId":"d3d7ce3e-654d-52a6-87fd-d36a3ac30193"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}