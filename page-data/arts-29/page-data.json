{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-29/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"d7546015-068a-5b7f-aeb2-b444bbe46304","excerpt":"Algorithm: 804. Unique Morse Code Words Algorithm","html":"<blockquote>\n<p>Algorithm: <a href=\"https://leetcode.com/problems/unique-morse-code-words/\">804. Unique Morse Code Words</a></p>\n</blockquote>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<pre><code class=\"language-java\">package org.nocoder.leetcode.solution;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * 804. Unique Morse Code Words\n * International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\" maps to \"-.-.\", and so on.\n * &#x3C;p>\n * For convenience, the full table for the 26 letters of the English alphabet is given below:\n * &#x3C;p>\n * [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n * Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.\n * &#x3C;p>\n * Return the number of different transformations among all words we have.\n * &#x3C;p>\n * Example:\n * Input: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\n * Output: 2\n * Explanation:\n * The transformation of each word is:\n * \"gin\" -> \"--...-.\"\n * \"zen\" -> \"--...-.\"\n * \"gig\" -> \"--...--.\"\n * \"msg\" -> \"--...--.\"\n * &#x3C;p>\n * There are 2 different transformations, \"--...-.\" and \"--...--.\".\n * Note:\n * &#x3C;p>\n * The length of words will be at most 100.\n * Each words[i] will have length in range [1, 12].\n * words[i] will only consist of lowercase letters.\n *\n * @author jason\n * @date 2019/1/21.\n */\npublic class UniqueMorseCodeWords {\n    private Map&#x3C;String, String> initData() {\n        String[] morseCodes = new String[]{\n                \".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\",\n                \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\",\n                \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\n        };\n\n        HashMap&#x3C;String, String> map = new HashMap&#x3C;>(26);\n        // ASCII a\n        int letter = 97;\n        for (int i = 0; i &#x3C; morseCodes.length; i++) {\n            map.put(String.valueOf((char) letter++), morseCodes[i]);\n        }\n        return map;\n    }\n\n\n    public int uniqueMorseRepresentations(String[] words) {\n        final int MAX_LENGTH = 100;\n        if (words == null || words.length == 0 || words.length > MAX_LENGTH) {\n            return 0;\n        }\n        Map&#x3C;String, String> map = initData();\n        Set&#x3C;String> resultSet = new HashSet&#x3C;>();\n        for (int i = 0; i &#x3C; words.length; i++) {\n            String word = words[i];\n            StringBuilder morseCodes = new StringBuilder();\n            for (int j = 0; j &#x3C; word.length(); j++) {\n                morseCodes.append(map.get(String.valueOf(word.charAt(j))));\n            }\n            resultSet.add(morseCodes.toString());\n        }\n        return resultSet.size();\n    }\n\n    public static void main(String[] args) {\n        UniqueMorseCodeWords uniqueMorseCodeWords = new UniqueMorseCodeWords();\n        uniqueMorseCodeWords.initData();\n        String[] words = new String[]{\"gin\", \"zen\", \"gig\", \"msg\"};\n        uniqueMorseCodeWords.uniqueMorseRepresentations(words);\n    }\n}\n</code></pre>","tableOfContents":"<ul>\n<li><a href=\"#algorithm\">Algorithm</a></li>\n</ul>","frontmatter":{"title":"ARTS 第29周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2019-01-19"}}},"pageContext":{"slug":"/arts-29/","previous":{"fields":{"slug":"/arts-28/"},"frontmatter":{"title":"ARTS 第28周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/arts-30/"},"frontmatter":{"title":"ARTS 第30周","tags":["coding","arts"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}