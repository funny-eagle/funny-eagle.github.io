{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-04/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"7d137782-eb88-5a35-898f-db9db58c95ad","excerpt":"Algorithm Median of Two Sorted Arrays Review Docker for beginners https://docker-curriculum.com/ 公司…","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<h3 id=\"median-of-two-sorted-arrays\" style=\"position:relative;\"><a href=\"#median-of-two-sorted-arrays\" aria-label=\"median of two sorted arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Median of Two Sorted Arrays</h3>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\nimport java.util.Arrays;\n\n/**\n * 4. Median of Two Sorted Arrays\n * &lt;p&gt;\n * There are two sorted arrays nums1 and nums2 of size m and n respectively.\n * &lt;p&gt;\n * Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n * &lt;p&gt;\n * You may assume nums1 and nums2 cannot be both empty.\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * nums1 = [1, 3]\n * nums2 = [2]\n * &lt;p&gt;\n * The median is 2.0\n * &lt;p&gt;\n * Example 2:\n * &lt;p&gt;\n * nums1 = [1, 2]\n * nums2 = [3, 4]\n * &lt;p&gt;\n * The median is (2 + 3)/2 = 2.5\n *\n * @author jason\n * @date 18/7/27.\n */\npublic class MedianofTwoSortedArrays {\n    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int m = nums1.length;\n        int n = nums2.length;\n\n        // 创建一个新数组 a， 存放nums1和nums2的元素\n        int[] a = new int[m + n];\n\n        for (int i = 0; i &lt; m; i++) {\n            a[i] = nums1[i];\n        }\n\n        for (int j = 0; j &lt; n; j++) {\n            a[m + j] = nums2[j];\n        }\n\n        // 数组a排序\n        Arrays.sort(a);\n\n        double result;\n        int len = a.length;\n        if (len == 1) {\n            return a[0];\n        }else if (len == 2){\n            return (a[0] + a[1]) / 2.0;\n        }\n\n        if (len % 2 == 0) {\n            // 数组a的长度为偶数时，取中间的两个值，数组下标取 length/2 - 1, length/2\n            result = (a[(len / 2 -1)] + (a[len / 2])) / 2.0;\n        } else {\n            // 数组a的长度为基数时，取最中间的一个值返回，数组下标取 length%2\n            result = a[Math.round(len / 2)];\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = new int[]{};\n        int[] nums2 = new int[]{1,2,3,4,5};\n        double result = findMedianSortedArrays(nums1, nums2);\n        System.out.println(result);\n    }\n}\n</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"docker-for-beginners\" style=\"position:relative;\"><a href=\"#docker-for-beginners\" aria-label=\"docker for beginners permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker for beginners</h3>\n<p><a href=\"https://docker-curriculum.com/\">https://docker-curriculum.com/</a></p>\n<p>公司最近刚好在搞CI和CD，初步选择了Docker + Jenkins pipline 来配置自动化流程。这篇文章是耗子叔在极客时间专栏《程序员练级攻略（2018）：容器化和自动化运维》文中推荐的入门Docker的文章，对docker的基本概念和和入门操作讲的很到位，很适合跟着搭一遍环境初步感受一下docker。文章中对docker run、docker pull、 docker images、docker ps、docker rm命令都给出了示例，并根据Dockerfile来创建Docker镜像，演示了在AWS上怎么运行Docker应用、多容器的环境、Docker Network，Docker Compse等，使用Elastic Container 等。我在实际操作中也参考了《Docker Practice》、《第一本Docker书》，私有镜像仓库使用nexus3来搭建。跟着操作下来，对docker有了初步的认识。</p>\n<h3 id=\"best-practices-for-writing-dockerfiles\" style=\"position:relative;\"><a href=\"#best-practices-for-writing-dockerfiles\" aria-label=\"best practices for writing dockerfiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Best practices for writing Dockerfiles</h3>\n<p><a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">https://docs.docker.com/develop/develop-images/dockerfile_best-practices/</a>\n啃英文文章的速度还是非常慢，英文词汇量很小，边查词边理解内容，啃下来感觉还是很吃力，继续努力吧！</p>\n<ul>\n<li>Create ephemeral containers</li>\n<li>Understand build context</li>\n<li>Pipe Dockerfile through stdin</li>\n<li>Exclude with .dockerignore</li>\n<li>Use multi-stage builds</li>\n<li>Don’t install unnecessary packages</li>\n<li>Decouple applications</li>\n<li>Minimize the number of layers</li>\n<li>Sort multi-line arguments</li>\n<li>Leverage build cache</li>\n</ul>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<h2 id=\"canal-找不到binlog问题分析\" style=\"position:relative;\"><a href=\"#canal-%E6%89%BE%E4%B8%8D%E5%88%B0binlog%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90\" aria-label=\"canal 找不到binlog问题分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Canal 找不到binlog问题分析</h2>\n<p>项目中使用了阿里的canal，主要用来实时往统计相关表里更新数据，使用的1.0.22版本，经常会抛出binlog找不到的异常，难过的是之前异常的log被误删，排查起来很吃力，最终决定先升级到1.0.24版本，观察一段时间看看情况。排查过程中也学习到了一些mysql bin log相关的知识。</p>\n<ul>\n<li><a href=\"https://github.com/alibaba/canal\">https://github.com/alibaba/canal</a></li>\n<li>canal模拟mysql slave的交互协议，伪装自己为mysql slave，向mysql master发送dump协议</li>\n<li>mysql master收到dump请求，开始推送binary log给slave(也就是canal)</li>\n<li>canal解析binary log对象(原始为byte流)</li>\n<li><code>meta.dat</code>中记录的是客户端最后一次<code>ack</code>的binlog信息</li>\n<li>如果删除了<code>meta.dat</code>记录中对应的的binlog文件，并且此时重新启动canal server，会HY000抛异常，提示找不到对应的binlog，解决办法是删除<code>meta.dat</code></li>\n<li>使用<code>purge master logs before</code>语句无法删除当前正在使用的binlog</li>\n<li><code>reset master</code> 可以清空所有的binlog文件，并新生成一个从1开始计数的binlog文件</li>\n<li>Connection reset by peer\n<ul>\n<li><a href=\"https://github.com/alibaba/otter/issues/244\">https://github.com/alibaba/otter/issues/244</a></li>\n<li><a href=\"https://github.com/alibaba/canal/issues/297\">https://github.com/alibaba/canal/issues/297</a></li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">-- 查看bin log\nshow binary logs;\n\n-- 新生成一个binlog文件\nflush logs;\n\n-- 查看binlong清理时间\nshow variables like &#39;expire_logs_days&#39;\n\n-- 删除指定日期之前的binlog\npurge master logs before&#39;2018-07-25 13:29:59&#39;;</code>\n        </deckgo-highlight-code>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<p>本周的 <code>Share</code> 聊一些跟技术本身不相关的吧，主题是日常学习时间的安排。</p>\n<p>对于我这个夜猫子型的人来说，早晨起床看书学习是一件很痛苦的事情，效率极低，所以很多时候是老婆孩子睡觉了以后，我再看书学习、写写程序，一般是1、2点睡觉，有时debug到3、4点。我很享受这种感觉，夜晚无干扰的coding，思路很清晰，效率很高，我初中背单词就是晚上背，然后第二天很自信的拿到高分的单词听写成绩，哈哈。</p>\n<p>我家小孩刚刚10个月，双方父母都在工作也比较远，所以我媳妇儿全职带孩子，真的很累啊，更心疼我媳妇儿，没办法，终究要经历这一过程。下班回家陪我儿子玩，小孩睡的也晚，非得闹腾到11-12点才肯睡觉。之后的时间就可以任我嗨了，可是有的时候也困得要命，喝咖啡也不管用，扛不住就只能去睡了。</p>\n<p>这几次的ARTS，我自己是很不满意的，因为连着两次都是短时间突击出来的，更像是在完成任务。我更希望能通过解决日常工作的问题和工作积累中就把Review、Tip、Share给完成，花2个小时写两道leetcode算法题、2个小时整理文档。为了能达到轻松完成ARTS，我修改了日常worklog的模板，把遇到的问题及解决办法也一并记录下来，包括查了哪些资料，链接也贴上去，供每周ARTS的内容参考。希望通过这份热忱和不断的坚持，不断的提高自己。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n<ul>\n<li><a href=\"#median-of-two-sorted-arrays\">Median of Two Sorted Arrays</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#docker-for-beginners\">Docker for beginners</a></li>\n<li><a href=\"#best-practices-for-writing-dockerfiles\">Best practices for writing Dockerfiles</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n</li>\n<li>\n<p><a href=\"#canal-%E6%89%BE%E4%B8%8D%E5%88%B0binlog%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90\">Canal 找不到binlog问题分析</a></p>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第 4 周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2018-07-28"}}},"pageContext":{"slug":"/arts-04/","previous":{"fields":{"slug":"/open-mysql-binlog-for-mac/"},"frontmatter":{"title":"Mac 下 MySQL 开启 binlog","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/arts-05/"},"frontmatter":{"title":"ARTS 第 5 周","tags":["coding","arts"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}