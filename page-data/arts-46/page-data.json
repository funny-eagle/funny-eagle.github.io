{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-46/","result":{"data":{"site":{"siteMetadata":{"title":"Nocoder.Org"}},"markdownRemark":{"id":"06222ebc-754d-5eba-83e9-0913380edb18","excerpt":"Algorithm Review 以前在完成Review这一项任务的时候，通过皓哥的专栏和引导，发现了很多优秀的国外技术网站，如medium、DZone、javatpoint、IBM Developer等等，阅读高质量的英文文章，可以提高英文水平，也可以学习大佬对技术理解的视角和思维方式。今天阅读的是dzone…","html":"<h2>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * AddBinary https://leetcode.com/problems/add-binary/\n * &lt;p>\n * Given two binary strings a and b, return their sum as a binary string.\n * &lt;p>\n * Example 1:\n * &lt;p>\n * Input: a = \"11\", b = \"1\"\n * Output: \"100\"\n * Example 2:\n * &lt;p>\n * Input: a = \"1010\", b = \"1011\"\n * Output: \"10101\"\n * Constraints:\n * &lt;p>\n * 1 &lt;= a.length, b.length &lt;= 104\n * a and b consist only of '0' or '1' characters.\n * Each string does not contain leading zeros except for the zero itself.\n * Related Topics\n * Math\n * String\n * Bit Manipulation\n * Simulation\n *\n * @author yangjl\n * @description\n * @date 2023-05-19 15:31\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddBinary</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addBinary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> b <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10000</span> <span class=\"token operator\">||</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid parameters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 两个字符串长度查，在短字符串前面补领0，方便计算</span>\n        <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            prefix <span class=\"token operator\">+=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 参数前面补0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            b <span class=\"token operator\">=</span> prefix <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            a <span class=\"token operator\">=</span> prefix <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> aa <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 用字符串数组来存储结果，长度用aa和bb的都可以</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>aa<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// carry表示进位值</span>\n        <span class=\"token class-name\">String</span> carry <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 从末位开始相加</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> aa<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> sum <span class=\"token operator\">=</span> carry <span class=\"token operator\">+</span> aa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> bb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"000\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n                carry <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"001\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"010\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"100\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n                carry <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"101\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"110\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"011\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n                carry <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n                carry <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 计算到数组首位时，依然有进位，需要变长数组，长度+1，首位赋值为1</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// step1. 暂存res到temp</span>\n                <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tem <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// step2. 新建一个比原数组长度+1的数组</span>\n                res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>aa<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// step3. 首位赋值为1</span>\n                res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// step4. 把原数组内容复制过来，下标从1开始复制</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i1 <span class=\"token operator\">&lt;</span> res<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                    res<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tem<span class=\"token punctuation\">[</span>i1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> res<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">+=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Review</h2>\n<p>以前在完成Review这一项任务的时候，通过皓哥的专栏和引导，发现了很多优秀的国外技术网站，如<a href=\"https://medium.com/\">medium</a>、<a href=\"https://dzone.com\">DZone</a>、<a href=\"https://www.javatpoint.com/\">javatpoint</a>、<a href=\"https://www.ibm.com/\">IBM Developer</a>等等，阅读高质量的英文文章，可以提高英文水平，也可以学习大佬对技术理解的视角和思维方式。今天阅读的是dzone上一位大佬总结的java11到java17的新特性<a href=\"https://dzone.com/articles/whats-new-between-java-11-and-java-17\">What’s New Between Java 11 and Java 17</a>，篇幅不长，可以快速了解上一个LTS版本Java11到17的一些新特性。下面对文中提到的新特性作以下简要整理。</p>\n<ol>\n<li>\n<p>Text Blocks</p>\n<ul>\n<li>文本块，类似python中的文本块支持换行。\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TextBlock</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n                {\n                    \"name\": \"Jason\",\n                    \"age\": \"34\",\n                    \"mail\": \"yangjinlong86@gmail.com\"\n                }\n                \"\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n输出结果也是带格式的\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"34\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"mail\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yangjinlong86@gmail.com\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Switch Expressions</p>\n<ul>\n<li>冒号改为箭头方式，不需要单独写<code class=\"language-text\">break</code>，代码更简洁\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withSwitchExpression</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> fruit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">APPLE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PEAR</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Common fruit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">ORANGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">AVOCADO</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exotic fruit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Undefined fruit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>支持返回值，如果一个case下需要多行代码，使用<code class=\"language-text\">yield</code>关键字指定返回值\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">withYield</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> fruit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">APPLE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PEAR</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the given fruit was: \"</span> <span class=\"token operator\">+</span> fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Common fruit\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">ORANGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">AVOCADO</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Exotic fruit\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Undefined fruit\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">yield</code>支持旧的 switch 语法，也不需要单独写<code class=\"language-text\">break</code>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">oldStyleWithYield</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fruit</span> fruit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">APPLE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PEAR</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Common fruit\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">ORANGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">AVOCADO</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Exotic fruit\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Undefined fruit\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Records</p>\n<ul>\n<li>Records 用来创建一个不可变的数据类，与传统的类相比，无需我们再写构造器, getters, hashCode, equals 和 toString方法</li>\n<li>使用new 创建Record时，如果参数与已经存在的Record相同，那么不会新建的Record副本与原Record是同一个实例。见以下代码最后一行的输出，hashcode是一样的。\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">basicRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">record</span> <span class=\"token class-name\">GrapeRecord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nbrOfPits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">GrapeRecord</span> grape1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GrapeRecord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BLUE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">GrapeRecord</span> grape2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GrapeRecord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WHITE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grape 1 is \"</span> <span class=\"token operator\">+</span> grape1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grape 2 is \"</span> <span class=\"token operator\">+</span> grape2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grape 1 equals grape 2? \"</span> <span class=\"token operator\">+</span> grape1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>grape2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">GrapeRecord</span> grape1Copy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GrapeRecord</span><span class=\"token punctuation\">(</span>grape1<span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> grape1<span class=\"token punctuation\">.</span><span class=\"token function\">nbrOfPits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grape 1 equals its copy? \"</span> <span class=\"token operator\">+</span> grape1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>grape1Copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>grape1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> grape1Copy<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">Grape <span class=\"token number\">1</span> is GrapeRecord<span class=\"token punctuation\">[</span>color<span class=\"token operator\">=</span>java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">[</span>r<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>g<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nbrOfPits<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nGrape <span class=\"token number\">2</span> is GrapeRecord<span class=\"token punctuation\">[</span>color<span class=\"token operator\">=</span>java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">[</span>r<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span>g<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nbrOfPits<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nGrape <span class=\"token number\">1</span> equals grape <span class=\"token number\">2</span><span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\nGrape <span class=\"token number\">1</span> equals its copy<span class=\"token operator\">?</span> <span class=\"token boolean\">true</span>\n<span class=\"token operator\">-</span><span class=\"token number\">520085790</span> <span class=\"token operator\">-</span><span class=\"token number\">520085790</span></code></pre></div>\n</li>\n<li>Record的构造方法中可以增加字段校验逻辑\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">basicRecordWithValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">record</span> <span class=\"token class-name\">GrapeRecord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nbrOfPits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">GrapeRecord</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parameter color=\"</span> <span class=\"token operator\">+</span> color <span class=\"token operator\">+</span> <span class=\"token string\">\", Field color=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parameter nbrOfPits=\"</span> <span class=\"token operator\">+</span> nbrOfPits <span class=\"token operator\">+</span> <span class=\"token string\">\", Field nbrOfPits=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">nbrOfPits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>color <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Color may not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">GrapeRecord</span> grape1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GrapeRecord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BLUE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grape 1 is \"</span> <span class=\"token operator\">+</span> grape1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">GrapeRecord</span> grapeNull <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GrapeRecord</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Sealed Classes</p>\n<ul>\n<li>使用关键字<code class=\"language-text\">sealed</code>配合<code class=\"language-text\">permits</code>来限定类的继承范围，不被允许的类继承该类会编译错误，提示<code class=\"language-text\">'ClassName' is not allowed in the sealed hierarchy</code></li>\n<li>继承了该类的子类需要声明自身的继承范围，使用关键字<code class=\"language-text\">final</code>、<code class=\"language-text\">sealed</code>和<code class=\"language-text\">non-sealed</code>来限定继承范围</li>\n</ul>\n</li>\n<li>\n<p>Pattern matching for instanceof</p>\n<ul>\n<li><code class=\"language-text\">instanceof</code>的类名之后，跟一个变量名，可以省去强转和声明类的步骤\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GrapeClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BLUE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">GrapeClass</span> grape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This grape has \"</span> <span class=\"token operator\">+</span> grape<span class=\"token punctuation\">.</span><span class=\"token function\">getNbrOfPits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" pits.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Helpful NullPointerExceptions</p>\n<ul>\n<li>当发生空指针异常是，异常信息中直接会告诉你是哪个类的哪个方法导致的\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>NullPointerException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Cannot</span> invoke <span class=\"token string\">\"com.mydeveloperplanet.myjava17planet.GrapeClass.getColor()\"</span> because the <span class=\"token keyword\">return</span> value of <span class=\"token string\">\"java.util.HashMap.get(Object)\"</span> is <span class=\"token keyword\">null</span></code></pre></div>\n</li>\n</ul>\n<p>    at com.mydeveloperplanet.myjava17planet.HelpfulNullPointerExceptions.main(HelpfulNullPointerExceptions.java:13)\n```</p>\n</li>\n<li>\n<p>Compact Number Formatting Support</p>\n<ul>\n<li><code class=\"language-text\">NumberFormat</code>类中增加了<code class=\"language-text\">format</code>工厂方法，便于数字类型转换</li>\n</ul>\n</li>\n<li>\n<p>Day Period Support Added</p>\n<ul>\n<li><code class=\"language-text\">DateTimeFormatter</code> 中新增了一个<code class=\"language-text\">B</code>模式，可以直接返回时间所属的时段信息</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DayPeriod</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">DateTimeFormatter</span> dtf <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dtf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\">上午\n下午\n晚上\n晚上\n午夜</code></pre></div>\n<p>默认返回值是当前时区，也可以指定Locale，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">dtf <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withLocale</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token function\">forLanguageTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Stream.toList()</p>\n<ul>\n<li>旧版本中，如果要把Stream转换成List，需要调用<code class=\"language-text\">collect(Collectors.toList)</code>，Java 17 中，<code class=\"language-text\">Stream</code>增加了<code class=\"language-text\">toList()</code>方法，可以直接转换为<code class=\"language-text\">List</code>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">oldStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringList <span class=\"token operator\">=</span>  stringStream<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> stringList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">streamToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringList <span class=\"token operator\">=</span>  stringStream<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> stringList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<h2>Tip</h2>\n<p>使用RabbitMQ时，如果设置了自动ack，再自行手动ack的话，会偶发性的导致消息丢失。</p>\n<p><strong>问题现象</strong></p>\n<p>A服务将数据通过MQ发送到B服务，期间出现消息丢失情况。</p>\n<p><strong>排查过程</strong></p>\n<p>1、A服务发送成功后记录了日志，消息是成功发送出去了。\n2、B服务日志打印不规范，输出日志为null，经核实代码，推断<code class=\"language-text\">message</code>为空，导致<code class=\"language-text\">RuntimeException</code>。\n3、查看RabbitMQ日志，发现异常信息如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"log\"><pre class=\"language-log\"><code class=\"language-log\"><span class=\"token date number\">2023-05-29</span> <span class=\"token time number\">23:52:01.502</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">0.20990.12</span><span class=\"token operator\">></span> Channel error on connection <span class=\"token operator\">&lt;</span><span class=\"token number\">0.2510.0</span><span class=\"token operator\">></span> <span class=\"token operator\">(</span><span class=\"token ip-address constant\">10.42.0.1</span><span class=\"token operator\">:</span><span class=\"token number\">42792</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token ip-address constant\">10.42.0.5</span><span class=\"token operator\">:</span><span class=\"token number\">5672</span><span class=\"token punctuation\">,</span> vhost<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> user<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span><span class=\"token operator\">)</span><span class=\"token punctuation\">,</span> channel <span class=\"token number\">1150</span><span class=\"token operator\">:</span>\n<span class=\"token property\">operation basic.ack caused a channel exception precondition_failed:</span> unknown delivery tag <span class=\"token number\">1</span></code></pre></div>\n<p><strong>问题原因</strong></p>\n<p>到此问题基本明晰了，生产环境的配置文件没有将rabbitmq的ack设置为手动，默认值为<code class=\"language-text\">none</code>，是自动确认。代码中使用<code class=\"language-text\">channel.basicAck()</code>又进行了手动确认，这样的重复确认操作会导致<strong>偶发性</strong>消息丢失情况。</p>\n<p>rabbitmq 为每一个channel维护了一个delivery tag的计数器，采用正向自增，新消息投递时自增，当消息响应时自减；在连续收发的场景中，由于消息发送的间隔较短，部分消息因 consumer的重复确认被rabbitmq 当做已处理而丢弃。</p>\n<p><strong>解决办法</strong></p>\n<p>取消自动确认，配置手动确认。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>rabbitmqHost<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>rabbitmqPort<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>rabbitmqUsername<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>rabbitmqPassword<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /\n    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">simple</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">retry</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          <span class=\"token key atrule\">max-attempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">24</span>\n          <span class=\"token key atrule\">initial-interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3600000</span>\n        <span class=\"token key atrule\">acknowledge-mode</span><span class=\"token punctuation\">:</span> manual</code></pre></div>\n<h2>Share</h2>\n<ul>\n<li>MegaEase纪念陈皓的<a href=\"https://memorial.megaease.cn/\">网站</a></li>\n<li>IBM Developer 中文网站已经在2021年3月15日关停，附上一个github上的<a href=\"https://github.com/nocdr/ibm_bak\">文章备份仓库</a>。</li>\n</ul>","frontmatter":{"title":"ARTS 第46周：纪念皓哥","date":"2023年06月02日","description":null}},"previous":{"fields":{"slug":"/basic-of-network/"},"frontmatter":{"title":"必须要掌握的网络通信原理"}},"next":{"fields":{"slug":"/free-ssl-certs/"},"frontmatter":{"title":"申请免费HTTPS证书"}}},"pageContext":{"id":"06222ebc-754d-5eba-83e9-0913380edb18","previousPostId":"8f364866-e354-5eff-b2e0-e68441811020","nextPostId":"0fc4855c-d673-5a9e-bb24-29040804db97"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}