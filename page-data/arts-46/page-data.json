{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-46/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Yang's Website","author":"Jason Yang"}},"markdownRemark":{"id":"ef2fea0e-cbc3-57b8-8d0c-8aba90962277","excerpt":"历史ARTS Algorithm Review 以前在完成Review这一项任务的时候，通过皓哥的专栏和引导，发现了很多优秀的国外技术网站，如medium、DZone、javatpoint、IBM …","html":"<blockquote>\n<p><a href=\"https://github.com/nocdr/arts\">历史ARTS</a></p>\n</blockquote>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\n/**\n * AddBinary https://leetcode.com/problems/add-binary/\n * &lt;p&gt;\n * Given two binary strings a and b, return their sum as a binary string.\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * Input: a = &quot;11&quot;, b = &quot;1&quot;\n * Output: &quot;100&quot;\n * Example 2:\n * &lt;p&gt;\n * Input: a = &quot;1010&quot;, b = &quot;1011&quot;\n * Output: &quot;10101&quot;\n * Constraints:\n * &lt;p&gt;\n * 1 &lt;= a.length, b.length &lt;= 104\n * a and b consist only of &#39;0&#39; or &#39;1&#39; characters.\n * Each string does not contain leading zeros except for the zero itself.\n * Related Topics\n * Math\n * String\n * Bit Manipulation\n * Simulation\n *\n * @author yangjl\n * @description\n * @date 2023-05-19 15:31\n **/\npublic class AddBinary {\n    public String addBinary(String a, String b) {\n        if (a == null || b == null || a.length() &gt; 10000 || b.length() &gt; 10000)\n            throw new RuntimeException(&quot;invalid parameters&quot;);\n\n        // 两个字符串长度查，在短字符串前面补领0，方便计算\n        int d = a.length() - b.length();\n        String prefix = &quot;&quot;;\n        for (int i = 0; i &lt; Math.abs(d); i++)\n            prefix += &quot;0&quot;;\n\n        // 参数前面补0\n        if (d &gt; 0)\n            b = prefix + b;\n        else\n            a = prefix + a;\n\n        String[] aa = a.split(&quot;&quot;);\n        String[] bb = b.split(&quot;&quot;);\n        // 用字符串数组来存储结果，长度用aa和bb的都可以\n        String[] res = new String[aa.length];\n\n        // carry表示进位值\n        String carry = &quot;0&quot;;\n\n        // 从末位开始相加\n        for (int i = aa.length - 1; i &gt;= 0; i--) {\n            String sum = carry + aa[i] + bb[i];\n\n            if (&quot;000&quot;.equals(sum)) {\n                res[i] = &quot;0&quot;;\n                carry = &quot;0&quot;;\n            }\n\n            if (&quot;001&quot;.equals(sum) || &quot;010&quot;.equals(sum) || &quot;100&quot;.equals(sum)) {\n                res[i] = &quot;1&quot;;\n                carry = &quot;0&quot;;\n            }\n\n            if (&quot;101&quot;.equals(sum) || &quot;110&quot;.equals(sum) || &quot;011&quot;.equals(sum)) {\n                res[i] = &quot;0&quot;;\n                carry = &quot;1&quot;;\n            }\n\n            if (&quot;111&quot;.equals(sum)) {\n                res[i] = &quot;1&quot;;\n                carry = &quot;1&quot;;\n            }\n\n            // 计算到数组首位时，依然有进位，需要变长数组，长度+1，首位赋值为1\n            if (i == 0 &amp;&amp; &quot;1&quot;.equals(carry)) {\n                // step1. 暂存res到temp\n                String[] tem = res;\n                // step2. 新建一个比原数组长度+1的数组\n                res = new String[aa.length + 1];\n                // step3. 首位赋值为1\n                res[0] = &quot;1&quot;;\n                // step4. 把原数组内容复制过来，下标从1开始复制\n                for (int i1 = 1; i1 &lt; res.length; i1++)\n                    res[i1] = tem[i1 - 1];\n            }\n\n        }\n\n        String result = new String();\n        for (int i = 0; i &lt; res.length; i++)\n            result += res[i];\n\n        return result;\n    }\n}\n</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<p>以前在完成Review这一项任务的时候，通过皓哥的专栏和引导，发现了很多优秀的国外技术网站，如<a href=\"https://medium.com/\">medium</a>、<a href=\"https://dzone.com\">DZone</a>、<a href=\"https://www.javatpoint.com/\">javatpoint</a>、<a href=\"https://www.ibm.com/\">IBM Developer</a>等等，阅读高质量的英文文章，可以提高英文水平，也可以学习大佬对技术理解的视角和思维方式。今天阅读的是dzone上一位大佬总结的java11到java17的新特性<a href=\"https://dzone.com/articles/whats-new-between-java-11-and-java-17\">What’s New Between Java 11 and Java 17</a>，篇幅不长，可以快速了解上一个LTS版本Java11到17的一些新特性。下面对文中提到的新特性作以下简要整理。</p>\n<ol>\n<li>\n<p>Text Blocks</p>\n<ul>\n<li>文本块，类似python中的文本块支持换行。\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public class TextBlock {\n    public static void main(String[] args) {\n        String json = &quot;&quot;&quot;\n                {\n                    &quot;name&quot;: &quot;Jason&quot;,\n                    &quot;age&quot;: &quot;34&quot;,\n                    &quot;mail&quot;: &quot;yangjinlong86@gmail.com&quot;\n                }\n                &quot;&quot;&quot;;\n        System.out.println(json);\n    }\n}</code>\n        </deckgo-highlight-code>\n输出结果也是带格式的\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">{\n    &quot;name&quot;: &quot;Jason&quot;,\n    &quot;age&quot;: &quot;34&quot;,\n    &quot;mail&quot;: &quot;yangjinlong86@gmail.com&quot;\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p>Switch Expressions</p>\n<ul>\n<li>冒号改为箭头方式，不需要单独写<code>break</code>，代码更简洁\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">private static void withSwitchExpression(Fruit fruit) {\n    switch (fruit) {\n        case APPLE, PEAR -&gt; System.out.println(&quot;Common fruit&quot;);\n        case ORANGE, AVOCADO -&gt; System.out.println(&quot;Exotic fruit&quot;);\n        default -&gt; System.out.println(&quot;Undefined fruit&quot;);\n    }\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li>支持返回值，如果一个case下需要多行代码，使用<code>yield</code>关键字指定返回值\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">private static void withYield(Fruit fruit) {\n    String text = switch (fruit) {\n        case APPLE, PEAR -&gt; {\n            System.out.println(&quot;the given fruit was: &quot; + fruit);\n            yield &quot;Common fruit&quot;;\n        }\n        case ORANGE, AVOCADO -&gt; &quot;Exotic fruit&quot;;\n        default -&gt; &quot;Undefined fruit&quot;;\n    };\n    System.out.println(text);\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li><code>yield</code>支持旧的 switch 语法，也不需要单独写<code>break</code>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">private static void oldStyleWithYield(Fruit fruit) {\n    System.out.println(switch (fruit) {\n        case APPLE, PEAR:\n            yield &quot;Common fruit&quot;;\n        case ORANGE, AVOCADO:\n            yield &quot;Exotic fruit&quot;;\n        default:\n            yield &quot;Undefined fruit&quot;;\n    });\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p>Records</p>\n<ul>\n<li>Records 用来创建一个不可变的数据类，与传统的类相比，无需我们再写构造器, getters, hashCode, equals 和 toString方法</li>\n<li>使用new 创建Record时，如果参数与已经存在的Record相同，那么不会新建的Record副本与原Record是同一个实例。见以下代码最后一行的输出，hashcode是一样的。\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">private static void basicRecord() {\n    record GrapeRecord(Color color, int nbrOfPits) {}\n    GrapeRecord grape1 = new GrapeRecord(Color.BLUE, 1);\n    GrapeRecord grape2 = new GrapeRecord(Color.WHITE, 2);\n    System.out.println(&quot;Grape 1 is &quot; + grape1);\n    System.out.println(&quot;Grape 2 is &quot; + grape2);\n    System.out.println(&quot;Grape 1 equals grape 2? &quot; + grape1.equals(grape2));\n    GrapeRecord grape1Copy = new GrapeRecord(grape1.color(), grape1.nbrOfPits());\n    System.out.println(&quot;Grape 1 equals its copy? &quot; + grape1.equals(grape1Copy));\n    System.out.println(grape1.hashCode() + &quot; &quot; + grape1Copy.hashCode());\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"log\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">Grape 1 is GrapeRecord[color=java.awt.Color[r=0,g=0,b=255], nbrOfPits=1]\nGrape 2 is GrapeRecord[color=java.awt.Color[r=255,g=255,b=255], nbrOfPits=2]\nGrape 1 equals grape 2? false\nGrape 1 equals its copy? true\n-520085790 -520085790</code>\n        </deckgo-highlight-code>\n</li>\n<li>Record的构造方法中可以增加字段校验逻辑\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">    private static void basicRecordWithValidation() {\n        record GrapeRecord(Color color, int nbrOfPits) {\n            GrapeRecord {\n                System.out.println(&quot;Parameter color=&quot; + color + &quot;, Field color=&quot; + this.color());\n                System.out.println(&quot;Parameter nbrOfPits=&quot; + nbrOfPits + &quot;, Field nbrOfPits=&quot; + this.nbrOfPits());\n                if (color == null) {\n                    throw new IllegalArgumentException(&quot;Color may not be null&quot;);\n                }\n            }\n        }\n        GrapeRecord grape1 = new GrapeRecord(Color.BLUE, 1);\n        System.out.println(&quot;Grape 1 is &quot; + grape1);\n        GrapeRecord grapeNull = new GrapeRecord(null, 2);\n    }</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p>Sealed Classes</p>\n<ul>\n<li>使用关键字<code>sealed</code>配合<code>permits</code>来限定类的继承范围，不被允许的类继承该类会编译错误，提示<code>'ClassName' is not allowed in the sealed hierarchy</code></li>\n<li>继承了该类的子类需要声明自身的继承范围，使用关键字<code>final</code>、<code>sealed</code>和<code>non-sealed</code>来限定继承范围</li>\n</ul>\n</li>\n<li>\n<p>Pattern matching for instanceof</p>\n<ul>\n<li><code>instanceof</code>的类名之后，跟一个变量名，可以省去强转和声明类的步骤\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">Object o = new GrapeClass(Color.BLUE, 2);\nif (o instanceof GrapeClass grape) {\n    System.out.println(&quot;This grape has &quot; + grape.getNbrOfPits() + &quot; pits.&quot;);\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n<li>\n<p>Helpful NullPointerExceptions</p>\n<ul>\n<li>当发生空指针异常是，异常信息中直接会告诉你是哪个类的哪个方法导致的\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">Exception in thread &quot;main&quot; java.lang.NullPointerException: Cannot invoke &quot;com.mydeveloperplanet.myjava17planet.GrapeClass.getColor()&quot; because the return value of &quot;java.util.HashMap.get(Object)&quot; is null</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<p>    at com.mydeveloperplanet.myjava17planet.HelpfulNullPointerExceptions.main(HelpfulNullPointerExceptions.java:13)\n```</p>\n</li>\n<li>\n<p>Compact Number Formatting Support</p>\n<ul>\n<li><code>NumberFormat</code>类中增加了<code>format</code>工厂方法，便于数字类型转换</li>\n</ul>\n</li>\n<li>\n<p>Day Period Support Added</p>\n<ul>\n<li><code>DateTimeFormatter</code> 中新增了一个<code>B</code>模式，可以直接返回时间所属的时段信息</li>\n</ul>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">public class DayPeriod {\n    public static void main(String[] args) {\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;B&quot;);\n        System.out.println(dtf.format(LocalTime.of(8, 0)));\n        System.out.println(dtf.format(LocalTime.of(13, 0)));\n        System.out.println(dtf.format(LocalTime.of(20, 0)));\n        System.out.println(dtf.format(LocalTime.of(23, 0)));\n        System.out.println(dtf.format(LocalTime.of(0, 0)));\n    }\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"log\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">上午\n下午\n晚上\n晚上\n午夜</code>\n        </deckgo-highlight-code>\n<p>默认返回值是当前时区，也可以指定Locale，例如：</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">dtf = DateTimeFormatter.ofPattern(&quot;B&quot;).withLocale(Locale.forLanguageTag(&quot;NL&quot;));</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Stream.toList()</p>\n<ul>\n<li>旧版本中，如果要把Stream转换成List，需要调用<code>collect(Collectors.toList)</code>，Java 17 中，<code>Stream</code>增加了<code>toList()</code>方法，可以直接转换为<code>List</code>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">private static void oldStyle() {\n    Stream&lt;String&gt; stringStream = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);\n    List&lt;String&gt; stringList =  stringStream.collect(Collectors.toList());\n    for(String s : stringList) {\n        System.out.println(s);\n    }\n}\n\nprivate static void streamToList() {\n    Stream&lt;String&gt; stringStream = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);\n    List&lt;String&gt; stringList =  stringStream.toList();\n    for(String s : stringList) {\n        System.out.println(s);\n    }\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<p>使用RabbitMQ时，如果设置了自动ack，再自行手动ack的话，会偶发性的导致消息丢失。</p>\n<p><strong>问题现象</strong></p>\n<p>A服务将数据通过MQ发送到B服务，期间出现消息丢失情况。</p>\n<p><strong>排查过程</strong></p>\n<p>1、A服务发送成功后记录了日志，消息是成功发送出去了。\n2、B服务日志打印不规范，输出日志为null，经核实代码，推断<code>message</code>为空，导致<code>RuntimeException</code>。\n3、查看RabbitMQ日志，发现异常信息如下：</p>\n<deckgo-highlight-code language=\"log\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">2023-05-29 23:52:01.502 [error] &lt;0.20990.12&gt; Channel error on connection &lt;0.2510.0&gt; (10.42.0.1:42792 -&gt; 10.42.0.5:5672, vhost: &#39;/&#39;, user: &#39;admin&#39;), channel 1150:\noperation basic.ack caused a channel exception precondition_failed: unknown delivery tag 1</code>\n        </deckgo-highlight-code>\n<p><strong>问题原因</strong></p>\n<p>到此问题基本明晰了，生产环境的配置文件没有将rabbitmq的ack设置为手动，默认值为<code>none</code>，是自动确认。代码中使用<code>channel.basicAck()</code>又进行了手动确认，这样的重复确认操作会导致<strong>偶发性</strong>消息丢失情况。</p>\n<p>rabbitmq 为每一个channel维护了一个delivery tag的计数器，采用正向自增，新消息投递时自增，当消息响应时自减；在连续收发的场景中，由于消息发送的间隔较短，部分消息因 consumer的重复确认被rabbitmq 当做已处理而丢弃。</p>\n<p><strong>解决办法</strong></p>\n<p>取消自动确认，配置手动确认。</p>\n<deckgo-highlight-code language=\"yml\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">spring:\n  rabbitmq:\n    host: ${rabbitmqHost}\n    port: ${rabbitmqPort}\n    username: ${rabbitmqUsername}\n    password: ${rabbitmqPassword}\n    virtual-host: /\n    listener:\n      simple:\n        retry:\n          enabled: true\n          max-attempts: 24\n          initial-interval: 3600000\n        acknowledge-mode: manual</code>\n        </deckgo-highlight-code>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<ul>\n<li>MegaEase纪念陈皓的<a href=\"https://memorial.megaease.cn/\">网站</a></li>\n<li>IBM Developer 中文网站已经在2021年3月15日关停，附上一个github上的<a href=\"https://github.com/nocdr/ibm_bak\">文章备份仓库</a>。</li>\n<li><a href=\"https://github.com/nocdr/arts\">历史ARTS</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#algorithm\">Algorithm</a></li>\n<li><a href=\"#review\">Review</a></li>\n<li><a href=\"#tip\">Tip</a></li>\n<li><a href=\"#share\">Share</a></li>\n</ul>","frontmatter":{"title":"ARTS 第46周","tags":["coding"],"description":"时隔两年后的第46篇ARTS，纪念陈皓老师。皓哥虽然不在了，但是他留下来的东西，依然指引着我们前进。","date":"2023-06-02"}}},"pageContext":{"slug":"/arts-46/","previous":{"fields":{"slug":"/basic-of-network/"},"frontmatter":{"title":"必须要掌握的网络通信原理","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/free-ssl-certs/"},"frontmatter":{"title":"申请免费HTTPS证书","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}