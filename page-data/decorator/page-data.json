{"componentChunkName":"component---src-templates-blog-post-js","path":"/decorator/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"84e3c518-ff22-5214-81e5-7119cdad783e","excerpt":"本文以西游记中的“真假美猴王”为例，一起温习一下装饰器模式的使用场景及具体实现过程。 真假美猴王的故事就不讲了，就算我标题党了吧。\n我们的目的是要把一个猴子类包装成孙悟空和六耳猕猴，但是不能改变猴子…","html":"<blockquote>\n<p>本文以西游记中的“真假美猴王”为例，一起温习一下装饰器模式的使用场景及具体实现过程。</p>\n</blockquote>\n<p>真假美猴王的故事就不讲了，就算我标题党了吧。\n我们的目的是要把一个猴子类包装成孙悟空和六耳猕猴，但是不能改变猴子类本身的结构。\n简单描述一下装饰过程：</p>\n<ul>\n<li>首先定义一个猴子接口类，猴子具有<code>introduce()</code>方法，用于让猴子嗞哩哇啦的说话介绍自己；</li>\n<li>定义一个普通的猴子类，实现猴子接口类，重载<code>introduce()</code>方法，介绍一下自己，例如：“我是个会说话的猴子！”；</li>\n<li>定义一个抽象类，实现猴子接口，作为抽象装饰器类，因为要装饰猴子，所以需要有一个接收猴子类的构造方法；</li>\n<li>定义具体的装饰器类，继承抽象装饰器类，实现具体的装饰方法，这里我们需要定义两个具体的装饰器类，一个是孙悟空装饰器，一个是六耳猕猴装饰器，在各自的类里增加展示自己技能的描述方法，例如“我会七十二变”等；</li>\n</ul>\n<p>过程大概就上面这么几步，接着咱们就开始coding！</p>\n<p>1、首先是定义一个猴子接口，泛代表各种猴类。<code>IMonkey.java</code></p>\n<pre><code class=\"language-java\">public interface IMonkey{\n    /**\n     * 猴子自我介绍\n    /*\n    void introduce();\n}\n</code></pre>\n<p>2、定义猴子实现类，表示一个普通的猴子。<code>Monkey.java</code></p>\n<pre><code class=\"language-java\">public class Monkey implements IMonkey{\n    @Override\n    public void introduce(){\n        System.out.print(\"我是一个会说话的猴子！\");\n    }\n}\n</code></pre>\n<p>3、定义抽象装饰器类。<code>AbstractMonkeyDecorator.java</code></p>\n<pre><code class=\"language-java\">public abstract class AbstractMonkeyDecorator implements IMonkey{\n    protected IMonkey monkey;\n    public AbstractMonkeyDecorator(IMonkey monkey){\n        this.monkey = monkey;\n    }\n\n    @Override\n    public void introduce(){\n        monkey.introduce();\n    }\n}\n</code></pre>\n<p>4、定义具体的装饰类，用于将普通的猴子包装成孙悟空或六耳猕猴。</p>\n<ul>\n<li>先来一个孙悟空的装饰类<code>SunWuKongDecorator.java</code></li>\n</ul>\n<pre><code class=\"language-java\">public class SunWuKongDecorator extends AbstractMonkeyDecorator{\n    public SunWuKongDecorator(IMonkey monkey){\n        super(monkey);\n    }\n    \n    @Override\n    public void introduce(){\n        // 调用monkey自身的方法\n        monkey.introduce();\n        // 调用装饰方法\n        decorate(monkey);\n    }\n\n    private void decorate(IMonkey monkey){\n        System.out.print(\"我是美猴王，我会七十二变！\");\n        System.out.print(\"我师傅是大唐高僧！\");\n    }\n}\n</code></pre>\n<ul>\n<li>再来一个六耳猕猴的装饰类<code>SixEarsMonkeyDecorator.java</code></li>\n</ul>\n<pre><code class=\"language-java\">public class SixEarsMonkeyDecorator extends AbstractMonkeyDecorator{\n    public SixEarsMonkeyDecorator(IMonkey monkey){\n        super(monkey);\n    }\n    \n    @Override\n    public void introduce(){\n        // 调用monkey自身的方法\n        monkey.introduce();\n        // 调用装饰方法\n        decorate(monkey);\n    }\n\n    // 具体的装饰方法实现逻辑\n    private void decorate(IMonkey monkey){\n        System.out.print(\"我才是美猴王，我会七十二变！\");\n        System.out.print(\"大唐高僧是我师傅！\");\n    }\n}\n</code></pre>\n<p>5、测试程序</p>\n<pre><code class=\"language-java\">public static void main(String[] args){\n    // 首先看看一个普通的猴子的自我介绍\n    System.out.print(\"使用装饰器前的猴子：\");\n    Monkey monkey = new Monkey();\n    monkey.introduce();\n\n    System.out.println();\n\n    // 使用孙悟空装饰器装饰猴子\n    System.out.print(\"使用孙悟空装饰器装饰后的猴子：\");\n    SunWuKongDecorator swkDecorator = new SunWuKongDecorator(new Monkey());\n    swkDecorator.introduce();\n\n    System.out.println();\n\n    // 使用六耳猕猴装饰器装饰猴子\n    System.out.print(\"使用六耳猕猴装饰器装饰后的猴子：\");\n    SixEarsMonkeyDecorator semDecorator = new SixEarsMonkeyDecorator(new Monkey());\n    semDecorator.introduce();\n}\n\n</code></pre>\n<p>6、输出结果</p>\n<pre><code class=\"language-java\">使用装饰器前的猴子：我是一个会说话的猴子！\n使用孙悟空装饰器装饰后的猴子：我是一个会说话的猴子！我是美猴王，我会七十二变！我师傅是大唐高僧！\n使用六耳猕猴装饰器装饰后的猴子：我是一个会说话的猴子！我才是美猴王，我会七十二变！大唐高僧是我师傅！\n</code></pre>\n<p>总结：上面的例子中，我们并没有对Monkey类本身进行改造，而是采用装饰器包装的方式为Monkey增加了新的功能，这种方式可以动态的为实体类增加功能，比继承更灵活，且装饰类和被装饰类互不影响，可以各自扩展。</p>","tableOfContents":"","frontmatter":{"title":"装饰器模式之真假美猴王","tags":["coding"],"description":"本文以西游记中的“真假美猴王”为例，一起温习一下装饰器模式的使用场景及具体实现过程。","date":"2018-05-19"}}},"pageContext":{"slug":"/decorator/","previous":{"fields":{"slug":"/Integrate-an-h2-database-in-your-springboot-app/"},"frontmatter":{"title":"Integrate an H2 Database in Your Spring Boot App","tags":["coding"],"slug":""}},"next":{"fields":{"slug":"/ubuntu-1604-source/"},"frontmatter":{"title":"ubuntu 1604 apt source","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}