{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-12/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"f056282f-71b5-568f-9f4b-85e92945f5b5","excerpt":"小伙伴们中秋节快乐！终于可以放松几天，这两天带着老婆孩子玩疯了，满成都到处跑，当然ARTS绝不能落下，只是晚到了一天。（算法题做的很烂，一点点调试出来的） Algorithm Longest Com…","html":"<blockquote>\n<p>小伙伴们中秋节快乐！终于可以放松几天，这两天带着老婆孩子玩疯了，满成都到处跑，当然<code>ARTS</code>绝不能落下，只是晚到了一天。（算法题做的很烂，一点点调试出来的）</p>\n</blockquote>\n<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<h3 id=\"longest-common-prefix\" style=\"position:relative;\"><a href=\"#longest-common-prefix\" aria-label=\"longest common prefix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Longest Common Prefix</h3>\n<pre><code class=\"language-java\">package org.nocoder.leetcode.solution;\n\n/**\n * Write a function to find the longest common prefix string amongst an array of strings.\n * &#x3C;p>\n * If there is no common prefix, return an empty string \"\".\n * &#x3C;p>\n * Example 1:\n * &#x3C;p>\n * Input: [\"flower\",\"flow\",\"flight\"]\n * Output: \"fl\"\n * Example 2:\n * &#x3C;p>\n * Input: [\"dog\",\"racecar\",\"car\"]\n * Output: \"\"\n * Explanation: There is no common prefix among the input strings.\n * Note:\n * &#x3C;p>\n * All given inputs are in lowercase letters a-z.\n *\n * @author jason\n * @date 2018/9/23.\n */\npublic class LongestCommonPrefix {\n\n    public static String longestCommonPrefix(String[] strs) {\n        String commonPrefix = \"\";\n        if (strs == null || strs.length == 0) {\n            return commonPrefix;\n        }\n        \n        if (strs.length == 1) {\n            commonPrefix = strs[0];\n            return commonPrefix;\n        }\n        \n        // i: 代表数组下标\n        int i = 0;\n        // x: 数组元素中的字符串的下标\n        int x = 0;\n        while (i &#x3C; strs.length) {\n            if ((x + 1) > strs[i].length() || (x + 1) > strs[i + 1].length()) {\n                return commonPrefix;\n            }\n            // 获取数组中下标为i字符串,并截取(x, x+1)位置的字符\n            String s = strs[i].substring(x, x + 1);\n            // 将s与下一个字符串中的相同位置的字符进行比较\n            if (s.equals(strs[i + 1].substring(x, x + 1))) {\n                if ((i + 1) == (strs.length - 1)) {\n                    commonPrefix += s;\n                    // 字符串下标右移一位\n                    x++;\n                    // 重置数组下标\n                    i = 0;\n                } else {\n                    i++;\n                }\n            } else {\n                return commonPrefix;\n            }\n        }\n        return commonPrefix;\n    }\n\n    public static void main(String[] args) {\n        String[] arr1 = new String[]{\"flower\", \"flow\", \"flight\"};\n        String[] arr2 = new String[]{\"a\", \"a\"};\n        System.out.println(longestCommonPrefix(arr1));\n        System.out.println(longestCommonPrefix(arr2));\n    }\n}\n\n</code></pre>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"understanding-the-proxy-design-pattern\" style=\"position:relative;\"><a href=\"#understanding-the-proxy-design-pattern\" aria-label=\"understanding the proxy design pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understanding the Proxy Design Pattern</h3>\n<blockquote>\n<p><a href=\"https://medium.com/@mithunsasidharan/understanding-the-proxy-design-pattern-5e63fe38052a\">https://medium.com/@mithunsasidharan/understanding-the-proxy-design-pattern-5e63fe38052a</a></p>\n</blockquote>\n<p>又一篇印度阿三的博客文章，哈哈，理解一下代理模式，作者列举了两个例子。</p>\n<p>一个是新郎新娘之间的对话，中间有个Aunty在传话，她可以保护新娘免受新郎的一些令人反感的问题，也可以修改新郎的问题，或者修改新娘的回答。去新娘娘家接亲，在印度是这样，在中国也差不多吧，非得一大帮人给你在中间搅和一下，哈哈。</p>\n<p>另一个例子是ATM作为银行支行的代理，来处理银行业务，比如取钱，查余额，当然ATM机没本事处理所有的银行业务，在实现Bank接口的某些方法时，作了简化或者其他处理，比如修改个人信息，可能只会提示一下用户，请持银行卡和证件到柜台操作。</p>\n<ul>\n<li>\n<p>Subject (Bank) : 银行通用接口</p>\n</li>\n<li>\n<p>Real Subject (Bank Branch) : 实现接口的Real Subject</p>\n</li>\n<li>\n<p>Proxy (ATM) : 代理类</p>\n</li>\n</ul>\n<p>代理模式的适用场景：</p>\n<ul>\n<li>存在重量级对象，希望实现更简单的版本</li>\n<li>不需要重量级对象的全部功能</li>\n<li>想要限制对重量级对象的访问</li>\n<li>创建重量级对象时有时间延迟或者非常复杂的时候</li>\n</ul>\n<p>几个缺点：</p>\n<ul>\n<li>身份比较  ：不能进行身份比较，因为不知道确切的Real Subject，只是代理人。</li>\n<li>歧义  ：客户可能不知道它现在访问的Real Subject与前一个Subject不同。</li>\n<li>安全问题：因为客户端不知道代理正在做什么，除了调用Real Subject。</li>\n</ul>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<p>新建的一个Springboot项目，准备部署到测试环境，<code>java -jar xxx.jar</code>运行，得到如下提示</p>\n<blockquote>\n<p>Failed to load Main-Class manifest attribute from xxx.jar</p>\n</blockquote>\n<p>问题在于<code>pom.xml</code>中，我虽然引入了<code>spring-boot-maven-plugin</code> 却没有配置<code>repackage</code>,正确的配置如下</p>\n<pre><code class=\"language-xml\">&#x3C;plugin>\n    &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n    &#x3C;artifactId>spring-boot-maven-plugin&#x3C;/artifactId>\n    &#x3C;configuration>\n        &#x3C;executable>true&#x3C;/executable>\n    &#x3C;/configuration>\n    &#x3C;executions>\n        &#x3C;execution>\n            &#x3C;goals>\n                &#x3C;goal>repackage&#x3C;/goal>\n            &#x3C;/goals>\n        &#x3C;/execution>\n    &#x3C;/executions>\n&#x3C;/plugin>\n</code></pre>\n<p>附上官方文档：\n<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html\">68. Spring Boot Maven Plugin</a></p>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<blockquote>\n<p>代理模式（Proxy Pattern）：静态代理 - 最易懂的设计模式解析\n<a href=\"https://www.jianshu.com/p/a8aa6851e09e\">https://www.jianshu.com/p/a8aa6851e09e</a></p>\n</blockquote>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n<ul>\n<li><a href=\"#longest-common-prefix\">Longest Common Prefix</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li><a href=\"#understanding-the-proxy-design-pattern\">Understanding the Proxy Design Pattern</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第12周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2018-09-22"}}},"pageContext":{"slug":"/arts-12/","previous":{"fields":{"slug":"/arts-11/"},"frontmatter":{"title":"ARTS 第11周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/some-tips/"},"frontmatter":{"title":"云图web项目技术栈盘点","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}