{"componentChunkName":"component---src-templates-blog-post-js","path":"/database-info-encode-and-decode/","result":{"data":{"site":{"siteMetadata":{"title":"Jason Yang's Blog"}},"markdownRemark":{"id":"3cce79d6-fead-5dfe-9826-8b115134cb4c","excerpt":"我们一般都会把数据库的连接信息写在properties配置文件里，只要打开了配置文件，就能直接看到数据库的用户名密码等信息，一些项目会要求不能出现明文密码，接下来，简单三步，实现配置文件里的用户名和密码加密。 一、加密解密工具类 我以Base64为例，写个简单的加密和解密工具 二、通过继承spring…","html":"<blockquote>\n<p>我们一般都会把数据库的连接信息写在properties配置文件里，只要打开了配置文件，就能直接看到数据库的用户名密码等信息，一些项目会要求不能出现明文密码，接下来，简单三步，实现配置文件里的用户名和密码加密。</p>\n</blockquote>\n<h3>一、加密解密工具类</h3>\n<p>我以Base64为例，写个简单的加密和解密工具</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.utils;\r\n\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\n/**\r\n * EncryptUtil\r\n * Created by jason on 2017/7/18.\r\n */\r\npublic class EncryptUtil {\r\n\r\n    /**\r\n     * 加密\r\n     * @param value\r\n     * @return encode string value\r\n     */\r\n    public static String encode(String value){\r\n        if(StringUtils.isNotBlank(value)){\r\n            Base64 base64 = new Base64();\r\n            return new String(base64.encode(value.getBytes()));\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 解密\r\n     * @param value\r\n     * @return decode string value\r\n     */\r\n    public static String decode(String value){\r\n        if(StringUtils.isNotBlank(value)){\r\n            Base64 base64 = new Base64();\r\n            return new String(base64.decode(value.getBytes()));\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(EncryptUtil.encode(&quot;test&quot;));\r\n        System.out.println(EncryptUtil.decode(&quot;dGVzdA==&quot;));\r\n    }\r\n}\r\n</code>\n        </deckgo-highlight-code>\n<h3>二、通过继承spring配置类并重写处理方法实现解密</h3>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.security;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.nocoder.utils.EncryptUtil;\r\nimport org.springframework.beans.BeansException;\r\nimport org.springframework.beans.factory.BeanInitializationException;\r\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\r\nimport org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;\r\n\r\nimport java.util.Properties;\r\n\r\n/**\r\n * 通过继承spring配置类并重写处理方法实现密文解密\r\n * Created by jason on 2017/7/18.\r\n */\r\npublic class EncryptPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer{\r\n    @Override\r\n    protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) throws BeansException {\r\n        try {\r\n            String username = props.getProperty(&quot;username&quot;);\r\n            if(StringUtils.isNotBlank(username)){\r\n                props.setProperty(&quot;username&quot;, EncryptUtil.decode(username));\r\n            }\r\n\r\n            String password = props.getProperty(&quot;password&quot;);\r\n            if(StringUtils.isNotBlank(password)){\r\n                props.setProperty(&quot;password&quot;,EncryptUtil.decode(password));\r\n            }\r\n            super.processProperties(beanFactory, props);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            throw new BeanInitializationException(e.getMessage());\r\n        }\r\n    }\r\n}\r\n</code>\n        </deckgo-highlight-code>\n<h3>三、修改配置文件</h3>\n<p>1、使用加密工具类对用户名和密码进行加密，修改properties配置文件<code>config.properties</code></p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">driver=org.postgresql.Driver\r\nurl=jdbc:postgresql://127.0.0.1:5432/freda_db\r\nusername=加密后的用户名\r\npassword=加密后的密码\r\n#定义初始连接数\r\ninitialSize=0\r\n#定义最大连接数\r\nmaxActive=50\r\n#定义最大空闲\r\nmaxIdle=50\r\n#定义最小空闲\r\nminIdle=1\r\n#定义最长等待时间\r\nmaxWait=60000</code>\n        </deckgo-highlight-code>\n<p>2、修改<code>applicationContext.xml</code>，引入配置文件</p>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;!-- 引入配置文件，这里的class就是之前写的那个Spring配置类的路径 --&gt;\r\n&lt;bean id=&quot;encryptPropertyConfigurer&quot; class=&quot;org.nocoder.security.EncryptPropertyPlaceholderConfigurer&quot;&gt;\r\n    &lt;property name=&quot;locations&quot;&gt;\r\n        &lt;list&gt;\r\n            &lt;value&gt;classpath:config.properties&lt;/value&gt;\r\n        &lt;/list&gt;\r\n    &lt;/property&gt;\r\n&lt;/bean&gt;</code>\n        </deckgo-highlight-code>\n<p>OK了，就这三步，重启服务试试看！</p>","frontmatter":{"title":"Spring 数据库密码加密","date":"2017年07月18日 12:03:42","description":"一些项目会要求不能出现明文密码，简单三步，实现配置文件里的用户名和密码加密。"}},"previous":{"fields":{"slug":"/apache-commons-codec/"},"frontmatter":{"title":"Apache Commons Codec 加密解密"}},"next":{"fields":{"slug":"/idea-for-mac-key-map/"},"frontmatter":{"title":"【转载】IntelliJ IDEA For Mac 快捷键"}}},"pageContext":{"id":"3cce79d6-fead-5dfe-9826-8b115134cb4c","previousPostId":"6d8b6936-3cf2-5b34-93c1-72fee54bdcf9","nextPostId":"72555359-9d4e-51e1-b019-404d387d90ec"}},"staticQueryHashes":["3274528899","3589320610"],"slicesMap":{}}