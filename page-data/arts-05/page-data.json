{"componentChunkName":"component---src-templates-blog-post-js","path":"/arts-05/","result":{"data":{"site":{"siteMetadata":{"title":"Funny Eagle","author":"Jason Yang"}},"markdownRemark":{"id":"0811ce21-6266-5f12-9121-563ccdfbf284","excerpt":"Algorithm Longest Palindromic Substring Review Demystifying Dynamic Programming https://medium.free…","html":"<h2 id=\"algorithm\" style=\"position:relative;\"><a href=\"#algorithm\" aria-label=\"algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algorithm</h2>\n<h3 id=\"longest-palindromic-substring\" style=\"position:relative;\"><a href=\"#longest-palindromic-substring\" aria-label=\"longest palindromic substring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Longest Palindromic Substring</h3>\n<deckgo-highlight-code language=\"java\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">package org.nocoder.leetcode.solution;\n\n/**\n * 5. Longest Palindromic Substring\n * &lt;p&gt;\n * Given a string s, find the longest palindromic substring in s.\n * &lt;p&gt;\n * You may assume that the maximum length of s is 1000.\n * &lt;p&gt;\n * Example 1:\n * Input: &quot;babad&quot;\n * Output: &quot;bab&quot;\n * Note: &quot;aba&quot; is also a valid answer.\n * &lt;p&gt;\n * Example 2:\n * Input: &quot;cbbd&quot;\n * Output: &quot;bb&quot;\n *\n * @author jason\n * @date 18/8/4.\n */\npublic class LongestPalindromicSubstring {\n    public static String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        boolean[][] palindrome = new boolean[s.length()][s.length()];\n        String result = &quot;&quot;;\n        int maxLength = 0;\n        for (int i = s.length() - 1; i &gt;= 0; i--) {\n            for (int j = i; j &lt; s.length(); j++) {\n                if ((s.charAt(i) == s.charAt(j)) &amp;&amp; (j - i &lt;= 2 || palindrome[i + 1][j - 1])) {\n                    palindrome[i][j] = true;\n                    if (maxLength &lt; j - i + 1) {\n                        maxLength = j - i + 1;\n                        result = s.substring(i, j + 1);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(LongestPalindromicSubstring.longestPalindrome(&quot;a&quot;));\n        System.out.println(LongestPalindromicSubstring.longestPalindrome(&quot;aa&quot;));\n        System.out.println(LongestPalindromicSubstring.longestPalindrome(&quot;aaa&quot;));\n        System.out.println(LongestPalindromicSubstring.longestPalindrome(&quot;cbbd&quot;));\n        System.out.println(LongestPalindromicSubstring.longestPalindrome(&quot;babad&quot;));\n    }\n}\n</code>\n        </deckgo-highlight-code>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<h3 id=\"demystifying-dynamic-programming\" style=\"position:relative;\"><a href=\"#demystifying-dynamic-programming\" aria-label=\"demystifying dynamic programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demystifying Dynamic Programming</h3>\n<blockquote>\n<p><a href=\"https://medium.freecodecamp.org/demystifying-dynamic-programming-3efafb8d4296\">https://medium.freecodecamp.org/demystifying-dynamic-programming-3efafb8d4296</a></p>\n<p>Demystifying Dynamic Programming</p>\n<p>How to construct &#x26; code dynamic programming algorithms</p>\n</blockquote>\n<h4 id=\"dynamic-programming-defined\" style=\"position:relative;\"><a href=\"#dynamic-programming-defined\" aria-label=\"dynamic programming defined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Programming Defined</h4>\n<p>Dynamic programming amounts to breaking down an optimization problem into simpler sub-problems, and storing the solution to each sub-problem so that each sub-problem is only solved once.</p>\n<h4 id=\"sub-problems-on-sub-problems-on-sub-problems\" style=\"position:relative;\"><a href=\"#sub-problems-on-sub-problems-on-sub-problems\" aria-label=\"sub problems on sub problems on sub problems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sub-problems on Sub-problems on Sub-problems</h4>\n<p>Sub-problems are smaller versions of the original problem. In fact, sub-problems often look like a reworded version of the original problem. If formulated correctly, sub-problems build on each other in order to obtain the solution to the original problem.</p>\n<h4 id=\"dynamic-programming-process\" style=\"position:relative;\"><a href=\"#dynamic-programming-process\" aria-label=\"dynamic programming process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Programming Process</h4>\n<p>Step 1: Identify the sub-problem in words.\nStep 2: Write out the sub-problem as a recurring mathematical decision.\nStep 3: Solve the original problem using Steps 1 and 2.\nStep 4: Determine the dimensions of the memoization array and the direction in which it should be filled.\nStep 5: Code it!</p>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip</h2>\n<h3 id=\"docker-spring-boot-项目使用位于容器外宿主机的配置文件\" style=\"position:relative;\"><a href=\"#docker-spring-boot-%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E4%BD%8D%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%A4%96%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" aria-label=\"docker spring boot 项目使用位于容器外宿主机的配置文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker spring boot 项目使用位于容器外（宿主机）的配置文件</h3>\n<blockquote>\n<p>springboot 允许我们把配置文件放置在与jar文件同路径的config目录下，结合docker的数据卷挂载，可以把容器内的config目录映射到宿主机的指定目录下，从而实现容器内的项目使用宿主机目录下的配置文件。</p>\n</blockquote>\n<p>pom.xml dockerfile 插件配置</p>\n<deckgo-highlight-code language=\"xml\" terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;plugin&gt;\n    &lt;groupId&gt;com.spotify&lt;/groupId&gt;\n    &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;1.4.3&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;repository&gt;192.168.28.121:9090/my-service&lt;/repository&gt;\n        &lt;tag&gt;${project.version}&lt;/tag&gt;\n        &lt;useMavenSettingsForAuth&gt;true&lt;/useMavenSettingsForAuth&gt;\n        &lt;buildArgs&gt;\n            &lt;JAR_FILE&gt;target/${project.build.finalName}.jar&lt;/JAR_FILE&gt;\n        &lt;/buildArgs&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;</code>\n        </deckgo-highlight-code>\n<p>在项目根目录下编写 Dockerfile 文件，命名为 <code>Dockerfile</code></p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">FROM frolvlad/alpine-oraclejdk8:latest\nARG JAR_FILE\nADD ${JAR_FILE} /usr/local/my-service/app.jar\nRUN mkdir /usr/local/my-service/config\nENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/usr/local/my-service/app.jar&quot;, &quot;--spring.config.location=/usr/local/my-service/config/application.properties&quot;]</code>\n        </deckgo-highlight-code>\n<p>运行docker容器，使用 -v 参数挂载数据卷，指定容器外配置文件的目录，例如：</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">docker run -it -p 8080:8080 -v /Users/jason/my-service/config/:/usr/local/my-service/config/ 192.168.28.121:9090/my-service:1.0</code>\n        </deckgo-highlight-code>\n<p>上面的例子中 <code>-v /Users/jason/my-service/config/:/usr/local/my-service/config/</code> 冒号左边的路径代表的是宿主机，冒号右边的路径代表的是docker 容器内的路径</p>\n<h2 id=\"share\" style=\"position:relative;\"><a href=\"#share\" aria-label=\"share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Share</h2>\n<h3 id=\"jenkins-pipeline-script\" style=\"position:relative;\"><a href=\"#jenkins-pipeline-script\" aria-label=\"jenkins pipeline script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jenkins Pipeline script</h3>\n<p>Node：一个Node就是一个Jenkins节点，可以是Master，也可以是Slave，是Pipeline中具体Step的运行环境。</p>\n<p>Stage：一个Pipeline有多个Stage组成，每个Stage包含一组Step。注意一个Stage可以跨多个Node执行，即Stage实际上是Step的逻辑分组。</p>\n<p>Step：是最基本的运行单元，可以是创建一个目录、从代码库中checkout代码、执行一个shell命令、构建Docker镜像、将服务发布到Kubernetes集群中。Step由Jenkins和Jenkins各种插件提供。</p>\n<p>将node、stage、step的Groovy DSL写在一个Jenkinsfile文件中，Jenkinsfile会被放到代码库的根目录下。下面是一个Jenkinsfile的Helloworld的例子：</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">node {\n   stage(&#39;prepare&#39;) {\n       echo &#39;prepare step1&#39;\n       echo &#39;prepare step2&#39;\n   }\n   stage(&#39;build&#39;) {\n       echo &#39;build step1&#39;\n       echo &#39;build step2&#39;\n   }\n   stage(&#39;deploy&#39;) {\n       echo &#39;deploy step1&#39;\n       echo &#39;deploy step2&#39;\n   }\n}</code>\n        </deckgo-highlight-code>\n<p>下面是一个实际使用的例子，从gitlab检出代码，使用maven命令打包，构建docker镜像并推送到镜像仓库，然后使用ssh连接到测试服务器运行docker容器</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">node {\n    stage(&#39;Checkout From Gitlab&#39;) {\n        git credentialsId: &#39;gitlab-passwd&#39;, url: &#39;http://192.168.28.216/yuntu/eureka-server.git&#39;, branch: &#39;dev&#39;\n    }\n\n    stage(&#39;Maven Install&#39;){\n        def mvnHome = tool name: &#39;maven3&#39;, type: &#39;maven&#39;\n        def mvnCMD = &quot;${mvnHome}/bin/mvn&quot;\n        sh &quot;${mvnCMD} clean install&quot;\n    }\n\n\n    stage(&#39;Build And Push Docker Image&#39;){\n        def mvnHome = tool name: &#39;maven3&#39;, type: &#39;maven&#39;\n        def mvnCMD = &quot;${mvnHome}/bin/mvn&quot;\n        sh &quot;${mvnCMD} dockerfile:build&quot;\n        sh &quot;${mvnCMD} dockerfile:push&quot;\n    }\n\n    stage(&#39;Run Docker Container On Test Server&#39;){\n        def dockerLogin = &#39;docker login -u admin -p admin123 192.168.28.121:9090&#39;\n        def dockerPull = &#39;docker  pull 192.168.28.121:9090/eureka-server:1.0&#39;\n        def dockerStop = &#39;docker stop eureka-server&#39;\n        def dockerRm = &#39;docker rm eureka-server&#39;\n        def dockerRun = &#39;docker run -p 1112:1111 --name eureka-server -d 192.168.28.121:9090/eureka-server:1.0&#39;\n        sshagent([&#39;jason-local-vm&#39;]) {\n            sh &quot;ssh -o StrictHostKeyChecking=no jason@192.168.28.121 ${dockerLogin}&quot;\n            sh &quot;ssh -o StrictHostKeyChecking=no jason@192.168.28.121 ${dockerPull}&quot;\n            sh &quot;ssh -o StrictHostKeyChecking=no jason@192.168.28.121 ${dockerStop}&quot;\n            sh &quot;ssh -o StrictHostKeyChecking=no jason@192.168.28.121 ${dockerRm}&quot;\n            sh &quot;ssh -o StrictHostKeyChecking=no jason@192.168.28.121 ${dockerRun}&quot;\n        }\n    }\n}</code>\n        </deckgo-highlight-code>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#algorithm\">Algorithm</a></p>\n<ul>\n<li><a href=\"#longest-palindromic-substring\">Longest Palindromic Substring</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n<ul>\n<li>\n<p><a href=\"#demystifying-dynamic-programming\">Demystifying Dynamic Programming</a></p>\n<ul>\n<li><a href=\"#dynamic-programming-defined\">Dynamic Programming Defined</a></li>\n<li><a href=\"#sub-problems-on-sub-problems-on-sub-problems\">Sub-problems on Sub-problems on Sub-problems</a></li>\n<li><a href=\"#dynamic-programming-process\">Dynamic Programming Process</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tip\">Tip</a></p>\n<ul>\n<li><a href=\"#docker-spring-boot-%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E4%BD%8D%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%A4%96%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">Docker spring boot 项目使用位于容器外（宿主机）的配置文件</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#share\">Share</a></p>\n<ul>\n<li><a href=\"#jenkins-pipeline-script\">Jenkins Pipeline script</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS 第5周","tags":["coding","arts"],"description":"Algorithm, Reiview, Tip and Share","date":"2018-08-04"}}},"pageContext":{"slug":"/arts-05/","previous":{"fields":{"slug":"/arts-04/"},"frontmatter":{"title":"ARTS 第4周","tags":["coding","arts"],"slug":""}},"next":{"fields":{"slug":"/ssh-proxy/"},"frontmatter":{"title":"开启ssh代理服务","tags":["coding"],"slug":""}}}},"staticQueryHashes":["2052298874"],"slicesMap":{}}