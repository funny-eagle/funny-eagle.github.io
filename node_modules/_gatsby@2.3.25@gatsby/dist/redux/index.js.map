{"version":3,"sources":["../../src/redux/index.js"],"names":["Redux","require","_","mitt","emitter","reducers","writeToCache","readFromCache","readState","state","nodes","nodesByType","Map","forEach","node","type","internal","has","set","get","id","e","exports","store","createStore","combineReducers","applyMiddleware","multi","dispatch","next","action","Array","isArray","filter","Boolean","map","saveState","process","env","DANGEROUSLY_DISABLE_OOM","Promise","resolve","getState","pickedState","pick","subscribe","lastAction","emit"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAE,OAAF,CAArB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAE,QAAF,CAAjB;;AAEA,MAAME,IAAI,GAAGF,OAAO,CAAE,MAAF,CAApB,C,CAEA;;;AACA,MAAMG,OAAO,GAAGD,IAAI,EAApB,C,CAEA;;AACA,MAAME,QAAQ,GAAGJ,OAAO,CAAE,YAAF,CAAxB;;iBACwCA,OAAO,CAAE,WAAF,C;MAAvCK,Y,YAAAA,Y;MAAcC,a,YAAAA,a,EAEtB;;;AACA,MAAMC,SAAS,GAAG,MAAM;AACtB,MAAI;AACF,UAAMC,KAAK,GAAGF,aAAa,EAA3B;;AACA,QAAIE,KAAK,CAACC,KAAV,EAAiB;AACf;AACAD,MAAAA,KAAK,CAACE,WAAN,GAAoB,IAAIC,GAAJ,EAApB;AACAH,MAAAA,KAAK,CAACC,KAAN,CAAYG,OAAZ,CAAoBC,IAAI,IAAI;AAAA,cAClBC,IADkB,GACTD,IAAI,CAACE,QADI,CAClBD,IADkB;;AAE1B,YAAI,CAACN,KAAK,CAACE,WAAN,CAAkBM,GAAlB,CAAsBF,IAAtB,CAAL,EAAkC;AAChCN,UAAAA,KAAK,CAACE,WAAN,CAAkBO,GAAlB,CAAsBH,IAAtB,EAA4B,IAAIH,GAAJ,EAA5B;AACD;;AACDH,QAAAA,KAAK,CAACE,WAAN,CAAkBQ,GAAlB,CAAsBJ,IAAtB,EAA4BG,GAA5B,CAAgCJ,IAAI,CAACM,EAArC,EAAyCN,IAAzC;AACD,OAND;AAOD;;AACD,WAAOL,KAAP;AACD,GAdD,CAcE,OAAOY,CAAP,EAAU,CACV;AACD;;AACD,SAAO,EAAP;AACD,CAnBD;;AAqBAC,OAAO,CAACd,SAAR,GAAoBA,SAApB;AAEA,MAAMe,KAAK,GAAGvB,KAAK,CAACwB,WAAN,CACZxB,KAAK,CAACyB,eAAN,mBAA2BpB,QAA3B,EADY,EAEZG,SAAS,EAFG,EAGZR,KAAK,CAAC0B,eAAN,CAAsB,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA6B;AACjD,SAAOC,IAAI,IAAIC,MAAM,IACnBC,KAAK,CAACC,OAAN,CAAcF,MAAd,IACIA,MAAM,CAACG,MAAP,CAAcC,OAAd,EAAuBC,GAAvB,CAA2BP,QAA3B,CADJ,GAEIC,IAAI,CAACC,MAAD,CAHV;AAID,CALD,CAHY,CAAd,C,CAWA;;AACA,SAASM,SAAT,GAAqB;AACnB,MAAIC,OAAO,CAACC,GAAR,CAAYC,uBAAhB,EAAyC;AACvC,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,QAAMhC,KAAK,GAAGc,KAAK,CAACmB,QAAN,EAAd;;AACA,QAAMC,WAAW,GAAGzC,CAAC,CAAC0C,IAAF,CAAOnC,KAAP,EAAc,CAC/B,OAD+B,EAE/B,QAF+B,EAG/B,2BAH+B,EAI/B,eAJ+B,EAK/B,YAL+B,EAM/B,uBAN+B,CAAd,CAApB;;AASA,SAAOH,YAAY,CAACqC,WAAD,CAAnB;AACD;;AAEDrB,OAAO,CAACc,SAAR,GAAoBA,SAApB;AAEAb,KAAK,CAACsB,SAAN,CAAgB,MAAM;AACpB,QAAMC,UAAU,GAAGvB,KAAK,CAACmB,QAAN,GAAiBI,UAApC;AACA1C,EAAAA,OAAO,CAAC2C,IAAR,CAAaD,UAAU,CAAC/B,IAAxB,EAA8B+B,UAA9B;AACD,CAHD;AAKA;;AACAxB,OAAO,CAAClB,OAAR,GAAkBA,OAAlB;AAEA;;AACAkB,OAAO,CAACC,KAAR,GAAgBA,KAAhB","sourcesContent":["const Redux = require(`redux`)\nconst _ = require(`lodash`)\n\nconst mitt = require(`mitt`)\n\n// Create event emitter for actions\nconst emitter = mitt()\n\n// Reducers\nconst reducers = require(`./reducers`)\nconst { writeToCache, readFromCache } = require(`./persist`)\n\n// Read old node data from cache.\nconst readState = () => {\n  try {\n    const state = readFromCache()\n    if (state.nodes) {\n      // re-create nodesByType\n      state.nodesByType = new Map()\n      state.nodes.forEach(node => {\n        const { type } = node.internal\n        if (!state.nodesByType.has(type)) {\n          state.nodesByType.set(type, new Map())\n        }\n        state.nodesByType.get(type).set(node.id, node)\n      })\n    }\n    return state\n  } catch (e) {\n    // ignore errors.\n  }\n  return {}\n}\n\nexports.readState = readState\n\nconst store = Redux.createStore(\n  Redux.combineReducers({ ...reducers }),\n  readState(),\n  Redux.applyMiddleware(function multi({ dispatch }) {\n    return next => action =>\n      Array.isArray(action)\n        ? action.filter(Boolean).map(dispatch)\n        : next(action)\n  })\n)\n\n// Persist state.\nfunction saveState() {\n  if (process.env.DANGEROUSLY_DISABLE_OOM) {\n    return Promise.resolve()\n  }\n\n  const state = store.getState()\n  const pickedState = _.pick(state, [\n    `nodes`,\n    `status`,\n    `componentDataDependencies`,\n    `jsonDataPaths`,\n    `components`,\n    `staticQueryComponents`,\n  ])\n\n  return writeToCache(pickedState)\n}\n\nexports.saveState = saveState\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n\n/** Event emitter */\nexports.emitter = emitter\n\n/** Redux store */\nexports.store = store\n"],"file":"index.js"}