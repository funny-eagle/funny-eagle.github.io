{"version":3,"sources":["../../src/query/query-runner.js"],"names":["fs","require","report","path","store","withResolverContext","generatePathChunkName","formatErrorDetails","mod","boundActionCreators","resultHashes","module","exports","queryJob","getState","schema","program","graphql","query","context","result","errors","errorDetails","Map","set","isPage","JSON","stringify","pluginCreatorId","panicOnBuild","componentPath","Object","assign","pageContext","jsonName","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","resultJSON","resultHash","createHash","update","digest","replace","dataPath","hash","id","modInt","toString","resultPath","join","directory","outputFile","dispatch","type","payload","key","value","pageQueryRun"],"mappings":"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","sourcesContent":["// @flow\n\nimport { graphql as graphqlFunction } from \"graphql\"\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst path = require(`path`)\nconst { store } = require(`../redux`)\nconst withResolverContext = require(`../schema/context`)\nconst { generatePathChunkName } = require(`../utils/js-chunk-names`)\nconst { formatErrorDetails } = require(`./utils`)\nconst mod = require(`hash-mod`)(999)\nconst { boundActionCreators } = require(`../redux/actions`)\n\nconst resultHashes = {}\n\ntype QueryJob = {\n  id: string,\n  hash?: string,\n  jsonName: string,\n  query: string,\n  componentPath: string,\n  context: Object,\n  isPage: Boolean,\n}\n\n// Run query\nmodule.exports = async (queryJob: QueryJob) => {\n  const { schema, program } = store.getState()\n\n  const graphql = (query, context) =>\n    graphqlFunction(\n      schema,\n      query,\n      context,\n      withResolverContext(context, schema),\n      context\n    )\n\n  // Run query\n  let result\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(queryJob.query, queryJob.context)\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    const errorDetails = new Map()\n    errorDetails.set(`Errors`, result.errors || [])\n    if (queryJob.isPage) {\n      errorDetails.set(`URL path`, queryJob.context.path)\n      errorDetails.set(\n        `Context`,\n        JSON.stringify(queryJob.context.context, null, 2)\n      )\n    }\n    errorDetails.set(`Plugin`, queryJob.pluginCreatorId || `none`)\n    errorDetails.set(`Query`, queryJob.query)\n\n    report.panicOnBuild(`\nThe GraphQL query from ${queryJob.componentPath} failed.\n\n${formatErrorDetails(errorDetails)}`)\n  }\n\n  // Add the page context onto the results.\n  if (queryJob && queryJob.isPage) {\n    result[`pageContext`] = Object.assign({}, queryJob.context)\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.jsonName\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = require(`crypto`)\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n    // Remove potentially unsafe characters. This increases chances of collisions\n    // slightly but it should still be very safe + we get a shorter\n    // url vs hex.\n    .replace(/[^a-zA-Z0-9-_]/g, ``)\n\n  let dataPath\n  if (queryJob.isPage) {\n    dataPath = `${generatePathChunkName(queryJob.jsonName)}-${resultHash}`\n  } else {\n    dataPath = queryJob.hash\n  }\n\n  if (resultHashes[queryJob.id] !== resultHash) {\n    resultHashes[queryJob.id] = resultHash\n    let modInt = ``\n    // We leave StaticQuery results at public/static/d\n    // as the babel plugin has that path hard-coded\n    // for importing static query results.\n    if (queryJob.isPage) {\n      modInt = mod(dataPath).toString()\n    }\n\n    // Always write file to public/static/d/ folder.\n    const resultPath = path.join(\n      program.directory,\n      `public`,\n      `static`,\n      `d`,\n      modInt,\n      `${dataPath}.json`\n    )\n\n    if (queryJob.isPage) {\n      dataPath = `${modInt}/${dataPath}`\n    }\n\n    await fs.outputFile(resultPath, resultJSON)\n\n    store.dispatch({\n      type: `SET_JSON_DATA_PATH`,\n      payload: {\n        key: queryJob.jsonName,\n        value: dataPath,\n      },\n    })\n  }\n\n  boundActionCreators.pageQueryRun({\n    path: queryJob.id,\n    componentPath: queryJob.componentPath,\n    isPage: queryJob.isPage,\n  })\n\n  return result\n}\n"],"file":"query-runner.js"}