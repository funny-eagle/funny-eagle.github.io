"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScalarTypeComposer = void 0;

var _graphql = require("./graphql");

var _is = require("./utils/is");

var _SchemaComposer = require("./SchemaComposer");

var _misc = require("./utils/misc");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ScalarTypeComposer {
  static create(typeDef, schemaComposer) {
    if (!(schemaComposer instanceof _SchemaComposer.SchemaComposer)) {
      throw new Error('You must provide SchemaComposer instance as a second argument for `ScalarTypeComposer.create(typeDef, schemaComposer)`');
    }

    const stc = this.createTemp(typeDef, schemaComposer);
    schemaComposer.add(stc);
    return stc;
  }

  static createTemp(typeDef, schemaComposer) {
    const sc = schemaComposer || new _SchemaComposer.SchemaComposer();
    let STC;

    if ((0, _is.isString)(typeDef)) {
      const typeName = typeDef;
      const NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

      if (NAME_RX.test(typeName)) {
        STC = new ScalarTypeComposer(new _graphql.GraphQLScalarType({
          name: typeName,
          serialize: () => {}
        }), sc);
      } else {
        const type = sc.typeMapper.createType(typeName);

        if (!(type instanceof _graphql.GraphQLScalarType)) {
          throw new Error('You should provide correct GraphQLScalarType type definition. Eg. `scalar UInt`');
        }

        STC = new ScalarTypeComposer(type, sc);
      }
    } else if (typeDef instanceof _graphql.GraphQLScalarType) {
      STC = new ScalarTypeComposer(typeDef, sc);
    } else if ((0, _is.isObject)(typeDef)) {
      const type = new _graphql.GraphQLScalarType(_objectSpread({}, typeDef));
      STC = new ScalarTypeComposer(type, sc);
      STC.gqType._gqcExtensions = typeDef.extensions || {};
    } else {
      throw new Error(`You should provide GraphQLScalarTypeConfig or string with scalar name or SDL. Provided:\n${(0, _misc.inspect)(typeDef)}`);
    }

    return STC;
  }

  constructor(gqType, schemaComposer) {
    if (!(schemaComposer instanceof _SchemaComposer.SchemaComposer)) {
      throw new Error('You must provide SchemaComposer instance as a second argument for `new ScalarTypeComposer(GraphQLScalarType, SchemaComposer)`');
    }

    this.schemaComposer = schemaComposer;

    if (!(gqType instanceof _graphql.GraphQLScalarType)) {
      throw new Error('ScalarTypeComposer accept only GraphQLScalarType in constructor');
    }

    this.gqType = gqType; // alive proper Flow type casting in autosuggestions for class with Generics

    /* :: return this; */
  } // -----------------------------------------------
  // Serialize methods
  // -----------------------------------------------


  setSerialize(fn) {
    this.gqType.serialize = fn;
  }

  getSerialize() {
    return this.gqType.serialize;
  }

  setParseValue(fn) {
    this.gqType.parseValue = fn || (value => value);
  }

  getParseValue() {
    return this.gqType.parseValue;
  }

  setParseLiteral(fn) {
    this.gqType.parseLiteral = fn || _graphql.valueFromASTUntyped;
  }

  getParseLiteral() {
    return this.gqType.parseLiteral;
  } // -----------------------------------------------
  // Type methods
  // -----------------------------------------------


  getType() {
    return this.gqType;
  }

  getTypePlural() {
    return new _graphql.GraphQLList(this.gqType);
  }

  getTypeNonNull() {
    return new _graphql.GraphQLNonNull(this.gqType);
  }

  getTypeName() {
    return this.gqType.name;
  }

  setTypeName(name) {
    this.gqType.name = name;
    this.schemaComposer.add(this);
    return this;
  }

  getDescription() {
    return this.gqType.description || '';
  }

  setDescription(description) {
    this.gqType.description = description;
    return this;
  }

  clone(newTypeName) {
    if (!newTypeName) {
      throw new Error('You should provide newTypeName:string for ScalarTypeComposer.clone()');
    }

    const cloned = new ScalarTypeComposer(new _graphql.GraphQLScalarType({
      name: newTypeName,
      serialize: this.getSerialize(),
      parseValue: this.getParseValue(),
      parseLiteral: this.getParseLiteral()
    }), this.schemaComposer);
    cloned.setDescription(this.getDescription());
    return cloned;
  } // -----------------------------------------------
  // Extensions methods
  // -----------------------------------------------


  getExtensions() {
    if (!this.gqType._gqcExtensions) {
      return {};
    } else {
      return this.gqType._gqcExtensions;
    }
  }

  setExtensions(extensions) {
    this.gqType._gqcExtensions = extensions;
    return this;
  }

  extendExtensions(extensions) {
    const current = this.getExtensions();
    this.setExtensions(_objectSpread({}, current, extensions));
    return this;
  }

  clearExtensions() {
    this.setExtensions({});
    return this;
  }

  getExtension(extensionName) {
    const extensions = this.getExtensions();
    return extensions[extensionName];
  }

  hasExtension(extensionName) {
    const extensions = this.getExtensions();
    return extensionName in extensions;
  }

  setExtension(extensionName, value) {
    this.extendExtensions({
      [extensionName]: value
    });
    return this;
  }

  removeExtension(extensionName) {
    const extensions = _objectSpread({}, this.getExtensions());

    delete extensions[extensionName];
    this.setExtensions(extensions);
    return this;
  }

}

exports.ScalarTypeComposer = ScalarTypeComposer;