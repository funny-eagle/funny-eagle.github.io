"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
// @ts-ignore
var index_1 = require("../src/index");
describe('strict mode', function () {
    var pedestrianStates = {
        initial: 'walk',
        states: {
            walk: {
                on: {
                    PED_COUNTDOWN: 'wait'
                },
                onEntry: 'enter_walk',
                onExit: 'exit_walk'
            },
            wait: {
                on: {
                    PED_COUNTDOWN: 'stop'
                },
                onEntry: 'enter_wait',
                onExit: 'exit_wait'
            },
            stop: {
                type: 'final',
                onEntry: 'enter_stop',
                onExit: 'exit_stop'
            }
        }
    };
    var lightMachine = index_1.Machine({
        strict: true,
        key: 'light',
        initial: 'green',
        states: {
            green: {
                on: {
                    TIMER: 'yellow',
                    POWER_OUTAGE: 'red',
                    NOTHING: 'green'
                },
                onEntry: 'enter_green',
                onExit: 'exit_green'
            },
            yellow: {
                on: {
                    TIMER: 'red',
                    POWER_OUTAGE: 'red'
                },
                onEntry: 'enter_yellow',
                onExit: 'exit_yellow'
            },
            red: __assign({ on: {
                    TIMER: 'green',
                    POWER_OUTAGE: 'red',
                    NOTHING: 'red'
                }, onEntry: 'enter_red', onExit: 'exit_red' }, pedestrianStates)
        }
    });
    // @ts-ignore
    var parallelMachine = index_1.Machine({
        type: 'parallel',
        states: {
            a: {
                initial: 'a1',
                states: {
                    a1: {
                        on: { CHANGE: 'a2' },
                        onEntry: 'enter_a1',
                        onExit: 'exit_a1'
                    },
                    a2: { onEntry: 'enter_a2', onExit: 'exit_a2' }
                },
                onEntry: 'enter_a',
                onExit: 'exit_a'
            },
            b: {
                initial: 'b1',
                states: {
                    b1: {
                        on: { CHANGE: 'b2' },
                        onEntry: 'enter_b1',
                        onExit: 'exit_b1'
                    },
                    b2: { onEntry: 'enter_b2', onExit: 'exit_b2' }
                },
                onEntry: 'enter_b',
                onExit: 'exit_b'
            }
        },
        strict: true
    });
    it('should throw for unacceptable events', function () {
        chai_1.assert.throws(function () {
            lightMachine.transition('green', 'FOO');
        });
    });
    it('should not throw for built-in events', function () {
        chai_1.assert.doesNotThrow(function () {
            lightMachine.transition('red.wait', 'PED_COUNTDOWN');
        });
    });
});
