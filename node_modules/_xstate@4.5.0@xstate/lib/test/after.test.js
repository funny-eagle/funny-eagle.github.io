"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
var actions_1 = require("../src/actions");
var lightMachine = index_1.Machine({
    id: 'light',
    initial: 'green',
    context: {
        canTurnGreen: true
    },
    states: {
        green: {
            after: {
                1000: 'yellow'
            }
        },
        yellow: {
            after: {
                1000: [{ target: 'red' }]
            }
        },
        red: {
            after: [{ delay: 1000, target: 'green' }]
        }
    }
});
describe('delayed transitions', function () {
    it('should resolve transitions', function () {
        chai_1.assert.deepEqual(lightMachine.states.green.after, [
            {
                target: 'yellow',
                delay: 1000,
                event: actions_1.after(1000, 'light.green'),
                actions: []
            }
        ]);
        chai_1.assert.deepEqual(lightMachine.states.yellow.after, [
            {
                target: 'red',
                delay: 1000,
                event: actions_1.after(1000, 'light.yellow'),
                actions: []
            }
        ]);
        chai_1.assert.deepEqual(lightMachine.states.red.after, [
            {
                target: 'green',
                delay: 1000,
                event: actions_1.after(1000, 'light.red'),
                actions: []
            }
        ]);
    });
    it('should transition after delay', function () {
        var nextState = lightMachine.transition(lightMachine.initialState, actions_1.after(1000, 'light.green'));
        chai_1.assert.deepEqual(nextState.value, 'yellow');
        chai_1.assert.deepEqual(nextState.actions, [
            actions_1.cancel(actions_1.after(1000, 'light.green')),
            actions_1.send(actions_1.after(1000, 'light.yellow'), { delay: 1000 })
        ]);
    });
    it('should format transitions properly', function () {
        var greenNode = lightMachine.states.green;
        var transitions = greenNode.transitions;
        chai_1.assert.deepEqual(transitions.map(function (t) { return t.event; }), [
            actions_1.after(1000, greenNode.id)
        ]);
    });
});
