"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
var counterMachine = index_1.Machine({
    initial: 'counting',
    context: { count: 0, foo: 'bar' },
    states: {
        counting: {
            on: {
                INC: [
                    {
                        target: 'counting',
                        actions: [
                            index_1.actions.assign(function (xs) { return ({
                                count: xs.count + 1
                            }); })
                        ]
                    }
                ],
                DEC: [
                    {
                        target: 'counting',
                        actions: [
                            index_1.actions.assign({
                                count: function (xs) { return xs.count - 1; }
                            })
                        ]
                    }
                ],
                WIN_PROP: [
                    {
                        target: 'counting',
                        actions: [
                            index_1.actions.assign({
                                count: function () { return 100; },
                                foo: function () { return 'win'; }
                            })
                        ]
                    }
                ],
                WIN_STATIC: [
                    {
                        target: 'counting',
                        actions: [
                            index_1.actions.assign({
                                count: 100,
                                foo: 'win'
                            })
                        ]
                    }
                ],
                WIN_MIX: [
                    {
                        target: 'counting',
                        actions: [
                            index_1.actions.assign({
                                count: function () { return 100; },
                                foo: 'win'
                            })
                        ]
                    }
                ],
                WIN: [
                    {
                        target: 'counting',
                        actions: [
                            index_1.actions.assign(function () { return ({
                                count: 100,
                                foo: 'win'
                            }); })
                        ]
                    }
                ],
                SET_MAYBE: [
                    {
                        actions: [
                            index_1.actions.assign({
                                maybe: 'defined'
                            })
                        ]
                    }
                ]
            }
        }
    }
});
describe('assign', function () {
    it('applies the assignment to the external state (property assignment)', function () {
        var oneState = counterMachine.transition(counterMachine.initialState, 'DEC');
        chai_1.assert.deepEqual(oneState.value, 'counting');
        chai_1.assert.deepEqual(oneState.context, { count: -1, foo: 'bar' });
        var twoState = counterMachine.transition(oneState, 'DEC');
        chai_1.assert.deepEqual(twoState.value, 'counting');
        chai_1.assert.deepEqual(twoState.context, { count: -2, foo: 'bar' });
    });
    it('applies the assignment to the external state', function () {
        var oneState = counterMachine.transition(counterMachine.initialState, 'INC');
        chai_1.assert.deepEqual(oneState.value, 'counting');
        chai_1.assert.deepEqual(oneState.context, { count: 1, foo: 'bar' });
        var twoState = counterMachine.transition(oneState, 'INC');
        chai_1.assert.deepEqual(twoState.value, 'counting');
        chai_1.assert.deepEqual(twoState.context, { count: 2, foo: 'bar' });
    });
    it('applies the assignment to multiple properties (property assignment)', function () {
        var nextState = counterMachine.transition(counterMachine.initialState, 'WIN_PROP');
        chai_1.assert.deepEqual(nextState.context, { count: 100, foo: 'win' });
    });
    it('applies the assignment to multiple properties (static)', function () {
        var nextState = counterMachine.transition(counterMachine.initialState, 'WIN_STATIC');
        chai_1.assert.deepEqual(nextState.context, { count: 100, foo: 'win' });
    });
    it('applies the assignment to multiple properties (static + prop assignment)', function () {
        var nextState = counterMachine.transition(counterMachine.initialState, 'WIN_MIX');
        chai_1.assert.deepEqual(nextState.context, { count: 100, foo: 'win' });
    });
    it('applies the assignment to multiple properties', function () {
        var nextState = counterMachine.transition(counterMachine.initialState, 'WIN');
        chai_1.assert.deepEqual(nextState.context, { count: 100, foo: 'win' });
    });
    it('applies the assignment to the explicit external state (property assignment)', function () {
        var oneState = counterMachine.transition(counterMachine.initialState, 'DEC', { count: 50, foo: 'bar' });
        chai_1.assert.deepEqual(oneState.value, 'counting');
        chai_1.assert.deepEqual(oneState.context, { count: 49, foo: 'bar' });
        var twoState = counterMachine.transition(oneState, 'DEC');
        chai_1.assert.deepEqual(twoState.value, 'counting');
        chai_1.assert.deepEqual(twoState.context, { count: 48, foo: 'bar' });
        var threeState = counterMachine.transition(twoState, 'DEC', {
            count: 100,
            foo: 'bar'
        });
        chai_1.assert.deepEqual(threeState.value, 'counting');
        chai_1.assert.deepEqual(threeState.context, { count: 99, foo: 'bar' });
    });
    it('applies the assignment to the explicit external state', function () {
        var oneState = counterMachine.transition(counterMachine.initialState, 'INC', { count: 50, foo: 'bar' });
        chai_1.assert.deepEqual(oneState.value, 'counting');
        chai_1.assert.deepEqual(oneState.context, { count: 51, foo: 'bar' });
        var twoState = counterMachine.transition(oneState, 'INC');
        chai_1.assert.deepEqual(twoState.value, 'counting');
        chai_1.assert.deepEqual(twoState.context, { count: 52, foo: 'bar' });
        var threeState = counterMachine.transition(twoState, 'INC', {
            count: 102,
            foo: 'bar'
        });
        chai_1.assert.deepEqual(threeState.value, 'counting');
        chai_1.assert.deepEqual(threeState.context, { count: 103, foo: 'bar' });
    });
    it('should maintain state after unhandled event', function () {
        var initialState = counterMachine.initialState;
        var nextState = counterMachine.transition(initialState, 'FAKE_EVENT');
        chai_1.assert.isDefined(nextState.context);
        chai_1.assert.deepEqual(nextState.context, { count: 0, foo: 'bar' });
    });
    it('sets undefined properties', function () {
        var initialState = counterMachine.initialState;
        var nextState = counterMachine.transition(initialState, 'SET_MAYBE');
        chai_1.assert.isDefined(nextState.context.maybe);
        chai_1.assert.deepEqual(nextState.context, {
            count: 0,
            foo: 'bar',
            maybe: 'defined'
        });
    });
});
