"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
var machine = index_1.Machine({
    type: 'parallel',
    states: {
        a: {
            initial: 'a1',
            states: {
                a1: {
                    on: {
                        EVENT1: {
                            target: 'a2',
                            in: 'b.b2'
                        },
                        EVENT2: {
                            target: 'a2',
                            in: { b: 'b2' }
                        },
                        EVENT3: {
                            target: 'a2',
                            in: '#b_b2'
                        }
                    }
                },
                a2: {}
            }
        },
        b: {
            initial: 'b1',
            states: {
                b1: {
                    on: {
                        EVENT: {
                            target: 'b2',
                            in: 'a.a2'
                        }
                    }
                },
                b2: {
                    id: 'b_b2',
                    type: 'parallel',
                    states: {
                        foo: {
                            initial: 'foo1',
                            states: {
                                foo1: {
                                    on: {
                                        EVENT_DEEP: { target: 'foo2', in: 'bar.bar1' }
                                    }
                                },
                                foo2: {}
                            }
                        },
                        bar: {
                            initial: 'bar1',
                            states: {
                                bar1: {},
                                bar2: {}
                            }
                        }
                    }
                }
            }
        }
    }
});
var lightMachine = index_1.Machine({
    id: 'light',
    initial: 'green',
    states: {
        green: { on: { TIMER: 'yellow' } },
        yellow: { on: { TIMER: 'red' } },
        red: {
            initial: 'walk',
            states: {
                walk: {},
                wait: {},
                stop: {}
            },
            on: {
                TIMER: [
                    {
                        target: 'green',
                        in: { red: 'stop' }
                    }
                ]
            }
        }
    }
});
describe('transition "in" check', function () {
    it('should transition if string state path matches current state value', function () {
        chai_1.assert.deepEqual(machine.transition({
            a: 'a1',
            b: {
                b2: {
                    foo: 'foo2',
                    bar: 'bar1'
                }
            }
        }, 'EVENT1').value, {
            a: 'a2',
            b: {
                b2: {
                    foo: 'foo2',
                    bar: 'bar1'
                }
            }
        });
    });
    it('should transition if state node ID matches current state value', function () {
        chai_1.assert.deepEqual(machine.transition({
            a: 'a1',
            b: {
                b2: {
                    foo: 'foo2',
                    bar: 'bar1'
                }
            }
        }, 'EVENT3').value, {
            a: 'a2',
            b: {
                b2: {
                    foo: 'foo2',
                    bar: 'bar1'
                }
            }
        });
    });
    it('should not transition if string state path does not match current state value', function () {
        chai_1.assert.deepEqual(machine.transition({ a: 'a1', b: 'b1' }, 'EVENT1').value, {
            a: 'a1',
            b: 'b1'
        });
    });
    it('should not transition if state value matches current state value', function () {
        chai_1.assert.deepEqual(machine.transition({
            a: 'a1',
            b: {
                b2: {
                    foo: 'foo2',
                    bar: 'bar1'
                }
            }
        }, 'EVENT2').value, {
            a: 'a2',
            b: {
                b2: {
                    foo: 'foo2',
                    bar: 'bar1'
                }
            }
        });
    });
    it('matching should be relative to grandparent (match)', function () {
        chai_1.assert.deepEqual(machine.transition({ a: 'a1', b: { b2: { foo: 'foo1', bar: 'bar1' } } }, 'EVENT_DEEP').value, {
            a: 'a1',
            b: {
                b2: {
                    foo: 'foo2',
                    bar: 'bar1'
                }
            }
        });
    });
    it('matching should be relative to grandparent (no match)', function () {
        chai_1.assert.deepEqual(machine.transition({ a: 'a1', b: { b2: { foo: 'foo1', bar: 'bar2' } } }, 'EVENT_DEEP').value, {
            a: 'a1',
            b: {
                b2: {
                    foo: 'foo1',
                    bar: 'bar2'
                }
            }
        });
    });
    it('should work to forbid events', function () {
        var walkState = lightMachine.transition('red.walk', 'TIMER');
        chai_1.assert.deepEqual(walkState.value, { red: 'walk' });
        var waitState = lightMachine.transition('red.wait', 'TIMER');
        chai_1.assert.deepEqual(waitState.value, { red: 'wait' });
        var stopState = lightMachine.transition('red.stop', 'TIMER');
        chai_1.assert.deepEqual(stopState.value, 'green', 'Transition allowed due to "in" clause');
    });
});
