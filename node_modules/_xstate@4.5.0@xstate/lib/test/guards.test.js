"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
describe('guard conditions', function () {
    // type LightMachineEvents =
    //   | { type: 'TIMER'; elapsed: number }
    //   | { type: 'EMERGENCY'; isEmergency: boolean };
    var lightMachine = index_1.Machine({
        key: 'light',
        initial: 'green',
        states: {
            green: {
                on: {
                    TIMER: [
                        {
                            target: 'green',
                            cond: function (_a) {
                                var elapsed = _a.elapsed;
                                return elapsed < 100;
                            }
                        },
                        {
                            target: 'yellow',
                            cond: function (_a) {
                                var elapsed = _a.elapsed;
                                return elapsed >= 100 && elapsed < 200;
                            }
                        }
                    ],
                    EMERGENCY: {
                        target: 'red',
                        cond: function (_, event) { return event.isEmergency; }
                    }
                }
            },
            yellow: {
                on: {
                    TIMER: {
                        target: 'red',
                        cond: 'minTimeElapsed'
                    }
                }
            },
            red: {
                on: {
                    BAD_COND: { target: 'red', cond: 'doesNotExist' }
                }
            }
        }
    }, {
        guards: {
            minTimeElapsed: function (_a) {
                var elapsed = _a.elapsed;
                return elapsed >= 100 && elapsed < 200;
            }
        }
    });
    it('should transition only if condition is met', function () {
        chai_1.assert.equal(lightMachine.transition('green', 'TIMER', {
            elapsed: 50
        }).value, 'green');
        chai_1.assert.deepEqual(lightMachine.transition('green', 'TIMER', {
            elapsed: 120
        }).value, 'yellow');
    });
    it('should transition if condition based on event is met', function () {
        chai_1.assert.deepEqual(lightMachine.transition('green', { type: 'EMERGENCY', isEmergency: true })
            .value, 'red');
    });
    it('should not transition if condition based on event is not met', function () {
        chai_1.assert.deepEqual(lightMachine.transition('green', { type: 'EMERGENCY' }).value, 'green');
    });
    it('should not transition if no condition is met', function () {
        var nextState = lightMachine.transition('green', 'TIMER', {
            elapsed: 9000
        });
        chai_1.assert.deepEqual(nextState.value, 'green');
        chai_1.assert.isEmpty(nextState.actions);
    });
    it('should work with defined string transitions', function () {
        var nextState = lightMachine.transition('yellow', 'TIMER', {
            elapsed: 150
        });
        chai_1.assert.equal(nextState.value, 'red');
    });
    it('should work with defined string transitions (condition not met)', function () {
        var nextState = lightMachine.transition('yellow', 'TIMER', {
            elapsed: 10
        });
        chai_1.assert.equal(nextState.value, 'yellow');
    });
    it('should throw if string transition is not defined', function () {
        chai_1.assert.throws(function () { return lightMachine.transition('red', 'BAD_COND'); });
    });
});
describe('guard conditions', function () {
    var machine = index_1.Machine({
        key: 'microsteps',
        type: 'parallel',
        states: {
            A: {
                initial: 'A0',
                states: {
                    A0: {
                        on: {
                            A: 'A1'
                        }
                    },
                    A1: {
                        on: {
                            A: 'A2'
                        }
                    },
                    A2: {
                        on: {
                            A: 'A3'
                        }
                    },
                    A3: {
                        on: {
                            '': 'A4'
                        }
                    },
                    A4: {
                        on: {
                            '': 'A5'
                        }
                    },
                    A5: {}
                }
            },
            B: {
                initial: 'B0',
                states: {
                    B0: {
                        on: {
                            T1: [
                                {
                                    target: 'B1',
                                    cond: function (_state, _event, interim) {
                                        return index_1.matchesState('A.A1', interim);
                                    }
                                }
                            ],
                            T2: [
                                {
                                    target: 'B2',
                                    cond: function (_state, _event, interim) {
                                        return index_1.matchesState('A.A2', interim);
                                    }
                                }
                            ],
                            T3: [
                                {
                                    target: 'B3',
                                    cond: function (_state, _event, interim) {
                                        return index_1.matchesState('A.A3', interim);
                                    }
                                }
                            ],
                            '': [
                                {
                                    target: 'B4',
                                    cond: function (_state, _event, interim) {
                                        return index_1.matchesState('A.A4', interim);
                                    }
                                }
                            ]
                        }
                    },
                    B1: {},
                    B2: {},
                    B3: {},
                    B4: {}
                }
            }
        }
    });
    it('should guard against transition', function () {
        chai_1.assert.deepEqual(machine.transition({ A: 'A2', B: 'B0' }, 'T1').value, {
            A: 'A2',
            B: 'B0'
        });
    });
    it('should allow a matching transition', function () {
        chai_1.assert.deepEqual(machine.transition({ A: 'A2', B: 'B0' }, 'T2').value, {
            A: 'A2',
            B: 'B2'
        });
    });
    it('should check guards with interim states', function () {
        chai_1.assert.deepEqual(machine.transition({ A: 'A2', B: 'B0' }, 'A').value, {
            A: 'A5',
            B: 'B4'
        });
    });
});
