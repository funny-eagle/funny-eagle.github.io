"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
var actions_1 = require("../src/actions");
var machine = index_1.Machine({
    initial: 'one',
    states: {
        one: {
            onEntry: ['enter'],
            on: {
                EXTERNAL: {
                    target: 'one',
                    internal: false
                },
                INERT: {
                    target: 'one',
                    internal: true
                },
                INTERNAL: {
                    target: 'one',
                    internal: true,
                    actions: ['doSomething']
                },
                TO_TWO: 'two',
                TO_THREE: 'three',
                FORBIDDEN_EVENT: undefined
            }
        },
        two: {
            initial: 'deep',
            states: {
                deep: {
                    initial: 'foo',
                    states: {
                        foo: {
                            on: {
                                FOO_EVENT: 'bar',
                                FORBIDDEN_EVENT: undefined
                            }
                        },
                        bar: {
                            on: {
                                BAR_EVENT: 'foo'
                            }
                        }
                    }
                }
            },
            on: {
                DEEP_EVENT: '.'
            }
        },
        three: {
            type: 'parallel',
            states: {
                first: {
                    initial: 'p31',
                    states: {
                        p31: {
                            on: { P31: '.' }
                        }
                    }
                },
                second: {
                    initial: 'p32',
                    states: {
                        p32: {
                            on: { P32: '.' }
                        }
                    }
                }
            },
            on: {
                THREE_EVENT: '.'
            }
        }
    },
    on: {
        MACHINE_EVENT: '.two'
    }
});
describe('State', function () {
    describe('.changed', function () {
        it('should indicate that it is not changed if initial state', function () {
            chai_1.assert.isUndefined(machine.initialState.changed);
        });
        it('states from external transitions with onEntry actions should be changed', function () {
            var changedState = machine.transition(machine.initialState, 'EXTERNAL');
            chai_1.assert.isTrue(changedState.changed, 'changed due to onEntry action');
        });
        it('states from internal transitions with no actions should be unchanged', function () {
            var changedState = machine.transition(machine.initialState, 'EXTERNAL');
            var unchangedState = machine.transition(changedState, 'INERT');
            chai_1.assert.isFalse(unchangedState.changed, 'unchanged - same state, no actions');
        });
        it('states from internal transitions with actions should be changed', function () {
            var changedState = machine.transition(machine.initialState, 'INTERNAL');
            chai_1.assert.isTrue(changedState.changed, 'changed - transition actions');
        });
        it('normal state transitions should be changed (initial state)', function () {
            var changedState = machine.transition(machine.initialState, 'TO_TWO');
            chai_1.assert.isTrue(changedState.changed, 'changed - different state (from initial)');
        });
        it('normal state transitions should be changed', function () {
            var twoState = machine.transition(machine.initialState, 'TO_TWO');
            var changedState = machine.transition(twoState, 'FOO_EVENT');
            chai_1.assert.isTrue(changedState.changed, 'changed - different state');
        });
        it('normal state transitions with unknown event should be unchanged', function () {
            var twoState = machine.transition(machine.initialState, 'TO_TWO');
            var changedState = machine.transition(twoState, 'UNKNOWN_EVENT');
            chai_1.assert.isFalse(changedState.changed, 'not changed - unknown event');
        });
    });
    describe('.nextEvents', function () {
        it('returns the next possible events for the current state', function () {
            chai_1.assert.deepEqual(machine.initialState.nextEvents, [
                'EXTERNAL',
                'INERT',
                'INTERNAL',
                'TO_TWO',
                'TO_THREE',
                'MACHINE_EVENT'
            ]);
            chai_1.assert.deepEqual(machine.transition(machine.initialState, 'TO_TWO').nextEvents, ['FOO_EVENT', 'DEEP_EVENT', 'MACHINE_EVENT']);
            chai_1.assert.deepEqual(machine.transition(machine.initialState, 'TO_THREE').nextEvents, ['P31', 'P32', 'THREE_EVENT', 'MACHINE_EVENT']);
        });
    });
    describe('State.create()', function () {
        it('should be able to create a state from a JSON config', function () {
            var initialState = machine.initialState;
            var jsonInitialState = JSON.parse(JSON.stringify(initialState));
            var stateFromConfig = index_1.State.create(jsonInitialState);
            chai_1.assert.deepEqual(machine.transition(stateFromConfig, 'TO_TWO').value, {
                two: { deep: 'foo' }
            });
        });
    });
    describe('State.inert()', function () {
        it('should create an inert instance of the given State', function () {
            var initialState = machine.initialState;
            chai_1.assert.isEmpty(index_1.State.inert(initialState, undefined).actions);
        });
        it('should create an inert instance of the given stateValue and context', function () {
            var initialState = machine.initialState;
            var inertState = index_1.State.inert(initialState.value, { foo: 'bar' });
            chai_1.assert.isEmpty(inertState.actions);
            chai_1.assert.deepEqual(inertState.context, { foo: 'bar' });
        });
    });
    describe('.inert', function () {
        it('should create an inert instance of the current State', function () {
            var initialState = machine.initialState;
            chai_1.assert.isEmpty(initialState.inert.actions);
        });
    });
    describe('.event', function () {
        it('the .event prop should be the event (string) that caused the transition', function () {
            var initialState = machine.initialState;
            var nextState = machine.transition(initialState, 'TO_TWO');
            chai_1.assert.deepEqual(nextState.event, { type: 'TO_TWO' });
        });
        it('the .event prop should be the event (object) that caused the transition', function () {
            var initialState = machine.initialState;
            var nextState = machine.transition(initialState, {
                type: 'TO_TWO',
                foo: 'bar'
            });
            chai_1.assert.deepEqual(nextState.event, { type: 'TO_TWO', foo: 'bar' });
        });
        it('the .event prop should be the initial event for the initial state', function () {
            var initialState = machine.initialState;
            chai_1.assert.deepEqual(initialState.event, actions_1.initEvent);
        });
    });
});
