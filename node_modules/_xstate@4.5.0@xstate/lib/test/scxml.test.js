"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
// import { Element as XMLElement } from 'xml-js';
var fs = require("fs");
var path = require("path");
// import * as util from 'util';
var scxml_1 = require("../src/scxml");
var interpreter_1 = require("../src/interpreter");
var utils_1 = require("../src/utils");
// import { StateValue } from '../src/types';
// import { Event, StateValue, ActionObject } from '../src/types';
// import { actionTypes } from '../src/actions';
var testGroups = {
    actionSend: [
        'send1',
        'send2',
        'send3',
        'send4',
        'send7',
        'send8'
        // 'send9' // - edge case, since initial transitions in xstate are not microstepped
    ],
    'assign-current-small-step': ['test0', 'test1', 'test2', 'test3', 'test4'],
    basic: ['basic1', 'basic2'],
    'cond-js': ['test0', 'test1', 'test2', 'TestConditionalTransition'],
    data: [],
    'default-initial-state': ['initial1', 'initial2'],
    delayedSend: ['send1', 'send2', 'send3'],
    documentOrder: ['documentOrder0'],
    error: [],
    forEach: [],
    hierarchy: ['hier0', 'hier1', 'hier2'],
    'hierarchy+documentOrder': ['test0', 'test1'],
    history: [
        'history0',
        'history1',
        'history2',
        'history3',
        // 'history4',
        'history5',
        'history6'
    ],
    misc: ['deep-initial'],
    // 'more-parallel': [
    //   'test0',
    //   'test1',
    //   'test2',
    //   'test3',
    //   'test4',
    //   'test5',
    //   'test6',
    //   'test7',
    //   'test8',
    //   'test9',
    //   'test10'
    // ], // not well-formed tests
    parallel: ['test0', 'test1', 'test2', 'test3'],
    'targetless-transition': [
        'test0',
        'test1'
        // ,'test2', // TODO: parallel states with leaf node support
        // 'test3' // TODO: parallel states with leaf node support
    ]
    // 'parallel+interrupt': ['test0']
};
var overrides = {
    'assign-current-small-step': ['test0'],
    'targetless-transition': ['test0']
};
function runTestToCompletion(machine, test) {
    var resolvedStateValue = machine.resolve(utils_1.pathsToStateValue(test.initialConfiguration.map(function (id) { return machine.getStateNodeById(id).path; })));
    var nextState = machine.getInitialState(resolvedStateValue);
    var service = interpreter_1.interpret(machine, {
        clock: new interpreter_1.SimulatedClock()
    })
        .onTransition(function (state) {
        nextState = state;
    })
        .start(nextState);
    test.events.forEach(function (_a, i) {
        var event = _a.event, nextConfiguration = _a.nextConfiguration, after = _a.after;
        if (after) {
            service.clock.increment(after);
        }
        service.send(event.name);
        var stateIds = machine
            .getStateNodes(nextState)
            .map(function (stateNode) { return stateNode.id; });
        chai_1.assert.include(stateIds, nextConfiguration[0], "run " + i);
    });
}
function evalCond(expr, context) {
    var literalKeyExprs = context
        ? Object.keys(context)
            .map(function (key) { return "const " + key + " = xs['" + key + "'];"; })
            .join('\n')
        : '';
    var fn = new Function("const xs = arguments[0]; " + literalKeyExprs + " return " + expr);
    return fn;
}
describe('scxml', function () {
    var testGroupKeys = Object.keys(testGroups);
    // const testGroupKeys = ['parallel'];
    testGroupKeys.forEach(function (testGroupName) {
        testGroups[testGroupName].forEach(function (testName) {
            var scxmlSource = overrides[testGroupName] &&
                overrides[testGroupName].indexOf(testName) !== -1
                ? "./fixtures/scxml/" + testGroupName + "/" + testName + ".scxml"
                : "../node_modules/scxml-test-framework/test/" + testGroupName + "/" + testName + ".scxml";
            var scxmlDefinition = fs.readFileSync(path.resolve(__dirname, scxmlSource), { encoding: 'utf-8' });
            var scxmlTest = JSON.parse(fs.readFileSync(path.resolve(__dirname, "../node_modules/scxml-test-framework/test/" + testGroupName + "/" + testName + ".json"), { encoding: 'utf-8' }));
            it(testGroupName + "/" + testName, function () {
                var machine = scxml_1.toMachine(scxmlDefinition, {
                    evalCond: evalCond,
                    delimiter: '$'
                });
                // console.dir(machine.config, { depth: null });
                runTestToCompletion(machine, scxmlTest);
            });
        });
    });
});
