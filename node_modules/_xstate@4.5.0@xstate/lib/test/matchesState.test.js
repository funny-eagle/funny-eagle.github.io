"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
describe('matchesState()', function () {
    it('should return true if two states are equivalent', function () {
        chai_1.assert.ok(index_1.matchesState('a', 'a'));
        chai_1.assert.ok(index_1.matchesState('b.b1', 'b.b1'));
    });
    it('should return true if two state values are equivalent', function () {
        chai_1.assert.ok(index_1.matchesState({ a: 'b' }, { a: 'b' }));
        chai_1.assert.ok(index_1.matchesState({ a: { b: 'c' } }, { a: { b: 'c' } }));
    });
    it('should return true if two parallel states are equivalent', function () {
        chai_1.assert.ok(index_1.matchesState({ a: { b1: 'foo', b2: 'bar' } }, { a: { b1: 'foo', b2: 'bar' } }));
        chai_1.assert.ok(index_1.matchesState({ a: { b1: 'foo', b2: 'bar' }, b: { b3: 'baz', b4: 'quo' } }, { a: { b1: 'foo', b2: 'bar' }, b: { b3: 'baz', b4: 'quo' } }));
        chai_1.assert.ok(index_1.matchesState({ a: 'foo', b: 'bar' }, { a: 'foo', b: 'bar' }));
    });
    it('should return true if a state is a substate of a superstate', function () {
        chai_1.assert.ok(index_1.matchesState('b', 'b.b1'));
        chai_1.assert.ok(index_1.matchesState('foo.bar', 'foo.bar.baz.quo'));
    });
    it('should return true if a state value is a substate of a superstate value', function () {
        chai_1.assert.ok(index_1.matchesState('b', { b: 'b1' }));
        chai_1.assert.ok(index_1.matchesState({ foo: 'bar' }, { foo: { bar: { baz: 'quo' } } }));
    });
    it('should return true if a parallel state value is a substate of a superstate value', function () {
        chai_1.assert.ok(index_1.matchesState('b', { b: 'b1', c: 'c1' }));
        chai_1.assert.ok(index_1.matchesState({ foo: 'bar', fooAgain: 'barAgain' }, { foo: { bar: { baz: 'quo' } }, fooAgain: { barAgain: 'baz' } }));
    });
    it('should return false if two states are not equivalent', function () {
        chai_1.assert.ok(!index_1.matchesState('a', 'b'));
        chai_1.assert.ok(!index_1.matchesState('a.a1', 'b.b1'));
    });
    it('should return false if parent state is more specific than child state', function () {
        chai_1.assert.ok(!index_1.matchesState('a.b.c', 'a.b'));
        chai_1.assert.ok(!index_1.matchesState({ a: { b: { c: 'd' } } }, { a: 'b' }));
    });
    it('should return false if two state values are not equivalent', function () {
        chai_1.assert.ok(!index_1.matchesState({ a: 'a1' }, { b: 'b1' }));
    });
    it('should return false if a state is not a substate of a superstate', function () {
        chai_1.assert.ok(!index_1.matchesState('a', 'b.b1'));
        chai_1.assert.ok(!index_1.matchesState('foo.false.baz', 'foo.bar.baz.quo'));
    });
    it('should return false if a state value is not a substate of a superstate value', function () {
        chai_1.assert.ok(!index_1.matchesState('a', { b: 'b1' }));
        chai_1.assert.ok(!index_1.matchesState({ foo: { false: 'baz' } }, { foo: { bar: { baz: 'quo' } } }));
    });
    it('should mix/match string state values and object state values', function () {
        chai_1.assert.ok(index_1.matchesState('a.b.c', { a: { b: 'c' } }));
    });
});
describe('matches() method', function () {
    it('should execute matchesState on a State given the parent state value', function () {
        var machine = index_1.Machine({
            initial: 'foo',
            states: {
                foo: {
                    initial: 'bar',
                    states: {
                        bar: {
                            initial: 'baz',
                            states: {
                                baz: {}
                            }
                        }
                    }
                }
            }
        });
        chai_1.assert.ok(machine.initialState.matches('foo'));
        chai_1.assert.ok(machine.initialState.matches({ foo: 'bar' }));
        chai_1.assert.notOk(machine.initialState.matches('fake'));
    });
});
