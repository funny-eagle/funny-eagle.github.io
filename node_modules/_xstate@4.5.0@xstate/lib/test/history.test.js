"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
describe('history states', function () {
    var historyMachine = index_1.Machine({
        key: 'history',
        initial: 'off',
        states: {
            off: {
                on: { POWER: 'on.hist', H_POWER: 'on.H' }
            },
            on: {
                initial: 'first',
                states: {
                    first: {
                        on: { SWITCH: 'second' }
                    },
                    second: {
                        on: { SWITCH: 'third' }
                    },
                    third: {},
                    H: {
                        type: 'history'
                    },
                    hist: {
                        type: 'history',
                        history: 'shallow'
                    }
                },
                on: {
                    POWER: 'off',
                    H_POWER: 'off'
                }
            }
        }
    });
    it('should go to the most recently visited state', function () {
        var onSecondState = historyMachine.transition('on', 'SWITCH');
        var offState = historyMachine.transition(onSecondState, 'POWER');
        chai_1.assert.deepEqual(historyMachine.transition(offState, 'POWER').value, {
            on: 'second'
        });
    });
    it('should go to the most recently visited state (explicit)', function () {
        var onSecondState = historyMachine.transition('on', 'SWITCH');
        var offState = historyMachine.transition(onSecondState, 'H_POWER');
        chai_1.assert.deepEqual(historyMachine.transition(offState, 'H_POWER').value, {
            on: 'second'
        });
    });
    it('should go to the initial state when no history present', function () {
        chai_1.assert.deepEqual(historyMachine.transition('off', 'POWER').value, {
            on: 'first'
        });
    });
    it('should go to the initial state when no history present (explicit)', function () {
        chai_1.assert.deepEqual(historyMachine.transition('off', 'H_POWER').value, {
            on: 'first'
        });
    });
    it('should dispose of previous histories', function () {
        var onSecondState = historyMachine.transition('on', 'SWITCH');
        var offState = historyMachine.transition(onSecondState, 'H_POWER');
        var onState = historyMachine.transition(offState, 'H_POWER');
        var nextState = historyMachine.transition(onState, 'H_POWER');
        chai_1.assert.isUndefined(nextState.history.history);
    });
});
describe('deep history states', function () {
    var historyMachine = index_1.Machine({
        key: 'history',
        initial: 'off',
        states: {
            off: {
                on: {
                    POWER: 'on.history',
                    DEEP_POWER: 'on.deepHistory'
                }
            },
            on: {
                initial: 'first',
                states: {
                    first: {
                        on: { SWITCH: 'second' }
                    },
                    second: {
                        initial: 'A',
                        states: {
                            A: {
                                on: { INNER: 'B' }
                            },
                            B: {
                                initial: 'P',
                                states: {
                                    P: {
                                        on: { INNER: 'Q' }
                                    },
                                    Q: {}
                                }
                            }
                        }
                    },
                    history: { history: 'shallow' },
                    deepHistory: {
                        history: 'deep'
                    }
                },
                on: {
                    POWER: 'off'
                }
            }
        }
    });
    describe('history', function () {
        // on.first -> on.second.A
        var state2A = historyMachine.transition({ on: 'first' }, 'SWITCH');
        // on.second.A -> on.second.B.P
        var state2BP = historyMachine.transition(state2A, 'INNER');
        // on.second.B.P -> on.second.B.Q
        var state2BQ = historyMachine.transition(state2BP, 'INNER');
        it('should go to the shallow history', function () {
            // on.second.B.P -> off
            var stateOff = historyMachine.transition(state2BP, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'POWER').value, {
                on: { second: 'A' }
            });
        });
        it('should go to the deep history (explicit)', function () {
            // on.second.B.P -> off
            var stateOff = historyMachine.transition(state2BP, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'DEEP_POWER').value, { on: { second: { B: 'P' } } });
        });
        it('should go to the deepest history', function () {
            // on.second.B.Q -> off
            var stateOff = historyMachine.transition(state2BQ, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'DEEP_POWER').value, { on: { second: { B: 'Q' } } });
        });
    });
});
describe('parallel history states', function () {
    var historyMachine = index_1.Machine({
        key: 'parallelhistory',
        initial: 'off',
        states: {
            off: {
                on: {
                    SWITCH: 'on',
                    POWER: 'on.hist',
                    DEEP_POWER: 'on.deepHistory',
                    PARALLEL_HISTORY: [{ target: ['on.A.hist', 'on.K.hist'] }],
                    PARALLEL_SOME_HISTORY: [{ target: ['on.A.C', 'on.K.hist'] }],
                    PARALLEL_DEEP_HISTORY: [
                        { target: ['on.A.deepHistory', 'on.K.deepHistory'] }
                    ]
                }
            },
            on: {
                type: 'parallel',
                states: {
                    A: {
                        initial: 'B',
                        states: {
                            B: {
                                on: { INNER_A: 'C' }
                            },
                            C: {
                                initial: 'D',
                                states: {
                                    D: {
                                        on: { INNER_A: 'E' }
                                    },
                                    E: {}
                                }
                            },
                            hist: { history: true },
                            deepHistory: {
                                history: 'deep'
                            }
                        }
                    },
                    K: {
                        initial: 'L',
                        states: {
                            L: {
                                on: { INNER_K: 'M' }
                            },
                            M: {
                                initial: 'N',
                                states: {
                                    N: {
                                        on: { INNER_K: 'O' }
                                    },
                                    O: {}
                                }
                            },
                            hist: { history: true },
                            deepHistory: {
                                history: 'deep'
                            }
                        }
                    },
                    hist: {
                        history: true
                    },
                    shallowHistory: {
                        history: 'shallow'
                    },
                    deepHistory: {
                        history: 'deep'
                    }
                },
                on: {
                    POWER: 'off'
                }
            }
        }
    });
    describe('history', function () {
        // on.first -> on.second.A
        var stateABKL = historyMachine.transition(historyMachine.initialState, 'SWITCH');
        // INNER_A twice
        var stateACDKL = historyMachine.transition(stateABKL, 'INNER_A');
        var stateACEKL = historyMachine.transition(stateACDKL, 'INNER_A');
        // INNER_K twice
        var stateACEKMN = historyMachine.transition(stateACEKL, 'INNER_K');
        var stateACEKMO = historyMachine.transition(stateACEKMN, 'INNER_K');
        it('should ignore parallel state history', function () {
            var stateOff = historyMachine.transition(stateACDKL, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'POWER').value, {
                on: { A: 'B', K: 'L' }
            });
        });
        it('should remember first level state history', function () {
            var stateOff = historyMachine.transition(stateACDKL, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'DEEP_POWER').value, {
                on: { A: { C: 'D' }, K: 'L' }
            });
        });
        it('should re-enter each regions of parallel state correctly', function () {
            var stateOff = historyMachine.transition(stateACEKMO, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'DEEP_POWER').value, {
                on: { A: { C: 'E' }, K: { M: 'O' } }
            });
        });
        it('should re-enter multiple history states', function () {
            var stateOff = historyMachine.transition(stateACEKMO, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'PARALLEL_HISTORY').value, {
                on: { A: { C: 'D' }, K: { M: 'N' } }
            });
        });
        it('should re-enter a parallel with partial history', function () {
            var stateOff = historyMachine.transition(stateACEKMO, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'PARALLEL_SOME_HISTORY').value, {
                on: { A: { C: 'D' }, K: { M: 'N' } }
            });
        });
        it('should re-enter a parallel with full history', function () {
            var stateOff = historyMachine.transition(stateACEKMO, 'POWER');
            chai_1.assert.deepEqual(historyMachine.transition(stateOff, 'PARALLEL_DEEP_HISTORY').value, {
                on: { A: { C: 'E' }, K: { M: 'O' } }
            });
        });
    });
});
describe('transient history', function () {
    var transientMachine = index_1.Machine({
        initial: 'A',
        states: {
            A: {
                on: { EVENT: 'B' }
            },
            B: {
                on: {
                    // eventless transition
                    '': 'C'
                }
            },
            C: {}
        }
    });
    it('should have history on transient transitions', function () {
        var nextState = transientMachine.transition('A', 'EVENT');
        chai_1.assert.equal(nextState.value, 'C');
        chai_1.assert.isDefined(nextState.history);
    });
});
describe('internal transition with history', function () {
    var machine = index_1.Machine({
        key: 'test',
        initial: 'first',
        states: {
            first: {
                initial: 'foo',
                states: {
                    foo: {}
                },
                on: {
                    NEXT: 'second.other'
                }
            },
            second: {
                initial: 'nested',
                states: {
                    nested: {},
                    other: {},
                    hist: {
                        history: true
                    }
                },
                on: {
                    NEXT: [
                        {
                            target: '.hist'
                        }
                    ]
                }
            }
        }
    });
    it('should transition internally to the most recently visited state', function () {
        // {
        //   $current: 'first',
        //   first: undefined,
        //   second: {
        //     $current: 'nested',
        //     nested: undefined,
        //     other: undefined
        //   }
        // }
        var state2 = machine.transition(machine.initialState, 'NEXT');
        // {
        //   $current: 'second',
        //   first: undefined,
        //   second: {
        //     $current: 'other',
        //     nested: undefined,
        //     other: undefined
        //   }
        // }
        var state3 = machine.transition(state2, 'NEXT');
        // {
        //   $current: 'second',
        //   first: undefined,
        //   second: {
        //     $current: 'other',
        //     nested: undefined,
        //     other: undefined
        //   }
        // }
        chai_1.assert.deepEqual(state3.value, { second: 'other' });
    });
});
describe('multistage history states', function () {
    var pcWithTurboButtonMachine = index_1.Machine({
        key: 'pc-with-turbo-button',
        initial: 'off',
        states: {
            off: {
                on: { POWER: 'starting' }
            },
            starting: {
                on: { STARTED: 'running.H' }
            },
            running: {
                initial: 'normal',
                states: {
                    normal: {
                        on: { SWITCH_TURBO: 'turbo' }
                    },
                    turbo: {
                        on: { SWITCH_TURBO: 'normal' }
                    },
                    H: {
                        history: true
                    }
                },
                on: {
                    POWER: 'off'
                }
            }
        }
    });
    it('should go to the most recently visited state', function () {
        var onTurboState = pcWithTurboButtonMachine.transition('running', 'SWITCH_TURBO');
        var offState = pcWithTurboButtonMachine.transition(onTurboState, 'POWER');
        var loadingState = pcWithTurboButtonMachine.transition(offState, 'POWER');
        chai_1.assert.deepEqual(pcWithTurboButtonMachine.transition(loadingState, 'STARTED').value, { running: 'turbo' });
    });
});
