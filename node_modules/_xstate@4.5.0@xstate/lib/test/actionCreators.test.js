"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var actions = require("../src/actions");
var chai_1 = require("chai");
var actionTypes = actions.actionTypes;
describe('action creators', function () {
    ['start', 'stop'].forEach(function (actionKey) {
        describe(actionKey + "()", function () {
            it('should accept a string action', function () {
                var action = actions[actionKey]('test');
                chai_1.assert.equal(action.type, actionTypes[actionKey]);
                chai_1.assert.deepEqual(action, {
                    type: actionTypes[actionKey],
                    exec: undefined,
                    activity: {
                        type: 'test',
                        exec: undefined,
                        id: 'test'
                    }
                });
            });
            it('should accept an action object', function () {
                var action = actions[actionKey]({ type: 'test', foo: 'bar' });
                chai_1.assert.equal(action.type, actionTypes[actionKey]);
                chai_1.assert.deepEqual(action, {
                    type: actionTypes[actionKey],
                    exec: undefined,
                    activity: {
                        type: 'test',
                        id: undefined,
                        foo: 'bar'
                    }
                });
            });
            it('should accept an activity definition', function () {
                var action = actions[actionKey]({
                    type: 'test',
                    foo: 'bar',
                    src: 'someSrc'
                });
                chai_1.assert.equal(action.type, actionTypes[actionKey]);
                chai_1.assert.deepEqual(action, {
                    type: actionTypes[actionKey],
                    exec: undefined,
                    activity: {
                        type: 'test',
                        id: undefined,
                        foo: 'bar',
                        src: 'someSrc'
                    }
                });
            });
        });
    });
    describe('send()', function () {
        it('should accept a string event', function () {
            var action = actions.send('foo');
            chai_1.assert.deepEqual(action, {
                to: undefined,
                type: actionTypes.send,
                event: { type: 'foo' },
                delay: undefined,
                id: 'foo'
            });
        });
        it('should accept an event object', function () {
            var action = actions.send({ type: 'foo', bar: 'baz' });
            chai_1.assert.deepEqual(action, {
                to: undefined,
                type: actionTypes.send,
                event: { type: 'foo', bar: 'baz' },
                delay: undefined,
                id: 'foo'
            });
        });
        it('should accept an id option', function () {
            var action = actions.send('foo', { id: 'foo-id' });
            chai_1.assert.deepEqual(action, {
                to: undefined,
                type: actionTypes.send,
                event: { type: 'foo' },
                delay: undefined,
                id: 'foo-id'
            });
        });
        it('should accept a delay option', function () {
            var action = actions.send('foo', { delay: 1000 });
            chai_1.assert.deepEqual(action, {
                to: undefined,
                type: actionTypes.send,
                event: { type: 'foo' },
                delay: 1000,
                id: 'foo'
            });
        });
    });
});
