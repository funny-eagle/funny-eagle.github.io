"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
var actions_1 = require("../src/actions");
var lightMachine = index_1.Machine({
    key: 'light',
    initial: 'green',
    states: {
        green: {
            activities: ['fadeInGreen'],
            on: {
                TIMER: 'yellow'
            }
        },
        yellow: {
            on: {
                TIMER: 'red'
            }
        },
        red: {
            initial: 'walk',
            activities: ['activateCrosswalkLight'],
            on: {
                TIMER: 'green'
            },
            states: {
                walk: { on: { PED_WAIT: 'wait' } },
                wait: {
                    activities: ['blinkCrosswalkLight'],
                    on: { PED_STOP: 'stop' }
                },
                stop: {}
            }
        }
    }
});
describe('activities with guarded transitions', function () {
    var B_ACTIVITY = function () { return void 0; };
    var machine = index_1.Machine({
        initial: 'A',
        states: {
            A: {
                on: {
                    E: 'B'
                }
            },
            B: {
                on: {
                    '': [{ cond: function () { return false; }, target: 'A' }]
                },
                activities: ['B_ACTIVITY']
            }
        }
    }, { activities: { B_ACTIVITY: B_ACTIVITY } });
    it('should activate even if there are subsequent automatic, but blocked transitions', function () {
        var state = machine.initialState;
        state = machine.transition(state, 'E');
        chai_1.assert.deepEqual(state.activities, { B_ACTIVITY: true });
        chai_1.assert.deepEqual(state.actions, [
            actions_1.start({ type: 'B_ACTIVITY', id: 'B_ACTIVITY', exec: undefined })
        ]);
        // assert.isFunction(
        //   state.actions[0].exec,
        //   'Activity start function should be defined'
        // );
    });
});
describe('remembering activities', function () {
    var machine = index_1.Machine({
        initial: 'A',
        states: {
            A: {
                on: {
                    E: 'B'
                }
            },
            B: {
                on: {
                    E: 'A'
                },
                activities: ['B_ACTIVITY']
            }
        }
    });
    it('should remember the activities even after an event', function () {
        var state = machine.initialState;
        state = machine.transition(state, 'E');
        state = machine.transition(state, 'IGNORE');
        chai_1.assert.deepEqual(state.activities, { B_ACTIVITY: true });
    });
});
describe('activities', function () {
    it('identifies initial activities', function () {
        var initialState = lightMachine.initialState;
        chai_1.assert.deepEqual(initialState.activities, {
            fadeInGreen: true
        });
    });
    it('identifies start activities', function () {
        var nextState = lightMachine.transition('yellow', 'TIMER');
        chai_1.assert.deepEqual(nextState.activities, {
            activateCrosswalkLight: true
        });
        chai_1.assert.sameDeepMembers(nextState.actions, [
            actions_1.start('activateCrosswalkLight')
        ]);
    });
    it('identifies start activities for child states and active activities', function () {
        var redWalkState = lightMachine.transition('yellow', 'TIMER');
        var nextState = lightMachine.transition(redWalkState, 'PED_WAIT');
        chai_1.assert.deepEqual(nextState.activities, {
            activateCrosswalkLight: true,
            blinkCrosswalkLight: true
        });
        chai_1.assert.sameDeepMembers(nextState.actions, [actions_1.start('blinkCrosswalkLight')]);
    });
    it('identifies stop activities for child states', function () {
        var redWalkState = lightMachine.transition('yellow', 'TIMER');
        var redWaitState = lightMachine.transition(redWalkState, 'PED_WAIT');
        var nextState = lightMachine.transition(redWaitState, 'PED_STOP');
        chai_1.assert.deepEqual(nextState.activities, {
            activateCrosswalkLight: true,
            blinkCrosswalkLight: false
        });
        chai_1.assert.sameDeepMembers(nextState.actions, [actions_1.stop('blinkCrosswalkLight')]);
    });
    it('identifies multiple stop activities for child and parent states', function () {
        var redWalkState = lightMachine.transition('yellow', 'TIMER');
        var redWaitState = lightMachine.transition(redWalkState, 'PED_WAIT');
        var redStopState = lightMachine.transition(redWaitState, 'PED_STOP');
        var nextState = lightMachine.transition(redStopState, 'TIMER');
        chai_1.assert.deepEqual(nextState.activities, {
            fadeInGreen: true,
            activateCrosswalkLight: false,
            blinkCrosswalkLight: false
        });
        chai_1.assert.sameDeepMembers(nextState.actions, [
            actions_1.start('fadeInGreen'),
            actions_1.stop('activateCrosswalkLight')
        ]);
    });
});
describe('transient activities', function () {
    var machine = index_1.Machine({
        type: 'parallel',
        states: {
            A: {
                activities: ['A'],
                initial: 'A1',
                states: {
                    A1: {
                        activities: ['A1'],
                        on: {
                            A: 'AWAIT'
                        }
                    },
                    AWAIT: {
                        activities: ['AWAIT'],
                        on: {
                            '': 'A2'
                        }
                    },
                    A2: {
                        activities: ['A2'],
                        on: {
                            A: 'A1'
                        }
                    }
                },
                on: {
                    A1: '.A1',
                    A2: '.A2'
                }
            },
            B: {
                initial: 'B1',
                activities: ['B'],
                states: {
                    B1: {
                        activities: ['B1'],
                        on: {
                            '': [
                                {
                                    in: 'A.AWAIT',
                                    target: 'B2'
                                }
                            ],
                            B: 'B2'
                        }
                    },
                    B2: {
                        activities: ['B2'],
                        on: {
                            B: 'B1'
                        }
                    }
                },
                on: {
                    B1: '.B1',
                    B2: '.B2'
                }
            },
            C: {
                initial: 'C1',
                states: {
                    C1: {
                        activities: ['C1'],
                        on: {
                            C: 'C1',
                            C_SIMILAR: 'C2'
                        }
                    },
                    C2: {
                        activities: ['C1']
                    }
                }
            }
        }
    });
    it('should have started initial activities', function () {
        var state = machine.initialState;
        chai_1.assert.deepEqual(state.activities.A, true);
    });
    it('should have started deep initial activities', function () {
        var state = machine.initialState;
        chai_1.assert.deepEqual(state.activities.A1, true);
    });
    it('should have kept existing activities', function () {
        var state = machine.initialState;
        state = machine.transition(state, 'A');
        chai_1.assert.deepEqual(state.activities.A, true);
    });
    it('should have kept same activities', function () {
        var state = machine.initialState;
        state = machine.transition(state, 'C_SIMILAR');
        chai_1.assert.deepEqual(state.activities.C1, true);
    });
    it('should have kept same activities after self transition', function () {
        var state = machine.initialState;
        state = machine.transition(state, 'C');
        chai_1.assert.deepEqual(state.activities.C1, true);
    });
    it('should have stopped after automatic transitions', function () {
        var state = machine.initialState;
        state = machine.transition(state, 'A');
        chai_1.assert.deepEqual(state.value, { A: 'A2', B: 'B2', C: 'C1' });
        chai_1.assert.deepEqual(state.activities.B2, true);
    });
});
