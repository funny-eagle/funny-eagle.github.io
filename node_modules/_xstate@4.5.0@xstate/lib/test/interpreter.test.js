"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interpreter_1 = require("../src/interpreter");
var chai_1 = require("chai");
var id_1 = require("./fixtures/id");
var src_1 = require("../src");
var State_1 = require("../src/State");
var actions_1 = require("../src/actions");
var lightMachine = src_1.Machine({
    id: 'light',
    initial: 'green',
    states: {
        green: {
            onEntry: [src_1.actions.send('TIMER', { delay: 10 })],
            on: {
                TIMER: 'yellow',
                KEEP_GOING: {
                    target: 'green',
                    actions: [src_1.actions.cancel('TIMER')],
                    internal: true
                }
            }
        },
        yellow: {
            onEntry: [src_1.actions.send('TIMER', { delay: 10 })],
            on: {
                TIMER: 'red'
            }
        },
        red: {
            after: {
                10: 'green'
            }
        }
    }
});
describe('interpreter', function () {
    it('creates an interpreter', function () {
        var service = interpreter_1.interpret(id_1.machine);
        chai_1.assert.instanceOf(service, interpreter_1.Interpreter);
    });
    it('immediately notifies the listener with the initial state and event', function (done) {
        var service = interpreter_1.interpret(id_1.machine).onTransition(function (initialState, event) {
            chai_1.assert.instanceOf(initialState, State_1.State);
            chai_1.assert.deepEqual(initialState.value, id_1.machine.initialState.value);
            chai_1.assert.deepEqual(event.type, actions_1.actionTypes.init);
            done();
        });
        service.start();
    });
    it('.initialState returns the initial state', function () {
        var service = interpreter_1.interpret(id_1.machine);
        chai_1.assert.deepEqual(service.initialState, id_1.machine.initialState);
    });
    describe('.nextState() method', function () {
        it('returns the next state for the given event without changing the interpreter state', function () {
            var service = interpreter_1.interpret(lightMachine).start();
            var nextState = service.nextState('TIMER');
            chai_1.assert.equal(nextState.value, 'yellow');
            chai_1.assert.equal(service.state.value, 'green');
        });
    });
    describe('send with delay', function () {
        it('can send an event after a delay', function () {
            var currentStates = [];
            var listener = function (state) {
                currentStates.push(state);
                if (currentStates.length === 4) {
                    chai_1.assert.deepEqual(currentStates.map(function (s) { return s.value; }), [
                        'green',
                        'yellow',
                        'red',
                        'green'
                    ]);
                }
            };
            var service = interpreter_1.interpret(lightMachine, {
                clock: new interpreter_1.SimulatedClock()
            }).onTransition(listener);
            var clock = service.clock;
            service.start();
            clock.increment(5);
            chai_1.assert.equal(currentStates[0].value, 'green', 'State should still be green before delayed send');
            clock.increment(5);
            chai_1.assert.deepEqual(currentStates.map(function (s) { return s.value; }), ['green', 'yellow']);
            clock.increment(5);
            chai_1.assert.deepEqual(currentStates.map(function (s) { return s.value; }), ['green', 'yellow']);
            clock.increment(5);
            chai_1.assert.deepEqual(currentStates.map(function (s) { return s.value; }), [
                'green',
                'yellow',
                'red'
            ]);
            clock.increment(5);
            chai_1.assert.deepEqual(currentStates.map(function (s) { return s.value; }), [
                'green',
                'yellow',
                'red'
            ]);
            clock.increment(5);
            chai_1.assert.deepEqual(currentStates.map(function (s) { return s.value; }), [
                'green',
                'yellow',
                'red',
                'green'
            ]);
        });
    });
    describe('activities', function () {
        var activityState = 'off';
        var activityMachine = src_1.Machine({
            id: 'activity',
            initial: 'on',
            states: {
                on: {
                    activities: 'myActivity',
                    on: {
                        TURN_OFF: 'off'
                    }
                },
                off: {}
            }
        }, {
            activities: {
                myActivity: function () {
                    activityState = 'on';
                    return function () { return (activityState = 'off'); };
                }
            }
        });
        it('should start activities', function () {
            var service = interpreter_1.interpret(activityMachine);
            service.start();
            chai_1.assert.equal(activityState, 'on');
        });
        it('should stop activities', function () {
            var service = interpreter_1.interpret(activityMachine);
            service.start();
            chai_1.assert.equal(activityState, 'on');
            service.send('TURN_OFF');
            chai_1.assert.equal(activityState, 'off');
        });
        it('should stop activities upon stopping the service', function () {
            var stopActivityState;
            var stopActivityMachine = src_1.Machine({
                id: 'stopActivity',
                initial: 'on',
                states: {
                    on: {
                        activities: 'myActivity',
                        on: {
                            TURN_OFF: 'off'
                        }
                    },
                    off: {}
                }
            }, {
                activities: {
                    myActivity: function () {
                        stopActivityState = 'on';
                        return function () { return (stopActivityState = 'off'); };
                    }
                }
            });
            var stopActivityService = interpreter_1.interpret(stopActivityMachine).start();
            chai_1.assert.equal(stopActivityState, 'on');
            stopActivityService.stop();
            chai_1.assert.equal(stopActivityState, 'off', 'activity should be disposed');
        });
    });
    it('can cancel a delayed event', function () {
        var currentState;
        var listener = function (state) { return (currentState = state); };
        var service = interpreter_1.interpret(lightMachine, {
            clock: new interpreter_1.SimulatedClock()
        }).onTransition(listener);
        var clock = service.clock;
        service.start();
        clock.increment(5);
        service.send('KEEP_GOING');
        chai_1.assert.deepEqual(currentState.value, 'green');
        clock.increment(10);
        chai_1.assert.deepEqual(currentState.value, 'green', 'should still be green due to canceled event');
    });
    it('should throw an error if an event is sent to an uninitialized interpreter', function () {
        var service = interpreter_1.interpret(lightMachine);
        chai_1.assert.throws(function () { return service.send('SOME_EVENT'); });
        service.start();
        chai_1.assert.doesNotThrow(function () { return service.send('SOME_EVENT'); });
    });
    it('should throw an error if initial state sent to interpreter is invalid', function () {
        var invalidMachine = {
            id: 'fetchMachine',
            initial: 'create',
            states: {
                edit: {
                    initial: 'idle',
                    states: {
                        idle: {
                            on: {
                                FETCH: 'pending'
                            }
                        }
                    }
                }
            }
        };
        var service = interpreter_1.interpret(src_1.Machine(invalidMachine));
        chai_1.assert.throws(function () { return service.start(); }, "Initial state 'create' not found on 'fetchMachine'");
    });
    it('should not update when stopped', function () {
        var state = lightMachine.initialState;
        var service = interpreter_1.interpret(lightMachine).onTransition(function (s) { return (state = s); });
        service.start();
        service.send('TIMER'); // yellow
        chai_1.assert.deepEqual(state.value, 'yellow');
        service.stop();
        service.send('TIMER'); // red if interpreter is not stopped
        chai_1.assert.deepEqual(state.value, 'yellow');
    });
    it('should be able to log (log action)', function () {
        var logs = [];
        var logMachine = src_1.Machine({
            id: 'log',
            initial: 'x',
            context: { count: 0 },
            states: {
                x: {
                    on: {
                        LOG: {
                            actions: [
                                actions_1.assign({ count: function (ctx) { return ctx.count + 1; } }),
                                actions_1.log(function (ctx) { return ctx; })
                            ]
                        }
                    }
                }
            }
        });
        var service = interpreter_1.interpret(logMachine, {
            logger: function (msg) { return logs.push(msg); }
        }).start();
        service.send('LOG');
        service.send('LOG');
        chai_1.assert.lengthOf(logs, 2);
        chai_1.assert.deepEqual(logs, [{ count: 1 }, { count: 2 }]);
    });
    describe('send() event expressions', function () {
        var machine = src_1.Machine({
            id: 'sendexpr',
            initial: 'start',
            context: {
                password: 'foo'
            },
            states: {
                start: {
                    onEntry: actions_1.send(function (ctx) { return ({ type: 'NEXT', password: ctx.password }); }),
                    on: {
                        NEXT: {
                            target: 'finish',
                            cond: function (_, e) { return e.password === 'foo'; }
                        }
                    }
                },
                finish: {
                    type: 'final'
                }
            }
        });
        it('should resolve send event expressions', function (done) {
            interpreter_1.interpret(machine)
                .onDone(function () { return done(); })
                .start();
        });
    });
    describe('sendParent() event expressions', function () {
        var childMachine = src_1.Machine({
            id: 'child',
            initial: 'start',
            context: {
                password: 'unknown'
            },
            states: {
                start: {
                    onEntry: actions_1.sendParent(function (ctx) { return ({ type: 'NEXT', password: ctx.password }); })
                }
            }
        });
        var parentMachine = src_1.Machine({
            id: 'parent',
            initial: 'start',
            states: {
                start: {
                    invoke: {
                        src: childMachine,
                        data: {
                            password: 'foo'
                        }
                    },
                    on: {
                        NEXT: {
                            target: 'finish',
                            cond: function (_, e) { return e.password === 'foo'; }
                        }
                    }
                },
                finish: {
                    type: 'final'
                }
            }
        });
        it('should resolve sendParent event expressions', function (done) {
            interpreter_1.interpret(parentMachine)
                .onDone(function () { return done(); })
                .start();
        });
    });
});
