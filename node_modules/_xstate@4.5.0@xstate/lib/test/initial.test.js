"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var src_1 = require("../src");
var chai_1 = require("chai");
var config = {
    initial: 'a',
    states: {
        a: {
            initial: 'b',
            states: {
                b: {
                    initial: 'c',
                    states: {
                        c: {}
                    }
                }
            }
        },
        leaf: {}
    }
};
var deepMachine = src_1.Machine(config);
var parallelDeepMachine = src_1.Machine({
    type: 'parallel',
    states: {
        foo: config,
        bar: config
    }
});
var deepParallelMachine = src_1.Machine({
    initial: 'one',
    states: {
        one: parallelDeepMachine.config,
        two: parallelDeepMachine.config
    }
});
describe('Initial states', function () {
    it('should return the correct initial state', function () {
        chai_1.assert.deepEqual(deepMachine.initialState.value, { a: { b: 'c' } });
    });
    it('should return the correct initial state (parallel)', function () {
        chai_1.assert.deepEqual(parallelDeepMachine.initialState.value, {
            foo: { a: { b: 'c' } },
            bar: { a: { b: 'c' } }
        });
    });
    it('should return the correct initial state (deep parallel)', function () {
        chai_1.assert.deepEqual(deepParallelMachine.initialState.value, {
            one: {
                foo: { a: { b: 'c' } },
                bar: { a: { b: 'c' } }
            }
        });
    });
    it('should return undefined for leaf nodes', function () {
        chai_1.assert.throws(function () { return deepMachine.states.leaf.initialState; });
    });
});
