"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../src/index");
describe('state meta data', function () {
    var pedestrianStates = {
        initial: 'walk',
        states: {
            walk: {
                meta: { walkData: 'walk data' },
                on: {
                    PED_COUNTDOWN: 'wait'
                },
                onEntry: 'enter_walk',
                onExit: 'exit_walk'
            },
            wait: {
                meta: { waitData: 'wait data' },
                on: {
                    PED_COUNTDOWN: 'stop'
                },
                onEntry: 'enter_wait',
                onExit: 'exit_wait'
            },
            stop: {
                meta: { stopData: 'stop data' },
                onEntry: 'enter_stop',
                onExit: 'exit_stop'
            }
        }
    };
    var lightMachine = index_1.Machine({
        key: 'light',
        initial: 'green',
        states: {
            green: {
                meta: ['green', 'array', 'data'],
                on: {
                    TIMER: 'yellow',
                    POWER_OUTAGE: 'red',
                    NOTHING: 'green'
                },
                onEntry: 'enter_green',
                onExit: 'exit_green'
            },
            yellow: {
                meta: { yellowData: 'yellow data' },
                on: {
                    TIMER: 'red',
                    POWER_OUTAGE: 'red'
                },
                onEntry: 'enter_yellow',
                onExit: 'exit_yellow'
            },
            red: __assign({ meta: {
                    redData: {
                        nested: {
                            red: 'data',
                            array: [1, 2, 3]
                        }
                    }
                }, on: {
                    TIMER: 'green',
                    POWER_OUTAGE: 'red',
                    NOTHING: 'red'
                }, onEntry: 'enter_red', onExit: 'exit_red' }, pedestrianStates)
        }
    });
    it('states should aggregate meta data', function () {
        var yellowState = lightMachine.transition('green', 'TIMER');
        chai_1.assert.deepEqual(yellowState.meta, {
            'light.yellow': {
                yellowData: 'yellow data'
            }
        });
        chai_1.assert.notProperty(yellowState.meta, 'light.green');
        chai_1.assert.notProperty(yellowState.meta, 'light');
    });
    it('states should aggregate meta data (deep)', function () {
        chai_1.assert.deepEqual(lightMachine.transition('yellow', 'TIMER').meta, {
            'light.red': {
                redData: {
                    nested: {
                        array: [1, 2, 3],
                        red: 'data'
                    }
                }
            },
            'light.red.walk': {
                walkData: 'walk data'
            }
        });
    });
});
