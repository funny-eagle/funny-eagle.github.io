{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"73b22767-50d1-5b69-b41e-8385bdc672b9","excerpt":"Algorithm: 700. Search in a Binary Search Tree Review:  5 best libraries for making AJAX calls in React Tip: 二叉查找树相关的几个基本概念 Share:  深入浅出UML类图 Algorithm Review…","html":"<ul>\n<li>Algorithm:<a href=\"https://leetcode.com/problems/search-in-a-binary-search-tree/\">700. Search in a Binary Search Tree</a></li>\n<li>Review: <a href=\"https://hashnode.com/post/5-best-libraries-for-making-ajax-calls-in-react-cis8x5f7k0jl7th53z68s41k1\">5 best libraries for making AJAX calls in React</a></li>\n<li>Tip: 二叉查找树相关的几个基本概念</li>\n<li>Share: <a href=\"http://www.uml.org.cn/oobject/201211231.asp\">深入浅出UML类图</a></li>\n</ul>\n<h2>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 700. Search in a Binary Search Tree\n * &lt;p>\n * Given the root node of a binary search tree (BST) and a value.\n * You need to find the node in the BST that the node's value equals the given value.\n * Return the subtree rooted with that node.\n * If such node doesn't exist, you should return NULL.\n * &lt;p>\n * For example,\n * &lt;p>\n * Given the tree:\n * 4\n * / \\\n * 2   7\n * / \\\n * 1   3\n * &lt;p>\n * And the value to search: 2\n * You should return this subtree:\n * 2\n * / \\\n * 1   3\n * In the example above, if we want to search the value 5,\n * &lt;p>\n * since there is no node with value 5, we should return NULL.\n * &lt;p>\n * Note that an empty tree is represented by NULL,\n * &lt;p>\n * therefore you would see the expected output (serialized tree format) as [], not null.\n *\n * @author jason\n * @date 2019/3/31.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchInBinarySearchTree</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SearchInBinarySearchTree</span><span class=\"token punctuation\">.</span><span class=\"token function\">searchBST</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">searchBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TreeNode</span> current <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> current<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                current<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"val: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<h3><a href=\"https://hashnode.com/post/5-best-libraries-for-making-ajax-calls-in-react-cis8x5f7k0jl7th53z68s41k1\">5 best libraries for making AJAX calls in React</a></h3>\n<ul>\n<li>jQuery $.ajax</li>\n<li>Fetch API</li>\n<li>Superagent</li>\n<li>Axios</li>\n<li>Request</li>\n</ul>\n<p><code class=\"language-text\">fetch</code>作为与远程资源交互的新标准化API，建议将其用于所有AJAX需求（不仅在React中，而且在所有类型的JavaScript应用程序中）。</p>\n<h2>Tip</h2>\n<h3>二叉查找树相关的几个基本概念</h3>\n<blockquote>\n<p>做到了 leetcode 中的 <a href=\"https://leetcode.com/problems/search-in-a-binary-search-tree/\">Search in a Binary Search Tree</a>，就顺便把二叉查找树的基本概念复习一下</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>树（tree）</strong>是一种典型的数据结构，提供了一种层次组织机构，数据可以存储在树中的每个结点内。</p>\n</li>\n<li>\n<p><strong>二叉树（binary tree）</strong>是一种层次结构，要么是空集，要么是一个称为根（root）元素和两棵不同的二叉树组成的树，这两棵二叉树分别称为左子树和右子树。</p>\n</li>\n<li>\n<p>一条路径的<strong>长度（length）</strong>是指在该条路径上的边的个数。</p>\n</li>\n<li>\n<p>一个结点的<strong>深度（depth）</strong>是指从跟结点到该结点的路径长度。</p>\n</li>\n<li>\n<p><strong>兄弟结点（sibling）</strong>是共享同一父结点的结点。</p>\n</li>\n<li>\n<p>没有子结点的结点称为<strong>叶结点（leaf）</strong>。</p>\n</li>\n<li>\n<p><strong>二叉查找树（binary search tree）</strong>是特殊类型的二叉树，没有重复元素，对于树种的每一个结点，它的左子树中的结点的值都小于该结点的值，而它的右子树的结点的值都大于该结点的值。</p>\n</li>\n</ul>\n<p>参考文献：<a href=\"https://book.douban.com/subject/1879446/\">《Java语言程序设计（进阶篇）》</a></p>\n<h2>Share</h2>\n<h3><a href=\"http://www.uml.org.cn/oobject/201211231.asp\">深入浅出UML类图</a></h3>\n<p>2012年的一篇文章，图文并茂的将UML类图与类与类之间的关系解释的清清楚楚，对UML类图模糊的同学，建议仔细阅读。</p>","frontmatter":{"title":"ARTS35","date":"2019-03-24 18:41:22"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ARTS-35/","previous":{"fields":{"slug":"/ARTS-34/"},"frontmatter":{"title":"ARTS34"}},"next":{"fields":{"slug":"/ARTS-36/"},"frontmatter":{"title":"ARTS36"}}}}