{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"538e53cb-9c15-5a27-b80a-05989792c438","excerpt":"Algorithm Median of Two Sorted Arrays Review Docker for beginners https://docker-curriculum.com/ 公司最近刚好在搞CI和CD，初步选择了Docker + Jenkins pipline…","html":"<h2>Algorithm</h2>\n<h3>Median of Two Sorted Arrays</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 4. Median of Two Sorted Arrays\n * &lt;p>\n * There are two sorted arrays nums1 and nums2 of size m and n respectively.\n * &lt;p>\n * Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n * &lt;p>\n * You may assume nums1 and nums2 cannot be both empty.\n * &lt;p>\n * Example 1:\n * &lt;p>\n * nums1 = [1, 3]\n * nums2 = [2]\n * &lt;p>\n * The median is 2.0\n * &lt;p>\n * Example 2:\n * &lt;p>\n * nums1 = [1, 2]\n * nums2 = [3, 4]\n * &lt;p>\n * The median is (2 + 3)/2 = 2.5\n *\n * @author jason\n * @date 18/7/27.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MedianofTwoSortedArrays</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">findMedianSortedArrays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 创建一个新数组 a， 存放nums1和nums2的元素</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 数组a排序</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">double</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 数组a的长度为偶数时，取中间的两个值，数组下标取 length/2 - 1, length/2</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 数组a的长度为基数时，取最中间的一个值返回，数组下标取 length%2</span>\n            result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token function\">findMedianSortedArrays</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<h3>Docker for beginners</h3>\n<p><a href=\"https://docker-curriculum.com/\">https://docker-curriculum.com/</a></p>\n<p>公司最近刚好在搞CI和CD，初步选择了Docker + Jenkins pipline 来配置自动化流程。这篇文章是耗子叔在极客时间专栏《程序员练级攻略（2018）：容器化和自动化运维》文中推荐的入门Docker的文章，对docker的基本概念和和入门操作讲的很到位，很适合跟着搭一遍环境初步感受一下docker。文章中对docker run、docker pull、 docker images、docker ps、docker rm命令都给出了示例，并根据Dockerfile来创建Docker镜像，演示了在AWS上怎么运行Docker应用、多容器的环境、Docker Network，Docker Compse等，使用Elastic Container 等。我在实际操作中也参考了《Docker Practice》、《第一本Docker书》，私有镜像仓库使用nexus3来搭建。跟着操作下来，对docker有了初步的认识。</p>\n<h3>Best practices for writing Dockerfiles</h3>\n<p><a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\">https://docs.docker.com/develop/develop-images/dockerfile_best-practices/</a>\n啃英文文章的速度还是非常慢，英文词汇量很小，边查词边理解内容，啃下来感觉还是很吃力，继续努力吧！</p>\n<ul>\n<li>Create ephemeral containers</li>\n<li>Understand build context</li>\n<li>Pipe Dockerfile through stdin</li>\n<li>Exclude with .dockerignore</li>\n<li>Use multi-stage builds</li>\n<li>Don’t install unnecessary packages</li>\n<li>Decouple applications</li>\n<li>Minimize the number of layers</li>\n<li>Sort multi-line arguments</li>\n<li>Leverage build cache</li>\n</ul>\n<h2>Tip</h2>\n<h2>Canal 找不到binlog问题分析</h2>\n<p>项目中使用了阿里的canal，主要用来实时往统计相关表里更新数据，使用的1.0.22版本，经常会抛出binlog找不到的异常，难过的是之前异常的log被误删，排查起来很吃力，最终决定先升级到1.0.24版本，观察一段时间看看情况。排查过程中也学习到了一些mysql bin log相关的知识。</p>\n<ul>\n<li><a href=\"https://github.com/alibaba/canal\">https://github.com/alibaba/canal</a></li>\n<li>canal模拟mysql slave的交互协议，伪装自己为mysql slave，向mysql master发送dump协议</li>\n<li>mysql master收到dump请求，开始推送binary log给slave(也就是canal)</li>\n<li>canal解析binary log对象(原始为byte流)</li>\n<li><code class=\"language-text\">meta.dat</code>中记录的是客户端最后一次<code class=\"language-text\">ack</code>的binlog信息</li>\n<li>如果删除了<code class=\"language-text\">meta.dat</code>记录中对应的的binlog文件，并且此时重新启动canal server，会HY000抛异常，提示找不到对应的binlog，解决办法是删除<code class=\"language-text\">meta.dat</code></li>\n<li>使用<code class=\"language-text\">purge master logs before</code>语句无法删除当前正在使用的binlog</li>\n<li><code class=\"language-text\">reset master</code> 可以清空所有的binlog文件，并新生成一个从1开始计数的binlog文件</li>\n<li>\n<p>Connection reset by peer</p>\n<ul>\n<li><a href=\"https://github.com/alibaba/otter/issues/244\">https://github.com/alibaba/otter/issues/244</a></li>\n<li><a href=\"https://github.com/alibaba/canal/issues/297\">https://github.com/alibaba/canal/issues/297</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 查看bin log</span>\n<span class=\"token keyword\">show</span> <span class=\"token keyword\">binary</span> logs<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 新生成一个binlog文件</span>\nflush logs<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 查看binlong清理时间</span>\n<span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'expire_logs_days'</span>\n\n<span class=\"token comment\">-- 删除指定日期之前的binlog</span>\n<span class=\"token keyword\">purge</span> master logs before<span class=\"token string\">'2018-07-25 13:29:59'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Share</h2>\n<p>本周的 <code class=\"language-text\">Share</code> 聊一些跟技术本身不相关的吧，主题是日常学习时间的安排。</p>\n<p>工作六年了，距离自己理想的技术水平还差的非常远，危机意识很重，接下来我聊聊我的日常学习。</p>\n<p>对于我这个夜猫子型的人来说，早晨起床看书学习是一件很痛苦的事情，效率极低，所以很多时候是老婆孩子睡觉了以后，我再看书学习、写写程序，一般是1、2点睡觉，有时debug到3、4点。我很享受这种感觉，夜晚无干扰的coding，思路很清晰，效率很高，我初中背单词就是晚上背，然后第二天很自信的拿到高分的单词听写成绩，哈哈。</p>\n<p>我家小孩刚刚10个月，双方父母都在工作也比较远，所以我媳妇儿全职带孩子，真的很累啊，更心疼我媳妇儿，没办法，终究要经历这一过程。下班回家陪我儿子玩，小孩睡的也晚，非得闹腾到11-12点才肯睡觉。之后的时间就可以任我嗨了，可是有的时候也困得要命，喝咖啡也不管用，扛不住就只能去睡了。</p>\n<p>这几次的ARTS，我自己是很不满意的，因为连着两次都是短时间突击出来的，更像是在完成任务。我更希望能通过解决日常工作的问题和工作积累中就把Review、Tip、Share给完成，花2个小时写两道leetcode算法题、2个小时整理文档。为了能达到轻松完成ARTS，我修改了日常worklog的模板，把遇到的问题及解决办法也一并记录下来，包括查了哪些资料，链接也贴上去，供每周ARTS的内容参考。希望通过这份热忱和不断的坚持，不断的提高自己。</p>","frontmatter":{"title":"ARTS-04","date":"2018-07-28 20:47:40"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ARTS-04/","previous":{"fields":{"slug":"/open-mysql-binlog-for-mac/"},"frontmatter":{"title":"Mac 下 MySQL 开启 bin log"}},"next":{"fields":{"slug":"/ssh-proxy/"},"frontmatter":{"title":"开启ssh代理服务"}}}}