{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"9006e287-dd9e-51cb-9d2c-b761a4001ce4","excerpt":"Algorithm Review Apache Commons Chain\n https://www.baeldung.com/apache-commons-chain 本教程中，作者以“ATM取款”的场景为例，演示 Apache Commons Chain 的应用。 Context 要提取的总金额 10…","html":"<h2>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package org.nocoder.leetcode.solution;\n\nimport java.util.HashMap;\n\n/**\n * Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n * &lt;p&gt;\n * Symbol       Value\n * I             1\n * V             5\n * X             10\n * L             50\n * C             100\n * D             500\n * M             1000\n * For example, two is written as II in Roman numeral, just two one&#39;s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\n * &lt;p&gt;\n * Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n * &lt;p&gt;\n * I can be placed before V (5) and X (10) to make 4 and 9.\n * X can be placed before L (50) and C (100) to make 40 and 90.\n * C can be placed before D (500) and M (1000) to make 400 and 900.\n * Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\n * &lt;p&gt;\n * Example 1:\n * &lt;p&gt;\n * Input: &quot;III&quot;\n * Output: 3\n * Example 2:\n * &lt;p&gt;\n * Input: &quot;IV&quot;\n * Output: 4\n * Example 3:\n * &lt;p&gt;\n * Input: &quot;IX&quot;\n * Output: 9\n * Example 4:\n * &lt;p&gt;\n * Input: &quot;LVIII&quot;\n * Output: 58\n * Explanation: C = 100, L = 50, XXX = 30 and III = 3.\n * Example 5:\n * &lt;p&gt;\n * Input: &quot;MCMXCIV&quot;\n * Output: 1994\n * Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n *\n * @author jason\n * @date 18/9/9.\n */\npublic class RomanToInteger {\n    public int romanToInt(String s) {\n        if (s == null || s.length() == 0) {\n            return -1;\n        }\n        HashMap&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();\n        map.put(&#39;I&#39;, 1);\n        map.put(&#39;V&#39;, 5);\n        map.put(&#39;X&#39;, 10);\n        map.put(&#39;L&#39;, 50);\n        map.put(&#39;C&#39;, 100);\n        map.put(&#39;D&#39;, 500);\n        map.put(&#39;M&#39;, 1000);\n        if (s.length() == 1) return map.get(s.charAt(0));\n        int result = 0;\n        for (int i = 1; i &lt; s.length(); i++) {\n            if (map.get(s.charAt(i - 1)) &gt;= map.get(s.charAt(i))) {\n                result += map.get(s.charAt(i - 1));\n\n            } else {\n                result -= map.get(s.charAt(i - 1));\n            }\n        }\n        result += map.get(s.charAt(s.length() - 1));\n        return result;\n    }\n}</code></pre></div>\n<h2>Review</h2>\n<blockquote>\n<p>Apache Commons Chain\n<a href=\"https://www.baeldung.com/apache-commons-chain\">https://www.baeldung.com/apache-commons-chain</a></p>\n</blockquote>\n<p>本教程中，作者以“ATM取款”的场景为例，演示 Apache Commons Chain 的应用。</p>\n<p><strong>Context</strong></p>\n<ul>\n<li>要提取的总金额</li>\n<li>100 面额纸币数量</li>\n<li>50 面额纸币数量</li>\n<li>10 面额纸币数量</li>\n<li>余额</li>\n</ul>\n<p><strong>Command</strong></p>\n<ul>\n<li>Command 实现类将接收 Context，并作相应的逻辑处理</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class HundredDenominationDispenser implements Command {\n\n    @Override\n    public boolean execute(Context context) throws Exception {\n        intamountLeftToBeWithdrawn = (int) context.get(&quot;amountLeftToBeWithdrawn);\n        if (amountLeftToBeWithdrawn &gt;= 100) {\n            context.put(&quot;noOfHundredsDispensed&quot;, amountLeftToBeWithdrawn / 100);\n            context.put(&quot;amountLeftToBeWithdrawn&quot;, amountLeftToBeWithdrawn % 100);\n        }\n        return false;\n    }\n}</code></pre></div>\n<p><strong>Chain</strong></p>\n<ul>\n<li>Chain 是一组要顺序执行的 Command 的集合。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class AtmWithdrawalChain extends ChainBase {\n\n    public AtmWithdrawalChain() {\n        super();\n        addCommand(new HundredDenominationDispenser());\n        addCommand(new FiftyDenominationDispenser());\n        addCommand(new TenDenominationDispenser());\n        addCommand(new AuditFilter());\n    }\n}</code></pre></div>\n<p>当Chain中的任何Command返回true时，它会强制Chain结束。</p>\n<p><strong>Filter</strong></p>\n<ul>\n<li>过滤器也是一个Command，但具有在执行Chain之后调用的postProcess方法。</li>\n</ul>\n<p><strong>Chain Catalog</strong></p>\n<p><strong>Demo</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class AtmChainTest {\n\n    @Test\n    public void givenInputsToContext_whenAppliedChain_thenExpectedContext() throws Exception {\n        Context context = new AtmRequestContext();\n        context.put(&quot;totalAmountToBeWithdrawn&quot;, 460);\n        context.put(&quot;amountLeftToBeWithdrawn&quot;, 460);\n\n        Catalog catalog = new AtmCatalog();\n        Command atmWithdrawalChain = catalog.getCommand(&quot;atmWithdrawalChain&quot;);\n\n        atmWithdrawalChain.execute(context);\n\n        assertEquals(460, (int) context.get(&quot;totalAmountToBeWithdrawn&quot;));\n        assertEquals(0, (int) context.get(&quot;amountLeftToBeWithdrawn&quot;));\n        assertEquals(4, (int) context.get(&quot;noOfHundredsDispensed&quot;));\n        assertEquals(1, (int) context.get(&quot;noOfFiftiesDispensed&quot;));\n        assertEquals(1, (int) context.get(&quot;noOfTensDispensed&quot;));\n    }\n}</code></pre></div>\n<h2>Tip</h2>\n<h3>sessionStorage 和 localStorage</h3>\n<p> sessionStorage 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问，会话结束后数据也随之销毁。</p>\n<p> localStorage 用于存储一个域名下的需要永久存在在本地的数据，这些数据可以被一直访问，直到这些数据被删除。</p>\n<p> 因此sessionStorage 和 localStorage 的主要区别在于他们存储数据的生命周期，sessionStorage 存储的数据的生命周期是一个会话，而 localStorage 存储的数据的生命周期是永久，直到被主动删除，否则数据永远不会过期的。</p>\n<h2>Share</h2>\n<h3>Chain of Responsibility Pattern</h3>\n<blockquote>\n<p>当你想让一个以上的对象有机会能够处理某个请求的时候，就使用责任链模式。</p>\n</blockquote>\n<p>通过责任链模式，你可以为某个请求创建一个对象链。每个对象依次检查此请求，并对其进行处理，或者将它传给链中的下一个对象。</p>\n<ul>\n<li>将请求的发送者和接收者解耦</li>\n<li>可以简化你的对象，因为它不需要知道链的结构</li>\n<li>通过改变链内的成员或调用他们的次序，允许动态的新增或者删除责任。</li>\n</ul>","frontmatter":{"title":"ARTS-10","date":"2018-09-14 15:29:17"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ARTS-10/","previous":{"fields":{"slug":"/ARTS-09/"},"frontmatter":{"title":"ARTS-09"}},"next":{"fields":{"slug":"/ARTS-11/"},"frontmatter":{"title":"ARTS-11"}}}}