{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"be45af53-f98b-5c82-804f-5786ca43a29d","excerpt":"Algorithm: 654.Maximum Binary Tree Review: 10 best practices for better restfull api Tip:递归和调用栈 Share:耗叔的 分布式系统的技术栈 Algorithm Review 10 best practices for…","html":"<ul>\n<li>Algorithm: 654.Maximum Binary Tree</li>\n<li>Review:<a href=\"https://blog.mwaysolutions.com/2014/06/05/10-best-practices-for-better-restful-api/\">10 best practices for better restfull api</a></li>\n<li>Tip:递归和调用栈</li>\n<li>Share:耗叔的<a href=\"https://time.geekbang.org/column/article/1512\">分布式系统的技术栈</a></li>\n</ul>\n<h2>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution<span class=\"token punctuation\">.</span>common</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 654.Maximum Binary Tree\n * Given an integer array with no duplicates.\n * A maximum tree building on this array is defined as follow:\n *\n * The root is the maximum number in the array.\n * The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.\n * The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.\n * Construct the maximum tree by the given array and output the root node of this tree.\n *\n * Example 1:\n * Input: [3,2,1,6,0,5]\n * Output: return the tree root node representing the following tree:\n *\n *       6\n *     /   \\\n *    3     5\n *     \\    /\n *      2  0\n *        \\\n *         1\n * Note:\n * The size of the given array will be in the range [1,1000].\n * @author jason\n * @date 2019/4/7.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MaximumBinaryTree</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> treeNode <span class=\"token operator\">=</span> <span class=\"token function\">constructMaximumBinaryTree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">constructMaximumBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">construct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> max_i <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>max_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> max_i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> max_i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> max_i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>max_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                max_i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> max_i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<h3><a href=\"https://blog.mwaysolutions.com/2014/06/05/10-best-practices-for-better-restful-api/\">10 best practices for better restfull api</a></h3>\n<ul>\n<li>\n<p>1、使用名词而非动词</p>\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th>Resource</th>\n<th>GET read</th>\n<th>POST create</th>\n<th>PUT update</th>\n<th>DELETE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/cars</td>\n<td>Returns a list of cars</td>\n<td>Create a new car</td>\n<td>Bulk update of cars</td>\n<td>Delete all cars</td>\n</tr>\n<tr>\n<td>/cars/711</td>\n<td>Returns a specific car</td>\n<td>Method not allowed (405)</td>\n<td>Updates a specific car</td>\n<td>Deletes a specific car</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>不要使用动词</p>\n</li>\n</ul>\n<p><code class=\"language-text\">/getAllCars</code>\n<code class=\"language-text\">/createNewCar</code>\n<code class=\"language-text\">/deleteAllRedCars</code></p>\n</li>\n<li>\n<p>GET方法和查询参数不应修改状态</p>\n<ul>\n<li>使用PUT，POST 和DELETE方法代替GET方法来修改状态</li>\n<li>不要用GET方法来修改状态</li>\n</ul>\n</li>\n<li>\n<p>使用复数名词</p>\n<ul>\n<li>\n<p>不要混淆单数和复数名词，保持简单，只使用复数名词来表示所有资源。</p>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/cars instead of /car\n/users instead of /user\n/products instead of /product\n/settings instead of /setting</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>将子资源用于关系</p>\n<ul>\n<li>\n<p>如果资源与另一个资源相关，则使用子资源</p>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET /cars/711/drivers/ Returns a list of drivers for car 711\nGET /cars/711/drivers/4 Returns driver #4 for car 711</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>在http header 中指定格式</p>\n<ul>\n<li>客户端和服务器都需要知道用于通信的格式。必须在http header 中指定格式</li>\n<li>content-type 定义请求格式</li>\n<li>accept 定义可接受的响应格式列表</li>\n</ul>\n</li>\n<li>\n<p>6、使用HATEOAS</p>\n<ul>\n<li><strong>H</strong>ypermedia <strong>a</strong>s <strong>t</strong>he <strong>E</strong>ngine <strong>o</strong>f <strong>A</strong>pplication <strong>S</strong>tate</li>\n</ul>\n</li>\n<li>\n<p>7、为集合提供过滤，排序，字段选择和分页</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET /cars?color=red Returns a list of red cars\nGET /cars?seats&lt;=2 Returns a list of cars with a maximum of 2 seats</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>8、API版本控制</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/blog/api/v1</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>9、使用HTTP状态码处理错误</p>\n</li>\n<li>\n<p>10、允许覆盖HTTP方法</p>\n<ul>\n<li>某些代理仅支持POST和GET方法，为了支持具有这些限制的RESTful API，API 需要使用自定义HTTP header X-HTTP-Method_Override 来覆盖POST方法</li>\n</ul>\n</li>\n</ul>\n<h2>Tip</h2>\n<h3>递归和调用栈</h3>\n<blockquote>\n<p>最近在读《算法图解》，真的非常易读非常有意思，第三章讲递归，图文并茂描述的浅显易懂，把章节中的内容写了笔记，整理一下，作为本周的Tip吧。</p>\n</blockquote>\n<ul>\n<li>递归指的是调用自己的函数</li>\n<li>每个递归函数都有两个条件：基线条件和递归条件</li>\n<li>栈有两种操作，压入和弹出</li>\n<li>所有函数调用都进入<strong>调用栈</strong>(call stack)</li>\n</ul>\n<h4>递归</h4>\n<blockquote>\n<p>假设我们需要找一把钥匙，钥匙在一个大盒子里，这个盒子里有盒子，盒子里的盒子有有盒子，钥匙就在某个盒子里。</p>\n</blockquote>\n<p>以下是使用递归方法寻找钥匙的伪代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">look_for_key</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> box<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">.</span>is_a_box<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            look_for_box<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> item<span class=\"token punctuation\">.</span>is_key<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span> <span class=\"token string\">\"found the key\"</span></code></pre></div>\n<p>递归只是让解决方案更清晰，并没有性能上的优势。Leigh Caldwell在Stack Overflow 上说过一句话：“如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。”</p>\n<p>编写递归方法时，必须告诉它何时停止递归，所以，每个递归函数都有两部分，基线条件和递归条件。递归条件是指函数调用自己，而基线条件是指函数不在调用自己，从而避免形成无线循环。在上面的找钥匙的例子中，<code class=\"language-text\">item.is_a_box()</code>就是递归条件，<code class=\"language-text\">item.is_key(item)</code>就是基线条件。</p>\n<h4>调用栈</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"hello \"</span> <span class=\"token operator\">+</span> name\n    greet2<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    bye<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">greet2</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"how are you \"</span> <span class=\"token operator\">+</span> name\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">bye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"bye\"</span></code></pre></div>\n<p>假设我们调用greet(“jason”)，看看调用这个方法的具体情况</p>\n<ul>\n<li>调用 greet(“jason”) ，计算机为其分配一块内存</li>\n<li>将 name 设置为jason ，存储到内存中</li>\n<li>接下来打印hello jason，在调用greet2(“jason”),计算机也为其分配一块内存</li>\n<li>计算机使用栈来表示这些内存块，其中第二个内存块位于第一个内存块上面。打印howare you jason，然后从方法调用返回，此时，栈顶的内存块被弹出。</li>\n<li>当调用greet2()时，greet 只执行了一部分</li>\n<li>调用另一个函数时，当前函数暂停并处于未完成状态,该函数的所有变量的值都还在内存中</li>\n<li>执行完greet2后，在回到greet，从离开的地方接着往下执行</li>\n<li>调用bye方法，打印bye，并从这个函数返回</li>\n<li>又回到greet，没有事情要做了，从greet函数返回</li>\n</ul>\n<p>这个栈用于存储多个函数的变量，称为<strong>调用栈</strong></p>\n<p>参考文献：《算法图解》</p>\n<h2>Share</h2>\n<h3><a href=\"https://time.geekbang.org/column/article/1512\">分布式系统的技术栈</a></h3>\n<ul>\n<li>\n<p>分布式系统的关键技术</p>\n<ul>\n<li>服务治理</li>\n<li>架构软件管理</li>\n<li>DevOps</li>\n<li>自动化运维</li>\n<li>资源调度管理</li>\n<li>整体架构监控</li>\n<li>流量控制</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"ARTS36","date":"2019-04-06 18:41:22"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ARTS36/","previous":{"fields":{"slug":"/ARTS35/"},"frontmatter":{"title":"ARTS35"}},"next":{"fields":{"slug":"/ARTS37/"},"frontmatter":{"title":"ARTS-37"}}}}