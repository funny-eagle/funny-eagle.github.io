{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"986e78c1-cf56-53e4-92fd-df8b66907c8f","excerpt":"Docker的三个基本概念 镜像（Image） 容器（Container） 仓库（Repository） Docker 镜像 Docker…","html":"<h2>Docker的三个基本概念</h2>\n<ul>\n<li>镜像（Image）</li>\n<li>容器（Container）</li>\n<li>仓库（Repository）</li>\n</ul>\n<h2>Docker 镜像</h2>\n<p>Docker镜像是一个特殊的文件系统，除了提供和容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>\n<h3>分层存储</h3>\n<p>镜像是一个虚拟的概念，由一组文件系统组成，或者说由多层文件系统联合组成。</p>\n<p>分层存储的特征使得镜像的服用、定制变得更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>\n<h2>Docker 容器</h2>\n<p>镜像和容器的关系，就像是面向对象中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。容器内的进程是运行在一个隔离的环境里，使用起来就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p>\n<p>容器也是使用分层存储，每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为<strong>容器存储层</strong>。</p>\n<p>任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>按照Docker最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡，因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>\n<h2>Docker Registry</h2>\n<p>如果需要在其他的服务器上使用在基于当前宿主机上构建完成的镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p>\n<p>一个Docker Registry中可以包含多个仓库（Repository），每个仓库可以包含多个标签(Tag)，每个标签对应一个镜像。</p>\n<p>通常一个仓库会包含一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过仓库名：标签的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以latest作为默认标签。</p>\n<p>以Ubuntu镜像为例，Ubuntu是仓库的名字，仓库内包含有不同的版本标签，如<code class=\"language-text\">14.04</code>,<code class=\"language-text\">16.04</code>。我们可以通过<code class=\"language-text\">ubuntu:1404</code>来具体指定所需要的版本的镜像。如果忽略了标签，例如<code class=\"language-text\">ubuntu</code>,那就视为<code class=\"language-text\">ubuntu:latest</code>。</p>\n<p>仓库名经常以两段式路径形式出现，比如jwilder/nginx-proxy，前者往往意味着Docker Registry多用户环境下的用户名，后者则是对应的软件名。但非绝对，取决于所使用的具体Docker Registry的软件或服务。</p>\n<h3>Docker Registry 公开服务</h3>\n<p>开放为用户使用、允许用户管理镜像的Registry服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p>\n<p>Registry Mirror， 使用加速器会直接从国内的地址下载Docker Hub的镜像。\n国内的类似于Docker Hub的公开服务，时速云镜像仓库、网易云镜像服务、DaoCloud镜像市场、阿里云镜像库等。</p>\n<h3>私有Docker Registry</h3>\n<p>用户可以在本地搭建私有Docker Registry。可以使用官方提供的Docker Registry镜像作为私有Registry服务。</p>\n<h2>安装Docker</h2>\n<p>官方的安装指南 <a href=\"https://docs.docker.com/install/\">https://docs.docker.com/install/</a></p>\n<h3>CentOS 安装Docker CE</h3>\n<p><a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>\n<blockquote>\n<p>警告：切勿在没有配置Docker YUM源的情况下直接使用yum命令安装Docker。</p>\n</blockquote>\n<p>准备工作</p>\n<h4>系统要求</h4>\n<p>CentOS 7 内核版本不低于3.10， CentOS 7满足最低内核的要求，但由于内核版本比较低，部分功能无法使用，并且部分功能可能不太稳定。</p>\n<h4>卸载旧版本</h4>\n<p>旧版本的Docker称谓docker或者docker-engine，使用以下命令卸载旧版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">“$ sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine”</code></pre></div>\n<h4>使用yum安装</h4>\n<p>执行以下命令安装依赖包</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">“$ sudo yum install -y yum-utils \\\n           device-mapper-persistent-data \\\n           lvm2”</code></pre></div>\n<p>添加yum软件源</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">“$ sudo yum-config-manager \\\n    --add-repo \\\n    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo”</code></pre></div>\n<h4>安装Docker CE</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> yum makecache fast\n$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> docker-ce</code></pre></div>\n<h4>使用脚本自动安装</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">curl</span> -fsSL get.docker.com -o get-docker.sh\n$ <span class=\"token function\">sudo</span> sh get-docker.sh --mirror Aliyun</code></pre></div>\n<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把Docker CE的Edge版本安装在系统中。</p>\n<h4>启动Docker CE</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> systemctl <span class=\"token function\">enable</span> docker\n$ <span class=\"token function\">sudo</span> systemctl start docker</code></pre></div>\n<h4>建立docker 用户组</h4>\n<p>建立docker组</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sudo groupadd docker</code></pre></div>\n<p>将当前用户加入docker组</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker <span class=\"token variable\">$USER</span></code></pre></div>\n<p>退出当前终端并重新登录</p>\n<h4>测试Docker是否安装正确</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker run hello-world</code></pre></div>\n<p>使用国内镜像加速</p>\n<p>使用systemd的系统，在/etc/docker/daemon.json中写入如下内容，不存在就新建该文件</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"registry-mirrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token string\">\"https://registry.docker-cn.com\"</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后重新启动服务</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> systemctl daemon-reload\n$ <span class=\"token function\">sudo</span> systemctl restart docker</code></pre></div>","frontmatter":{"title":"Docker Practice Notes 01","date":"2018-07-13 17:37:12"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docker-practice-notes/","previous":{"fields":{"slug":"/ARTS-01/"},"frontmatter":{"title":"ARTS01-20180707"}},"next":{"fields":{"slug":"/ARTS-02/"},"frontmatter":{"title":"ARTS02-20180715"}}}}