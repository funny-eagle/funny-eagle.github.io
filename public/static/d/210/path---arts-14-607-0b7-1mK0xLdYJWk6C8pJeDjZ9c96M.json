{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"1bb8e33c-347b-5b9c-807a-94f8c9d00d85","excerpt":"第十四周ARTS。国庆节接近尾声了，这个十一过得有点痛苦，给孩子断奶、孩子发烧，折腾了5天，心疼宝宝啊，感慨下为人父母的不容易 Algorithm Review CAP theorem 左耳听风-分布式系统架构经典资料 Consistency : Every read receives the most recent…","html":"<blockquote>\n<p>第十四周ARTS。国庆节接近尾声了，这个十一过得有点痛苦，给孩子断奶、孩子发烧，折腾了5天，心疼宝宝啊，感慨下为人父母的不容易</p>\n</blockquote>\n<h2>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 21. Merge Two Sorted Lists\n * &lt;p>\n * Merge two sorted linked lists and return it as a new list.\n * The new list should be made by splicing together the nodes of the first two lists.\n * &lt;p>\n * Example:\n * &lt;p>\n * Input: 1->2->4, 1->3->4\n * Output: 1->1->2->3->4->4\n *\n * @author jason\n * @date 2018/10/7.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MergeTwoSortedLists</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> dummy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> l3 <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;=</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                l3<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                l3<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            l3 <span class=\"token operator\">=</span> l3<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            l3<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            l3<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Definition for singly-linked list.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            val <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<h3><a href=\"https://en.wikipedia.org/wiki/CAP_theorem\">CAP theorem</a></h3>\n<p><a href=\"https://time.geekbang.org/column/article/2080\">左耳听风-分布式系统架构经典资料</a></p>\n<ul>\n<li>\n<p><em>Consistency</em>: Every read receives the most recent write or an error</p>\n<ul>\n<li>一致性：每次读取要么获得最近写入的数据，要么获得一个错误</li>\n</ul>\n</li>\n<li>\n<p><em>Availability</em>: Every request receives a response that is not an error</p>\n<ul>\n<li>可用性：每次请求都能获得一个响应，并非一个错误</li>\n</ul>\n</li>\n<li>\n<p><em>Partition tolerance</em>: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes</p>\n<ul>\n<li>分区容忍：尽管网络丢包或延迟，系统任然继续运行</li>\n</ul>\n</li>\n</ul>\n<p>CAP定理表明，在存在网络分区的情况下，一致性和可用性必须二选一。而在没有发生网络故障时，一致性和可用性是可以被同时满足的。</p>\n<h2>Tip</h2>\n<p>Sorry, There is no tip this week.</p>\n<h2>Share</h2>\n<h3><a href=\"http://nocoder.org/archive/27\">不能改变，那就接受</a></h3>\n<blockquote>\n<p>分享一篇去年写的关于抱怨的短文</p>\n</blockquote>\n<p>办公室里，大街上，火锅店里，电话里… 很多地方你都能听到各种抱怨的声音，诸如此类：</p>\n<blockquote>\n<p>“这个傻叉写的什么烂代码，格式化一下都不会嘛”\n“出尔反尔啊，本来你不是这么说的啊，这个傻叉，卧槽”\n“一会儿让我这么干，一会儿让我那么干，真是搞笑，哎”\n“这加班加的，还让不让人活了，真TMD不想干了”\n…</p>\n</blockquote>\n<p>当然，我也说过类似的话，而且不止一次。</p>\n<p>那，咱们来说道说道，“抱怨怎么了，有什么不对吗？”</p>\n<p>或许你认为抱怨是发泄愤怒情绪的一种方式，爆几句粗口，然后转过身，眼不见心不烦，不了了之，但是当你再次遇到相同的情况，可能情绪会更加糟糕，并且可能予以更激进的抱怨。</p>\n<p>结果呢，问题并没有解决。</p>\n<p><strong>什么是抱怨</strong></p>\n<blockquote>\n<p>抱怨：表达哀伤、痛苦或者不满。</p>\n</blockquote>\n<p>抱怨是人<strong>说</strong>出来的。“抱怨”和“陈述事实”有区别，它们表达的情绪不一样。抱怨的时候会散发负能量，唉声叹气，爆粗口等，如果你身边有这样的人，他可能也会影响到你的情绪或者处事的方式。</p>\n<blockquote>\n<p>抱怨使我们关注问题本身，以至于我们不会去考虑解决问题、改善境遇的方法。</p>\n</blockquote>\n<p>不管是对自己、还是对别人抱怨，都产生不了积极的影响，只会让事情变得更糟糕。</p>\n<p>最近团队新来了2个初级程序员，工作年限都是2年，能力相仿，但是面对公司封装的框架，他们几乎可以说要从零开始学习。我把他们安排在不同的小组，a在A组，b在B组，由于工位紧张，暂时给他们安排的工位离团队比较远。\na的负责人对他要求很高，认为a工作了两年应当具备一定的技术能力，在a遇到问题、耽误进度的时候，面对着巨大交付压力的A组长，对他发了脾气，“哎，还要我怎么说，不如让我直接做了算了”，“你连这个都不会，那你说怎么办”…a的工作效率越来越低。\nb的负责人很有耐心的解答着新员工的问题，时而给予表扬，b逐渐能负责更多的模块，也经常跑过来沟通需求，融入团队的速度很快。</p>\n<p>我不否认他们有性格上的差异，但是仍然能反应一个事实，那就是，负能量会让人更加消极，正能量促使人进步的更快。如果A组长多一些耐心指导，换以表扬鼓励的方式对待a，那么a的表现肯定比现在要出色得多。</p>\n<p>如果你发现了让你不满的事情，就尝试改善它吧，如果你没有办法改变，那就接受现状。</p>\n<p>优化一下让你愤怒的烂代码，或者找author谈谈重构，或者提交一个BUG。</p>\n<p>难吃的饭可以不吃，也可以请老板换一碗，或者我下次不光顾了。</p>\n<p>赞美一下你的同事、你的家人，他们会更加努力，展现出更好的自己。</p>\n<p>最后，奉劝一下自己，要少说点脏话。</p>","frontmatter":{"title":"ARTS-14","date":"2018-10-13 17:02:28"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ARTS-14/","previous":{"fields":{"slug":"/Apache-Kafka-Quickstart/"},"frontmatter":{"title":"Apache Kafka Quickstart"}},"next":{"fields":{"slug":"/ARTS-15/"},"frontmatter":{"title":"ARTS15-20181013"}}}}