{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"9af1c2fa-ce7e-58ba-8dac-3c92694084b6","excerpt":"What is ARTS ? Algorithm  每周至少做一个leetcode算法题\n Review  阅读并点评至少一篇英文技术文章\n Tip  学习至少一个技术技巧\n Share  分享一篇有观点和思考的技术文章 Algorithm Two Sum Sulution https://leetcode.com…","html":"<h2>What is ARTS ?</h2>\n<blockquote>\n<p><strong>Algorithm</strong> 每周至少做一个leetcode算法题\n<strong>Review</strong> 阅读并点评至少一篇英文技术文章\n<strong>Tip</strong> 学习至少一个技术技巧\n<strong>Share</strong> 分享一篇有观点和思考的技术文章</p>\n</blockquote>\n<h2>Algorithm</h2>\n<h3>Two Sum Sulution</h3>\n<p><a href=\"\">https://leetcode.com/problems/two-sum/description/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 1.Two Sum \n * Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n * You may assume that each input would have exactly one solution, and you may not use the same element twice.\n * \n * Example:\n * Given nums = [2, 7, 11, 15], target = 9,\n * Because nums[0] + nums[1] = 2 + 7 = 9,\n * return [0, 1].\n *\n * @author jason\n * @date 18/7/6.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoSumSolution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No solution!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> resultMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            resultMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No solution!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<h3>Understanding MySQL Queries with Explain</h3>\n<blockquote>\n<p><a href=\"https://www.exoscale.com/syslog/explaining-mysql-queries/\">https://www.exoscale.com/syslog/explaining-mysql-queries/</a></p>\n</blockquote>\n<p><code class=\"language-text\">explain</code> columns:</p>\n<ul>\n<li>id (query id)</li>\n<li>select_type (type of statement)</li>\n<li>table (table referenced)</li>\n<li>type (join type)</li>\n<li>possible_keys (which keys could have been used)</li>\n<li>key (key that was used)</li>\n<li>key_len (length of used key)</li>\n<li>ref (columns compared to index)</li>\n<li>rows (amount of rows searched)</li>\n<li>Extra (additional information)</li>\n</ul>\n<p>The main points for long-term performance summarized:</p>\n<ul>\n<li>create a sustainable data model that suits your company’s needs</li>\n<li>choose the right form of database</li>\n<li>use a software architecture that matches your product</li>\n<li>go through regular iterations of looking at the structure of your queries and use <code class=\"language-text\">explain</code> on the more convoluted ones, optimize usage for your chosen database(s), also with regard to database updates and how they could affect you</li>\n<li>choose the instances that best suit your application and database needs in accordance with performance and bandwidth</li>\n</ul>\n<h2>Tip</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Springboot</code>多模块项目，扫描不到另一个module的service，无法使用<code class=\"language-text\">@Autowired</code>注入。</p>\n<ul>\n<li>原因分析：SpringBoot默认在Application启动类的同级package开始往下扫描，另一个module的service包名在启动类包的上一级，所以扫描不到。</li>\n<li>解决办法：在springboot启动类上增加<code class=\"language-text\">@ComponentScan(basePackages = { &quot;com.a.b.c&quot; })</code>指定扫描的package，或者调整SpringBootApplication启动类的位置。</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Mybatis</code>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</p>\n<ul>\n<li>原因分析：在idea下，maven默认到<code class=\"language-text\">src/main/resources</code>目录下拷贝xml文件，而我把mapper.xml放在了<code class=\"language-text\">src/main/java</code>的package下，编译后target下找不到mapper.xml文件，故抛出该异常</li>\n<li>解决方法：在pom.xml文件的build标签下增加resources。</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>src/main/java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>includes</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span><span class=\"token punctuation\">></span></span>**/*.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>include</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>includes</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Share</h2>\n<h3>Adapter Design Pattern in Java</h3>\n<p><a href=\"\">https://www.journaldev.com/1487/adapter-design-pattern-java</a></p>\n<h3>架构师的自我修养</h3>\n<p><a href=\"\">https://mp.weixin.qq.com/s/KLDUdbo2RpXIDE4k6jR1iw</a></p>","frontmatter":{"title":"ARTS01-20180707","date":"2018-07-06 18:15:39"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ARTS01-20180707/","previous":{"fields":{"slug":"/google-java-coding-guide/"},"frontmatter":{"title":"Google Java编程风格指南"}},"next":{"fields":{"slug":"/docker-practice-notes/"},"frontmatter":{"title":"Docker Practice Notes 01"}}}}