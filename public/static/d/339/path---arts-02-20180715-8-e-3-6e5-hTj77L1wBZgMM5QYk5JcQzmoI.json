{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"b441f39e-8471-532d-a78b-85f0d469cc19","excerpt":"What is ARTS ? Algorithm  每周至少做一个leetcode算法题\n Review  阅读并点评至少一篇英文技术文章\n Tip  学习至少一个技术技巧\n Share  分享一篇有观点和思考的技术文章 Algorithm Add Two Numbers Review Code Review Best…","html":"<h2>What is ARTS ?</h2>\n<blockquote>\n<p><strong>Algorithm</strong> 每周至少做一个leetcode算法题\n<strong>Review</strong> 阅读并点评至少一篇英文技术文章\n<strong>Tip</strong> 学习至少一个技术技巧\n<strong>Share</strong> 分享一篇有观点和思考的技术文章</p>\n</blockquote>\n<h2>Algorithm</h2>\n<h3>Add Two Numbers</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 1.Add Two Numbers\n * \n * You are given two non-empty linked lists representing two non-negative integers.\n * \n * The digits are stored in reverse order and each of their nodes contain a single digit.\n * \n * Add the two numbers and return it as a linked list.\n * \n * You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n * \n * Example\n * Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)\n * Output: 7 -> 0 -> 8\n * Explanation: 342 + 465 = 807.\n *\n * @author jason\n * @date 18/7/13.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddTwoNumbers</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> listNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> listNode<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> carry <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> val1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> l1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> val2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> val1 <span class=\"token operator\">+</span> val2 <span class=\"token operator\">+</span> carry<span class=\"token punctuation\">;</span>\n            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            carry <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> listNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">ListNode</span> l1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ListNode</span> l2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AddTwoNumbers</span><span class=\"token punctuation\">.</span><span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Definition for singly-linked list.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        val <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> listNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>listNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>listNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            listNode <span class=\"token operator\">=</span> listNode<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<blockquote>\n<p>Code Review Best Practices\n<a href=\"https://medium.com/palantir/code-review-best-practices-19e02780015f\">https://medium.com/palantir/code-review-best-practices-19e02780015f</a></p>\n</blockquote>\n<ul>\n<li>\n<p>Why, what, and when to do code reviews\nWhy:\n1.个人编程能力提升；\n2.知识共享帮助团队提升；\n3.代码的一致性；\n4.代码的可读性；\n5.低级错误和代码结构错误\n6.安全\nWhat:\n1.团队就自己的方法达成一致；\n2.团队中的所有人的代码都需要复查；\nWhen：\n在自动化检查之后，代码合并到master分支之前进行code review</p>\n</li>\n<li>\n<p>Preparing code for review\n1.明确复查范围；\n2.提交代码的完整性，确保代码是通过测试和自动化检查的；\n3.重构的代码不应该改变其原有的行为意图；\n4.人工代码复查重心应该在程序逻辑上，而不是样式、语法或格式，这些问题用自动化工具来检测。</p>\n</li>\n<li>\n<p>Performing code reviews\ncode review的目的、执行、可读性和风格、可维护性、安全、评论以及认真回复review评论。</p>\n</li>\n<li>\n<p>Code review examples</p>\n</li>\n</ul>\n<p>Inconsistent naming\n命名风格不一致</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> countTotalPageVisits<span class=\"token punctuation\">;</span> <span class=\"token comment\">//R: name variables consistently</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> uniqueUsersCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inconsistent method signatures\n方法签名不一致</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInterface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** Returns {@link Optional#empty} if s cannot be extracted. */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">extractString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** Returns null if {@code s} cannot be rewritten. */</span>\n  <span class=\"token comment\">//R: should harmonize return values: use Optional&lt;> here, too</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">rewriteString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Library use\n使用工具类</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//R: remove and replace by Guava's MapJoiner</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">joinAndConcatenate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> keyValueSeparator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> keySeparator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Personal taste</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> dayCount<span class=\"token punctuation\">;</span> <span class=\"token comment\">//R: nit: I usually prefer numFoo over fooCount; up to you, but we should keep it consistent in this project</span></code></pre></div>\n<p>Bugs</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//R: This performs numIterations+1 iterations, is that intentional?</span>\n<span class=\"token comment\">//   If it is, consider changing the numIterations semantics?</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> numIterations<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Architectural concerns\n架构问题</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">otherService<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//R: I think we should avoid the dependency on OtherService. Can we discuss this in person?</span></code></pre></div>\n<h2>Tip</h2>\n<p>上周在写一个定时删除无用资源的定时任务，用到了列举所有oss对象的方法，阿里的FAQ回复有勘误（已向他们反馈，现已修复）</p>\n<p>获取阿里云OSS上指定bucket下所有的对象信息列表</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> endpoint <span class=\"token operator\">=</span> <span class=\"token string\">\"http://oss-cn-hangzhou.aliyuncs.com\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> accessKeyId <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;yourAccessKeyId>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> accessKeySecret <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;yourAccessKeySecret>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> bucketName <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;yourBucketName>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建OSSClient实例。</span>\n<span class=\"token class-name\">OSSClient</span> ossClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OSSClient</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">,</span> accessKeyId<span class=\"token punctuation\">,</span> accessKeySecret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> maxKeys <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> nextMarker <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ObjectListing</span> objectListing<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    objectListing <span class=\"token operator\">=</span> ossClient<span class=\"token punctuation\">.</span><span class=\"token function\">listObjects</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ListObjectsRequest</span><span class=\"token punctuation\">(</span>bucketName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMarker</span><span class=\"token punctuation\">(</span>nextMarker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMaxKeys</span><span class=\"token punctuation\">(</span>maxKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OSSObjectSummary</span><span class=\"token punctuation\">></span></span> sums <span class=\"token operator\">=</span> objectListing<span class=\"token punctuation\">.</span><span class=\"token function\">getObjectSummaries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OSSObjectSummary</span> s <span class=\"token operator\">:</span> sums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    nextMarker <span class=\"token operator\">=</span> objectListing<span class=\"token punctuation\">.</span><span class=\"token function\">getNextMarker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>objectListing<span class=\"token punctuation\">.</span><span class=\"token function\">isTruncated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 关闭OSSClient。</span>\nossClient<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Share</h2>\n<p>20条数据库设计最佳实践</p>\n<blockquote>\n<p><a href=\"https://dzone.com/articles/20-database-design-best\">https://dzone.com/articles/20-database-design-best</a></p>\n</blockquote>\n<ol>\n<li>对<code class=\"language-text\">table</code>和<code class=\"language-text\">column</code>使用明确定义的单词并且风格一致的命名。</li>\n<li>表名使用单数（例如：使用<code class=\"language-text\">StudentCourse</code> 而不是<code class=\"language-text\">StudentCourses</code>），<code class=\"language-text\">table</code>代表着一个实体的集合，不需要用复数命名。</li>\n<li>表名不要用空格，否则，您将不得不使用<code class=\"language-text\">&#39;{&#39;，&#39;[&#39;，&#39;&#39;&#39;</code>等字符来定义表，访问时还需要用引号<code class=\"language-text\">“Student Course”</code>， 直接用<code class=\"language-text\">StudentCourse</code>会更好。</li>\n<li>表名不要使用不必要的前缀或者后缀，例如使用<code class=\"language-text\">School</code>而不是<code class=\"language-text\">TblSchool, SchoolTable</code>。</li>\n<li>保持密码的安全性，需要用的时候在程序里解密</li>\n<li>所有表使用<code class=\"language-text\">integer</code>类型ID字段。 即使暂时不需要ID，将来也可能会需要，例如关联表，索引等。</li>\n<li>索引选择<code class=\"language-text\">integer</code>类型的列，<code class=\"language-text\">varchar</code>列索引会引起性能问题。</li>\n<li>使用位字段存储布尔值，使用<code class=\"language-text\">integer</code>或<code class=\"language-text\">varchar</code>是不必要的存储消耗。布尔值的字段列命名使用<code class=\"language-text\">is</code>作为前缀。</li>\n<li>提供数据库访问权限，不要把管理员权限分配给所有人。</li>\n<li>尽量避免出现select * 查询除非必须需要，使用select [需要的列]可以提高查询效率。</li>\n<li>如果应用程序代码足够大，则使用<code class=\"language-text\">ORM（object relational mapping）</code>框架（例如<code class=\"language-text\">hibernate</code>，<code class=\"language-text\">MyBatis</code> …）。ORM框架的性能问题可以通过详细的配置参数来处理。</li>\n<li>将大表、不用的表或很少使用的表，部分划分到不同的物理存储区以提高查询性能。</li>\n<li>对于大型，敏感和任务评论者数据库系统，使用灾难恢复和安全服务，如故障转移群集，自动备份，复制等。</li>\n<li>使用约束（外键，检查，非空…）来保证数据的完整性。 不要把所有的控制权都交给程序代码处理。</li>\n<li>缺乏数据库文档是非常可恶的。 用ER图和说明文档来记录数据库设计。 也为触发器，存储过程和其他脚本编写注释行。</li>\n<li>在大表上经常使用的查询创建索引。 分析工具可以用来确定需要定义哪些索引。 对于多行数据的查询，聚簇索引通常更好。 对于点查询，非聚集索引通常更好。</li>\n<li>数据库服务器和Web服务器必须放置在不同的机器上。 这将提供更高的安全性（攻击者无法直接访问数据），并且由于请求数量和进程使用率降低，服务器CPU和内存性能会更好。</li>\n<li>由于性能问题，不得在频繁查询的表中定义图像和<code class=\"language-text\">Blob</code>数据列。 这些数据必须放在单独的表中，并且它们的指针可以在查询的表中使用。</li>\n<li>标准化必须根据需要使用，以优化性能。 欠规范化会导致数据的过度重复，过度规范化会导致太多表中的过多连接。两者都会影响性能。</li>\n<li>一定要为数据库设计留足够的时间，否则可能会花费比设计多成百上千倍的时间来维护设计不佳的数据库甚至需要重新设计。</li>\n</ol>","frontmatter":{"title":"ARTS02-20180715","date":"2018-07-15 16:38:25"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ARTS02-20180715/","previous":{"fields":{"slug":"/docker-practice-notes/"},"frontmatter":{"title":"Docker Practice Notes 01"}},"next":{"fields":{"slug":"/ARTS03-20180722/"},"frontmatter":{"title":"ARTS03-20180722"}}}}