{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"511eca75-410a-58d5-b40e-39b2f1dbc7f6","excerpt":"装饰器模式（Decorator Pattern…","html":"<p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。\n这种类型的设计模式属于<code class=\"language-text\">结构型模式</code>，它是作为现有的类的一个包装。\n这种模式创建了一个装饰类，用来<code class=\"language-text\">包装</code>原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。\n我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个<code class=\"language-text\">形状</code>装饰上不同的颜色，同时又不改变形状类。</p>\n<h2>介绍</h2>\n<p><strong>意图：</strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p>\n<p><strong>主要解决：</strong>一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p>\n<p><strong>何时使用：</strong>在不想增加很多子类的情况下扩展类。</p>\n<p><strong>如何解决：</strong>将具体功能职责划分，同时继承装饰者模式。</p>\n<p><strong>关键代码：</strong>\n1、Component 类充当抽象角色，不应该具体实现。\n2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。</p>\n<p><strong>应用实例：</strong>\n1、孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。\n2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</p>\n<p><strong>优点：</strong>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p>\n<p><strong>缺点：</strong>多层装饰比较复杂。</p>\n<p><strong>使用场景：</strong>\n1、扩展一个类的功能。\n2、动态增加功能，动态撤销。</p>\n<p><strong>注意事项：</strong>可代替继承。</p>\n<h2>实现</h2>\n<p>我们将创建一个 Shape 接口和实现了 Shape 接口的实体类。然后我们创建一个实现了 Shape 接口的抽象装饰类 ShapeDecorator，并把 Shape 对象作为它的实例变量。\nRedShapeDecorator 是实现了 ShapeDecorator 的实体类。\nDecoratorPatternDemo，我们的演示类使用 RedShapeDecorator 来装饰 Shape 对象。</p>\n<h3>步骤 1</h3>\n<p>创建一个接口。</p>\n<p>Shape.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>步骤 2</h3>\n<p>创建实现接口的实体类。</p>\n<p>Rectangle.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shape: Rectangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Circle.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shape: Circle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>步骤 3</h3>\n<p>创建实现了 Shape 接口的抽象装饰类。</p>\n<p>ShapeDecorator.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeDecorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Shape</span> decoratedShape<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratedShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoratedShape <span class=\"token operator\">=</span> decoratedShape<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      decoratedShape<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>步骤 4</h3>\n<p>创建扩展了 ShapeDecorator 类的实体装饰类。</p>\n<p>RedShapeDecorator.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedShapeDecorator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ShapeDecorator</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratedShape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>decoratedShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token annotation punctuation\">@Override</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      decoratedShape<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           \n      <span class=\"token function\">setRedBorder</span><span class=\"token punctuation\">(</span>decoratedShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRedBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratedShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Border Color: Red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>步骤 5</h3>\n<p>使用 RedShapeDecorator 来装饰 Shape 对象。</p>\n<p>DecoratorPatternDemo.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoratorPatternDemo</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token class-name\">Shape</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">Shape</span> redCircle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">Shape</span> redRectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle with normal border\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nCircle of red border\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      redCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nRectangle of red border\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      redRectangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>步骤 6</h3>\n<p>验证输出。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Circle with normal border\nShape: Circle\n\nCircle of red border\nShape: Circle\nBorder Color: Red\n\nRectangle of red border\nShape: Rectangle\nBorder Color: Red</code></pre></div>","frontmatter":{"title":"装饰器模式","date":"2017-10-03 17:30:57"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/decorator-pattern/","previous":{"fields":{"slug":"/idea-for-mac-key-map/"},"frontmatter":{"title":"IntelliJ IDEA For Mac 快捷键"}},"next":{"fields":{"slug":"/strategy-pattern/"},"frontmatter":{"title":"策略模式"}}}}