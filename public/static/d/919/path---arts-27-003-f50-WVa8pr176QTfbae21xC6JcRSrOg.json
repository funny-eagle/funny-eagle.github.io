{"data":{"site":{"siteMetadata":{"title":"NoCoder Blog","author":"Jason Yang"}},"markdownRemark":{"id":"d8b608b6-3233-5f42-be00-56114b354ce4","excerpt":"Algorithm Review User guide for 4.x Tip…","html":"<h2>Algorithm</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>nocoder<span class=\"token punctuation\">.</span>leetcode<span class=\"token punctuation\">.</span>solution</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 709. To Lower Case\n * &lt;p>\n * Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.\n * &lt;p>\n * Example 1:\n * &lt;p>\n * Input: \"Hello\"\n * Output: \"hello\"\n * Example 2:\n * &lt;p>\n * Input: \"here\"\n * Output: \"here\"\n * Example 3:\n * &lt;p>\n * Input: \"LOVELY\"\n * Output: \"lovely\"\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToLowerCase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> lowerCase <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> chars<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> chars<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                n <span class=\"token operator\">+=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n                lowerCase<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                lowerCase<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> lowerCase<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Review</h2>\n<p><a href=\"https://netty.io/wiki/user-guide-for-4.x.html#wiki-h2-0\">User guide for 4.x</a></p>\n<h2>Tip</h2>\n<h3>寻找相似图片</h3>\n<p>接上周的图书图片爬虫引发的问题，图片爬下来以后，有不少“暂无图片”的图片，而且部分这些图片的命名还没有规律可循，所以没办法在爬取的时候就过滤掉。我使用了中间表来保存图书的信息及图片在本地的路径，所以可以找到对应关系，从而对类似“暂无图片”的图片进行删除。</p>\n<p>问题就在于如何快速的找到这些“暂无图片”图片，我的想法是通过找相似图片的方式，以一个图片找到其他类似的图片，在网上搜索了一下，找到了阮一峰老师的这篇文章。</p>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html\">相似图片搜索的原理-阮一峰</a></p>\n<p>这里的关键技术叫做”感知哈希算法”（Perceptual hash algorithm），它的作用是对每张图片生成一个”指纹”（fingerprint）字符串，然后比较不同图片的指纹。结果越接近，就说明图片越相似。</p>\n<p>下面是一个最简单的实现：</p>\n<p><strong>第一步，缩小尺寸。</strong></p>\n<p>将图片缩小到8x8的尺寸，总共64个像素。这一步的作用是去除图片的细节，只保留结构、明暗等基本信息，摒弃不同尺寸、比例带来的图片差异。</p>\n<p><strong>第二步，简化色彩。</strong></p>\n<p>将缩小后的图片，转为64级灰度。也就是说，所有像素点总共只有64种颜色。</p>\n<p><strong>第三步，计算平均值。</strong></p>\n<p>计算所有64个像素的灰度平均值。</p>\n<p><strong>第四步，比较像素的灰度。</strong></p>\n<p>将每个像素的灰度，与平均值进行比较。大于或等于平均值，记为1；小于平均值，记为0。</p>\n<p><strong>第五步，计算哈希值。</strong></p>\n<p>将上一步的比较结果，组合在一起，就构成了一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片都采用同样次序就行了。</p>\n<p>得到指纹以后，就可以对比不同的图片，看看64位中有多少位是不一样的。在理论上，这等同于计算<a href=\"http://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\">“汉明距离”</a>（Hamming distance）。如果不相同的数据位不超过5，就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。</p>\n<p>具体的代码实现，可以参见<a href=\"http://www.reddit.com/r/programming/comments/hql8b/looks_like_it_for_the_last_few_months_i_have_had/c1xkcdd\">Wote</a>用python语言写的<a href=\"http://www.ruanyifeng.com/blog/2011/07/imgHash.txt\">imgHash.py</a>。代码很短，只有53行。使用的时候，第一个参数是基准图片，第二个参数是用来比较的其他图片所在的目录，返回结果是两张图片之间不相同的数据位数量（汉明距离）。</p>\n<p>这种算法的优点是简单快速，不受图片大小缩放的影响，缺点是图片的内容不能变更。如果在图片上加几个文字，它就认不出来了。所以，它的最佳用途是根据缩略图，找出原图。</p>\n<p>实际应用中，往往采用更强大的<a href=\"http://www.phash.org/\">pHash</a>算法和<a href=\"http://en.wikipedia.org/wiki/Scale-invariant_feature_transform\">SIFT</a>算法，它们能够识别图片的变形。只要变形程度不超过25%，它们就能匹配原图。这些算法虽然更复杂，但是原理与上面的简便算法是一样的，就是先将图片转化成Hash字符串，然后再进行比较。</p>\n</blockquote>\n<p> <a href=\"http://www.ruanyifeng.com/blog/2011/07/imgHash.txt\">imgHash.py </a> 是<code class=\"language-text\">python2</code> 版本的，我稍微调整了一下，改成<code class=\"language-text\">python3</code>版本并在windows 机器上运行了一下，效果很不错。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/python</span>\n\n<span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\n<span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n\nEXTS <span class=\"token operator\">=</span> <span class=\"token string\">'jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpeg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gif'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'png'</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">avhash</span><span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>im<span class=\"token punctuation\">)</span>\n    im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>ANTIALIAS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span>\n    avg <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span> im<span class=\"token punctuation\">.</span>getdata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">64</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y_z<span class=\"token punctuation\">:</span> x <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>y_z<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> y_z<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> i<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> avg <span class=\"token keyword\">else</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> im<span class=\"token punctuation\">.</span>getdata<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hamming</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> h2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    h<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> h1 <span class=\"token operator\">^</span> h2\n    <span class=\"token keyword\">while</span> d<span class=\"token punctuation\">:</span>\n        h <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        d <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> d <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> h\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_similar_img</span><span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">,</span> dest_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        h <span class=\"token operator\">=</span> avhash<span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>dest_dir<span class=\"token punctuation\">)</span>\n        images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> ext <span class=\"token keyword\">in</span> EXTS<span class=\"token punctuation\">:</span>\n            images<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.%s'</span> <span class=\"token operator\">%</span> ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        prog <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">50</span> <span class=\"token keyword\">and</span> sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>isatty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span>\n            seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> hamming<span class=\"token punctuation\">(</span>avhash<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> prog<span class=\"token punctuation\">:</span>\n                perc <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span> prog <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n                x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> perc <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\rCalculating... ['</span> <span class=\"token operator\">+</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">40</span> <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.2f%%'</span> <span class=\"token operator\">%</span> perc<span class=\"token punctuation\">,</span> <span class=\"token string\">'(%d/%d)'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>prog<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                prog <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">if</span> prog<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span>\n\n        <span class=\"token keyword\">for</span> f<span class=\"token punctuation\">,</span> ham <span class=\"token keyword\">in</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> i<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> ham <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%s%s%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>ham<span class=\"token punctuation\">,</span> dest_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> root<span class=\"token punctuation\">,</span> dirs<span class=\"token punctuation\">,</span> files <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span><span class=\"token string\">'F:\\\\image\\\\2019-01-03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        find_similar_img<span class=\"token punctuation\">(</span><span class=\"token string\">'D:\\\\usr\\\\local\\\\github\\\\imgHash\\\\no-img.jpg'</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">D:\\usr\\local\\github\\imgHash\\venv\\Scripts\\python.exe D:/usr/local/github/imgHash/imgHash.py\n0\tF:\\image\\2019-01-03\\0\\9787555502739.jpg\n0\tF:\\image\\2019-01-03\\0\\9787555705956.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558102141.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558104916.jpg\n0\tF:\\image\\2019-01-03\\0\\9787558107627.jpg\n0\tF:\\image\\2019-01-03\\0\\9787801767912.jpg\n0\tF:\\image\\2019-01-03\\0\\9787806193433.jpg\n0\tF:\\image\\2019-01-03\\1\\9787509536063.jpg\n0\tF:\\image\\2019-01-03\\1\\9787511238757.jpg\n0\tF:\\image\\2019-01-03\\1\\9787514321104.jpg\n0\tF:\\image\\2019-01-03\\1\\9787514324389.jpg\n0\tF:\\image\\2019-01-03\\1\\9787530573099.jpg\n0\tF:\\image\\2019-01-03\\1\\9787546632865.jpg\n0\tF:\\image\\2019-01-03\\1\\9787546952581.jpg\n0\tF:\\image\\2019-01-03\\1\\9787549817719.jpg\n0\tF:\\image\\2019-01-03\\1\\9787553458199.jpg\n0\tF:\\image\\2019-01-03\\1\\9787558102387.jpg\n0\tF:\\image\\2019-01-03\\1\\9787560561981.jpg\n0\tF:\\image\\2019-01-03\\2\\9787511247278.jpg\n0\tF:\\image\\2019-01-03\\2\\9787511353801.jpg\n0\tF:\\image\\2019-01-03\\2\\9787513909280.jpg</code></pre></div>\n<h2>Share</h2>\n<p>分享几个图片处理算法的文章，非常有意思</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html\">相似图片搜索的原理</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html\">相似图片搜索的原理（二）</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/08/amazing_algorithms_of_image_processing.html\">神奇的图像处理算法</a></p>","frontmatter":{"title":"ARTS-27","date":"2019-01-05 18:41:22"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ARTS-27/","previous":{"fields":{"slug":"/ARTS-26/"},"frontmatter":{"title":"ARTS-26"}},"next":{"fields":{"slug":"/ARTS-28/"},"frontmatter":{"title":"ARTS-28"}}}}